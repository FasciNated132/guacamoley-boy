/**
Welcome to Combat Clash! ⚔️

 |            |
 V IMPORTANT! V

If the program crashes, restart it. You might have to wait for half a minute, so just be patient and let it load.
To prevent the program from crashing, avoid tinkering in the code, scrolling through the comments below, or going to a different page for an extended time. 
 
 
@SUBSCRIBE https://www.khanacademy.org/computer-programming/sub-to-osp/5792481952694272

@INFO 
started: 9/30/19
finished: 2/28/2020
released: 3/2/2020
50 votes: √
100 votes: √
150 votes: √
200 votes: √
250 votes: √

@CREDIT 
-Credit to God for giving me the ability to code this!
-Khan Gressman helped with the loading function, and many other various things besides giving me tips and tricks to make the game better in a whole.  

@LEADER_BOARD (spin-off proof required)
the top 5 people who died the least times
1) ikdsjf, 12 deaths
2) Elemental Ranger #KASV, 20 deaths
3) Tony Fata, 20 deaths
4) mrwildeandsons, 21 deaths
5) Anthony Fossey, 24 deaths

@STRATEGY_GUIDE
-Shoot at swordsmen from a distance to kill them.
-Charge archers, since they have no close range weapon.
-It is possible to dodge wizards' fireballs. Also, you can get rid of them by leading them into a wall.
-The swordsmen and archers are on patrol until they spot you. Sometimes you have to time your move well, and sneak past them.

@ENEMY_LOG
-SWORDSMEN: 
armor: weak 
attack: strong
-ARCHERS: 
armor: weak
close attack: super weak
distance attack: strong
-WIZARDS: 
armor: strong
close attack: super weak
distance attack: very strong
-BOSS: 
armor: very strong
attack: extremely strong

@UPCOMING_UPDATES
-a shop: upgradeable armor, weapons, speed, etc.
comment below for any recomended updates!

**/

//If you intend to read my code, have fun reading 12,000+ lines with minimal amounts of comments. :| ;P

smooth();

var click = false;
var page = 'load';
var gamePage = 1;
var storyPage = 1; 
var tutorialPage = 1;
var level = 1;
var deaths = 0;
var blockSize = 30;
var gold = 0;
var pauseFill = 100;

var blocks = [];
var keys = [];
var enemies = [];
var sprites = [];
var archers = [];
var wizards = [];
var bosses = [];
var fireBalls = [];
var arrows = [];
var knives = [];
var bolts = [];
var healthBonuses = [];
var coins = [];
var player1 = [];
var loadedBackgroundPics = {};
var cameraView = true;
var p1SpawnX;
var p1SpawnY;
var levelW;
var levelH;
var translateX = 0;
var translateY = 0;
var levelPickerScroll = 0;
var allLevels = 43;
var unlockedLevels = 1;
var load;
var runObjects;
var drawLevel;
var setLevel;
var playedLevels = 0;
var levels = [
    [
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                             A                            ',
'                                                          ',
'                             s                            ',
'                            sss                           ',
'1                       e  ssdss                 f        ',
'         ggggg       g    ssdkdss      QQg     sswss      ',
'gggggggggkkkkkgggggggkgggssddkkdssgggggggdgggggksssdgggggg',
'dkddkkkkdddddddddkkkkkkkkkkkkkkkkkkdddkkkkkddkkkkkkddkkkdd',
'ddkkkkkddsssddddddkkkkkkkkkkkkkkkkddssdddkkkkkkkkkddkkkkdd',
'ssddkkkkdddsdddddsdkkkkkkkkkkkkkdddssssddkkkdddkkkkkkkkkdd',
'sssddkkdddssssddddsdkkkkkkkkkkddddddsssddddkddddkkkkkddddd',
'sssddkkddssssddddddddkkkkkkdkkkkdddsssssdddkdddddkkkkkdddd',
'sssddkkdddssddddddsdkkkkkkkddkkdddssssdddddkdddddddkkkdddd',
    ],
    /*
    1:player spawn
    
    e:enemy
    2:archer
    z:wizard
    
    BOSS SPANWS
    Y: oran
    
    BLOCKS
    b: bark
    B: brick
    w: wood
    l: leaf
     s: stone
    d: dirt
    g: grass
    |: bars
    k: mud
    r: magma
    a: black
     
    checkPoint: A 
     
    HEALTH BONUS: X
    
    
    
    HEALTHBONUS/SPRITE COMBOS
    {: leaf
    q: stone
    
    PHYSIC BLOCKS
    L: ladder
    <: left current water
    >: right current water
    v: down current water
    p: portal door
    P: portal passage
    ^: falling block
    
    DEATH BLOCKS
    f: fire
    Q: spike
    
    DEATH BLOCK/SPRITE COMBOS
    F: fire/brick
    :: spike/stone
    Z: lava
    
    PHYSICBLOCK/SPRITE COMBOS
    `: stone/ladder
    +: brick/ladder
    x: bark/ladder
    }: leaf/ladder
    h: dirt/ladder
    U: grass/ladder
    y: magma/fallinh block
    
    SPRITES
    W: wood
    /: bars
    ]: bricks
    0: leaf
    [: bark
    G: grass
    D: dirt
    S:stone
    K: mud
    R: magma
    
    SPRITE/NORMAL ENEMY SPAWN COMBOS
    @: enemy/wood spawn
    #: enemy/bars spawn
    $: enemy/bricks spawn
    %: enemy/leaf spawn
    ^: enemy/bark spawn
    &: enemy/grass spawn
    *: enemy/dirt spawn
    (: enemy/stone spawn
    
    SPRITE/PLAYER SPAWN COMBOS
    3: player 1/wood spawn
    4: player 1/bars spawn
    5: player 1/bricks spawn
    6: player 1/leaf spawn
    7: player 1/bark spawn
    8: player 1/grass spawn
    9: player 1/dirt spawn
    c: player 1/stone spawn
    I: player/ magma spawn
    
    SPRITE/Archer SPAWN COMBOS
    ~: archer/wood spawn
    m: archer/bars spawn
    M: archer/bricks spawn
    n: archer/leaf spawn
    N: archer/bark spawn
    C: archer/grass spawn
    u: archer/dirt spawn
    V:archer/stone spawn
    
    SPRITE/WIZARD SPANW COMBOS
    i: wizard/stone spawn
    t: wizard/magma spawn
    
    FREE CHARACTERS
    E
    
    
    
    
    */

    

    [
'                                                              ',
'                                                              ',
'                                                              ',   
'                                                              ',
'                                                              ',
'                                                              ',
'                              2                               ',
'                            sSSSSSs                           ',
'                            sssss`s            2              ',
'                            /SVSS`/      sSSSSSSSSSSSSSs      ',
'               e            sSSSS`s      sssssssss`sssss      ',
'            sSSSSSs         sssss`s      /SSSSVSSS`SSSS/      ',
'            sssss`s         /SVSS`/      sSSSSSSSS`SSSSs      ',
'            /SVSS`/         sSSSS`s      sssssssss`sssss      ',
'            /SSSS`/         sssss`s      /SSSSSSSS`SSSS/      ',
'1           sSSSS`s         /SSSs`/   A  /SSS(SSSS`SS(S/      ',
'         X  sssss`s         /VSSs`/      /SSSSSSSS`SSSS/ QQ   ',
'ggggggggggggsssss`sssssssssssSSSs`ssssssss`sssssssssss`sssssss',
'dddddddddkdssSSSS`SSSSSSSSSSss`ss`sddkdsds`SSSSSSSSSSS`sdssddd',
'kkdddsssdssdsSSSS`SSSSSSSSSSSS`SS`sdsssdds`SSSSSSSSSSS`sdsddds',
'kkkddddsdkdssSSSS`SSSSSSSSSSSS`SS`sddsddds`SSSSSSSSSSS`sddddss',
'ddkkkdddkkddsssssssssssssssssssssssddddddsssssssssssssssssddsd',
'dddkddddddkkdssssdddsdddsddddddssddddddddddddddsssddddddsddddd',
'dddddkddkkkddddsdddssdkdsddkkddsssdddsssddkkkddsdsdddkdsssddds',
'dddkkkdddkdkkddsdddddsssddkkkddddsdddsssssddkdddsddddkkkdsddss',
],  
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'1     gggg   gg                e 2 e 2 e 2 e 2 e 2 e 2 e 2 ',
'     gddsdgggddggg       gggg                             g',
'gggggdssssdddssdddgggggggddddgggggggggggggggggggggggggggggd',
'ddddssddkddsddkkkdkkkkkdddssddddkkkkkkssddddddsdddddddsddds',
'skddssdkkkdssdkkkdsssdddddsdddddkkkkdsdsddddddssdkkdssssddd',
'kkkdsdkkdsssddddddsddddddskkddddddkkdsdddddddddsdkkkdsdddds',
'kkddssdddddsddkkkddsddddddskkkkddddkksssddddddsddkkkddsddds',
'dddssddssssdkkkkssdddddsdsdkkksdsdsdddssssddddsssdddsssssds',
],   
    [
'                                                           ',
'                                                           ',
'                   lllllllllllllllllllllll                 ',
'            lllllllllllllllllllllllllllllllllll            ',
'        llllllllllllllllllllllllllllllllllllllllllll       ', '    lllllllllllllllllllllllllllllllllllllllllllllllllll    ',
'   llllllllllllllll00000000000000000000llllllllllllllllll  ',
'  lllllllllllllllll0000000n0{0000000000lllllll0000000%0000 ',
'  llllllllllllllllll}llll000l0000000000000llll000000000000l',
'  lllllllllllllllll0}llllllllllllll000%0000lll}llllllllllll',
'   llllllllllllllll0}lllllllllllll00l000000lll}lllllllllll ',
'   lllllllllllllllll}llll0000000l000llllllllll}0000lllllll ',
'    lllllllbllllllll}0ll000000[00000llllllllll}0000llllll  ',
'    lllllbl[[00000l0}0[l0%l00[[0000lllllll lllllll}llll    ',
'     llllbb0[[000000}[bb00bb[[bblblllll        lll}ll      ',
'        lbb[[bbll00[lbbllllb[[[bb                bxb       ',
'          bxbb  lllbbbb ll  b[[b                 bxb       ',
'          [xb        bb      [[b                 bxb       ',
'          [xb       bb       [bb                 bxb       ',
' 1        bbb       bb       bbb       A         [xb       ',
'         bbbb       bb       bbb                 [xb       ',
'gggggggggbbbbgggggggbbgggGGgbbbbgGGggggggggggggbbbbbggggggg',
'skkkkdddbbbdbddddkkdbbbddDDD[[[DDDDdddddddkkkddbbddbdkkkkkd',
'ssskkkkdbbddbbdkkkdbbdbdddD[[D[[DDddddsdddddkkdddbdbdddkkkk',
'ssssddkkkbbdddddkdddbddddddbbdbbdddddsssdddddkdddbbbbdddssk',
'ssskkkkdddbdddddsdddbddddddbbddbbddddddsdddddddddbddbdddsdd',
'sddddkkdddbddddddddddddddddbdddbdddddddddddddddddbddddddsdd',
'sdddddkddddddddddddddddddddddddddddkkdddddddddddddddddddsdd',
'sdddddddddddddddddddddddddkkkkkddkkkkkdkddddddddddddddddsdd',
'sdddddddddddddddddddddkkkkkkkkkkkkkkkkkkkkkdddddddddddddsdd',
'sddddddddddddddddddddddddkkkkkkddddkkkkdddddddddddddddddsdd',
'sdddddddddddddddddddddddddddkkddddddddddddddddddddddddddsdd',
],  
    [
'  llllll                                                   ',
'lllllllllll                                                ',
'lllllllllllll                                              ',
'llllllllllll000                                            ',
'lllllllllll00000                                           ',
'l000000000000000   SS SS qS                                ',
'l0000{000000000l   SSSSVSSS                                ',
'l}llllllllllllll   sSSSSSSs                                ',
'l}00000000%00000   ssssss`s                                ',
'l}0000000000000l   /SSVSS`/                                ',
'lllll}lllllllll    sSSSSS`s                                ',
'lllll}bllllllll    ssssss`s                                ',
'lllllxllllllll     /SSVSS`/                                ',
'  lbbxlblllll      sSSSSS`s                                ',
' 1  bxbbl          ssssss`s                                ',
'     xb            wSSSSS`s             X                  ',
'     xb            wS(SS(`S    e              2      gg    ',
'     xb            wSSSSS`S         Q  sSSs        ggddg   ',
'ggUGgbbggGGGGggggggsddddddssssssssssssssSSsssdddgggddsddggg',
'kkhDsbbddDDSkdddddsssdddddsddddddkkdksdsSSsdddssddddssssddd',
'kdhKD[[[[DSKkkkkdddsddddddsssdddddkkkdssvvsdddddsdddddsddds',
'kdhDS[[D[Ddskkdddddsddddddssdddddddkksssvvsdddsdddddddsddds',
'dddsbbdssssdkkssssdddddsdsddddsdsdsdddssvvsdddsssdddsssssds',
'dddddbddssddddddsddddddddddddddddddddddsvvsdddddddddddssddd',
'ddddddddssddddddsddddddddddddddddddddddssssdddddddddddssddd',
], 
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                          s S S S S S ( Ses',
'                                          sSSSSSSSSSSSSSSSs',
'                                          sssssssssssssss`s',
'                                          sSSSSSSSSSSSSSS`s',
'                                          /SSSSSVSSSSSSSS`s',
'                                          sSSSSSSSSSSSSSS`s',
'                                          sssssssssssssss`s',
'                                           dsdddddddsssddhs',
'                                           SSDSSSDSSSSuDKhd',
'                                            sDDDDDSSDDDDShd',
'                                            sddddssskddddhd',
'                                             SDSSSKDKKuDDhd',
'                                             dSSSSDDDDDDD`s',
'                                             ssssdddddddshd',
'                                         QQQgdddskkddkkss`d',
'                                        QgkkddddddkkDKKSShs',
'                                       QgkkkdsddkkkkKDSSS`s',
'                                      ggkkdsssskdkkdDhdddsd',
'                                  gUGddddddddkkkdddsK`sddss',
'1                         ggggggggdhDddddddsdddddddkK`ssdss',
'        ggggggggggggggggggddddkkkdd`DddddsssdkkdkkkkDhddsss',
'ggggggggddddkkkkkkkddddddddddddkddd`SDDDDDqKKKKDKKKSS`sssss',
'dsddddddddddddkkksssssdddddddssddddhSSDDDDSSDKKKSKKDS`sssss',
'dddddddddsdddkkdssddsssdddddsssskkssssdddsssskkkskkssssssss',
'ddddddddssdddddsssdddsdddddsskkkkkkssdddddssssddsskkkssdssd',
'dddddddddddddddsdddddsddddddddkkkssddddddddddsssssssksddddd',
'ddddddddddddddddddddddddddddddddsdddddddddddddddssdsssddddd',
'dddddddddddddddddddddddddddddddddddddddddddddddddddsddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddkkkdddkkkkkdddddddddddddddddddddddddddddddd',
'ddddddkkkkkkkkkkkkkkkkkkkkkkkdddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
],
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ', 
'                                     A                     ',
'1                                         2      QQs       ', 
'      gg                   2  X      s::sGGGggg ssssgggg   ',
'ggggggkdggggggggggggggws::sGGGgggggggssssddddddgggggddddggg',
'dddddkkdddddddddddddddssssddddddddddddddddssddddssdddsssddk',
'dsddddddddddddssssssssdddddddssddddddddddddsdddddssddddssss',
'dddddddddsddddddssddsssdddddssssddssssdddsssssddsssssssssss',
'ddddddddssdddddsssdddsdddddssssssssssdddddsssssssssssssdssd',
],
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                           w                               ',
'                          www                              ',
'                         wwWwwB]B                          ',
'                        wwWWWWB]B                          ',
'                       wwWWWWWB]B                          ', '                       ssssss`B]B                          ',
'1                      SSSSSS`]]B     g                    ', '                       SSSSVS`]FB    gdggUggggg QQQ gggg   ',
'gggg    gggggggggggggggssssGGUBwBggggssss`dddddgggggddddggg',
'ddddggggdddddddddddddddssssddhddddddddddd`ssddddssdddsssdds',
'dsddddddddddddssssssssdddddddhSDDDDDDDDDD`dsdddddssddddssss',
'dddddddddsddddddssddsssdddddshSSDDSSSSDDDhssssddsssssssssss',
'ddddddddssdddddsssdddsdddddssssssssssdddddsssssssssssssdssd',
],
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ', 
'                                                           ',
'                                                           ',
'                                                           ',
'                                                      sss`s',
'                                                   ssssss`s',
'                                              2 2SVSVS(SS`s',
'                                             sSSSSSSSSSSS`s', 
'                                         QQQQssssssssssss`s',
'                                        dddssssssssssssss`s',
'                                       dsssssssssssssssss`s',
'                                       ddddssddddddssssss`s',
'                                      ddsssssdddsssssssss`s',
'                                     sdssssssssssssssssss`s',
'                                    ddddsssssssssssssssss`s',
'                                  ssdkdssssssssssssssssss`s',
'                                 Qsssdsssssssssssssssssss`s',
'                             A  sssssssssssssssssssssssss`s',
'                                SSsssssssssssssssssssssss`s',
'                Q            gGDDSSdddsssssssssssssssssdd`d',
'1              gg   e   2    ddDSSSSSSSS(SSS(SSS(SSSSSSSS`s',
'               ddd   dg   gdddddsSSSSSSSSSSSSSSSSSSSSSSSS`s',
'gggggggdS:Sdggdsssdgdsdggddssssssssssdddddsssssssssssssdssd',
'dddddddddsgddddsdddddsddddddddddsssddddddddddsssssssssddddd',
'ddddddddddddddddddddddddddddddddsdddddddddddddddssdsssddddd',
'dddddddddddddddddddddddddddddddddddddddddddddddddddsddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
],
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                          s',
'                                                        Qss',
'                                                       ssss', 
'                                                    QQQssss',
'                                                   ssssssds',
'                                                sssssssssdd',
'                                              ssssssssssddd',
'                                             sssssssssssssd',
'                                             ssssssssssssss',
'                                            sssssssssssssss', 
'                                         QQsssssssssssdssss',
'                                 ll    sdddsssddsssssddssss',
'                                 llll Adsssssssdddddddddsss',
'                                lllb0  ddddssddddddssssssss',
'                                 l [[ ddsssssdddsssssssssss',
'                                   [[bdssssssssssssssssssss',
'                                   [bbddsssssssssssssssssss',
'                                  ssdbdssssssssssssssssssss',
'                                 Qsssssssssssssssssssssssss',
'                                sssssssssssssssssssssssssss',
'                                 ssssssssssssssssssssssssss',
'                               ddssdddsssssssssssssssssddsd',
'1       g          2         ggddssssssssssssssssssssssssss',
'       gddg                dddddssssssssddsssssssssssssssss',
'gggggggdssddggdsssdgdsdggddssssssssssdddddsssssssssssssdssd',
'dddddddddddddddsdddddsddddddddddsssddddddddddsssssssssddddd',
'ddddddddddddddddddddddddddddddddsdddddddddddddddssdsssddddd',
'dddddddddddddddddddddddddddddddddddddddddddddddddddsddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',
],
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                 ss        ',
'                                    sSSSS(SSSSSSsssss      ',
'                                    sSSSSSSSSSSSssdssssd   ',
'                                    sssssssssss`sssssdddd  ',
'                                    SVS(SVSSSSS`sssdddddds ',
'                                    SSSSSSSSSSS`ssssdddssss',
'                                    sSSSSSSSSSS`ssssddddsss',
'                               A  Qssssssdsssssssssssssssss',
'                                 sssssssddssssssdsssssssssd',
'                               sssssssdddssssssdddsssssssdd',
'                             dsssssssddddddssssdddddssssddd',
'                            sdddssssddddsssssssdddddddddddd',
'                           Qsdssssssssssssssdddddddddsddddd',
'                        Qdssssssssssssssssddddddsssssddddds',
'                       ddsssssssssssssssddddddsssssssssdddd',
'                      ddddssssssssssssssdddssssssssssssssss',
'                     dddddssssssssssssssssssssssssssssddsss',
'                   sssdddsssssssssssssssssddssssssssssdddss',
'                  ssssssssssdssssssssssssdddddsssssssddddds',
'                QQsssssssssddssssddsssssssdddsssssssssssddd',
'             Qssssssssssssssssssddddsssssssdsssssssssssssdd',
'           ssssssssssssssssssssssssssssssssdddssssssssssssd',
'          dssssssssssssssssssssssssssssssssddddssssssssssss',
'        ddddsssssssssssssssssssssssssssssssssssssssssssssss',
'    dddddddddsssssssssssssssddssssssssssssdddssssssssssssss',
'1  ddddddssssssssssssssssdsssdsssssssssssssdsssssssssssssss',
'   dddssssssssssssssssdddddssssssssssssssssssssssssssssssss',
' dddsssssssssssssssddddddddddsssssssssssssdddddssssssssssss',
'ssddssssssssssssssssdddddddssssssssssssddddddddddddssssssss',
'sssssssssssssssssssssddsssssssssssddddddddsssdddddddsssssss',
'sssssssssssssssssssssssssssssssssdddddsssssssdddddsssssssss',
'ssssssssssssssssssssssssssssssssssssdssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
'sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',
],
    [
'                                                           ',
'                                                           ',
'         llll                                              ',
'       lllllll                                             ',
'       lllllllll                                           ',
'       llllllll                                            ',
'1       lllbll                                             ',
'         lbbb                                              ',
'dddd      [[                                               ',
'ddddddd   [[                                               ',
'ssdddddddgbbgg                                             ',
'dddddddddbbbddgdgddgd                                      ',
'ssssddddbbdbbdddddddddddd                                  ',
'ssssssdddbddbddddddddddssssss                              ',
'sssssssddddddsssdddddsssssssdddss                          ',
'ssssssssdddsssssddddddssssddddssSS                         ',
'sssssssdddddssdddddddddssDSV(SV(SVSS                       ',
'ssssssssddddddddssdddddssDDSSSSSSSSs                       ',
'sssssssssdddddddddddssssssssssssssssd                      ',
'dddddddsdssssdddddsssddddsdddddddssssd                     ',
'dddddssddddddddddddsssddddssssdsssddddd                    ',
'ddssssssdddddddddddsdddddddsddddssssssss                   ',
'ssssssssssdddddddsssdddddsssssddddsssssss                 ',
'ssssssssssssssdssssssddsssssdddddddsssssssd                ',
'ssssssddddsssssssssddddsssssssdddssssssssssd              ',
'sssdddddddddssssddddddddddsssssssssssssssddddg             ',
'sdddddddddddddddddddddddddddssssdddddsssddddddd            ',
'ssddddddddssddddddssdddddddssssssssddddddddssdd            ',
'dddddddssssssddssssssddddsssssssssssssddddssssdd           ',
'ddddsssssssdddddsssssssddssssssssssddddddddssssdg          ',
'ddssssssssssdddddssssssssssssssssddddddddsssssdddg         ',
'sssssssssdddddddddddssssssssssssssssdddddddddssddddd       ',
'sssssssdddddddddddddddsssssssssssssssssddssssssddddddg     ',
'sssssssssssdddddddddddsssssssssssssssssdddsssssdddddsssg   ',
'ddssssssssssssssddsssssssssssssssssssssssdsssssssddddddsdgg',
'ddddssssssssssssssssssssssssssssssssssssdddsssssssddsssssss',
'ddddddssssddssssssssssddsssssdddsssssssddddddssssssssssdddd',
'dddddddsdssssdddddsssddddsdddddddssssddddddddddddssssdddddd',
],
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'                                                           ',
'1     gggg   gg      z                                     ',
'     gddsdgggddggg       gggg                             g',
'gggggdssssdddssdddgggggggddddgggggggggggggggggggggggggggggd',
'ddddssdddddsdddddddsddddddssddddddddssssddddddsdddddddsddds',
'sdddssdddddssdddddsssdddddsddddddddddsdsddddddssddddssssddd',
'ddddsddddsssddddddsddddddsssdddddddddsdddddddddsdddddsdddds',
'ddddssdddddsdddddddsddddddssddddddddssssddddddsdddddddsddds',
'dddssddssssdsdssssdddddsdsddddsdsdsdddssssddddsssdddsssssds',
],
    [
'                                                          ', '                                                          ', '                                                          ',
'                                                          ', '                                                          ', '                                                          ',
'                                                          ', '                                                          ', '                                                          ',
'                                                          ', '                                                          ', '                                          z               ',
'1                                        r  r             ', '                         ddddd          Rrrrrrr          r', 'ggggggddgggdgggddddssggddddkkggrrrRRRRRRRddrrrrrrsssrrrrrr',
'dddddddddddkdddddddddddddddssdddrrrrRRRRRdddrrrdddddkdddrr', 'kddddddddkkkkddddddddkkkdsssssssddrrrRRRRrrrrrrrrssdkkrrrr', 'kkddddddkkkkkkddddkddkdsssssssssssrrrrRRRRRrrrrrsrrrrrrRRR',
'kkkddddkkkkkkkkdsddkkddddsdddddkkdkrrrrRRRRRRRRRSRRSRRRRRR',
'kddsssssddkkkddsssddsssssssddsskssskksrrrRRRRRRRRRRRRRRRRr',
'ddssssssssddddsrrssssssssssssssssssssssrrrrrssrrrrrsrrrrrr',
'rrrrrsssssssdrrskdssssssssrrrssssssssssrrrsssssrrrrrrrrrrr',
    ],
    [
'                                                          ', '                                                          ', '                                                          ',
'                                                          ', '                                                          ', '                                                          ',
'                                                          ', '                                                          ', '                                                          ',
'                                        ssssssss          ', '                                        /cicici/          ', '                                        sSSSSSSs          ',
'1                                       ssssssss          ', '                                        |SSSSSSS          ',
'1                                       |SSSSSSS          ', '      ss                                |SSSSSSS s        ', 'ggggggdsdggdgggddddssggddddkkggkdddssrrrssssssssrsssrrrrrr',
'dddddddddddkdddddddddddddddssdddddkkddrrssssssssddddkdddrr', 'kddddddddkkkkddddddddkkkdsssssssddkddkssssssssssrssdkkrrrr', 'kkddddddkkkkkkddddkddkdsssssdddsddkkksdksssssssssssdrdskkd',
'kkkddddkkkkkkkkdsddkkddddsdddddkkdkkkkksssssssssrrssrdrrrr',
'kddsssssddkkkddsssddsssssssddsskssskksssssssssssssdsssrrrr',
'rrrrrrssssddsssrrssssssssssssssssssssssrssssssssrrrsrrrrrr',
'rrrrrrrrrsssrrrrrrrsssssssrrrssssssssssrsrssssssssssssssss',
    ],
   [

'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrRRRRR',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRR',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRRRRRRRrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR',
'rrrrrrrrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR',
'rrrrrrrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR',
'rrrrrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR',
'rrrrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR', 'rrrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR', 'rrrrrrrrrrrrrrrrrrrRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR',
'rrrrrrrrrrrrrrrrrrSRSRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRSRR',
'rrrrrrrrrrrrrrrrsRSSssssssSssSSSSsssSSSsSSSSSsSSSSssssRRRR', 'rrrrrrrrrrrrrssSSSSssssRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRsssss',
'IRRRRRRRRRSSSSSSSSrrrrrrZZZZZZZZZZZZZZZZZZZZZZZZZZZrrrrrrr',
'RRRRRRRRSSSSSSSSSrrrrrrrrZZZZZZZZZZZZZZZZZZZZZrrsssrrrrrrr', 'rrrrrrrrrsssssssrrrrrrrrrrrrrrZZZZZZZZZrrrrrrrrssddssrrrrr',
'rrrrrrrrrssssssrrrrrrrrssrrrrrrrrrZZZrrrrrrrrsssdddkdsrrrr',
'rrrrrrrrrrsssrrrrrrrrrsssssrrrrrrrZZZrrrrrrsssdddkkddsrrrr',
'rrrrrrrrrrrrsrrrrrrrrrrrrssrrrrrrrZZrrrrrrrrrrdskdssrsrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrssrrrrrrrrZrrrrrrrrrrrrssrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',

    ],
    [
'                                                          ',
'                                                          ', '                                                          ',
'                                                          ', '                                                          ',
'                                                          ', '                                                          ',
'                                                          ', '                                                          ',
'                                                       z  ',
'                                                         s',
'                                                  e    ssr',
'                                                     ssrrr',
'                                                e  ssrrrrr', '                                                 ssrrrrrrr',
'                                               ssrrrrrrrrr', '                                             ssrrrrrrrrrrr',
'  1                                        ssrrrrrrrrrrrrr', '                                         ssrrrrrrrrrrrrrrr', 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', 'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',        
        ],
    [

'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '                     rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'                                           rrrrrrrrrrrrrrr', '                                                 rrrrrrrrr',
'                                                       rrr', '                                                         R',
'                                                         R', '                                                         R',
'                                                         R',
'                                                         R',
'                                                         R',
'                                                     sssss',
'                                               z   ssrrrrr', '                                                 ssrrrrrrr',
'                                               ssrrrrrrrrr', '                                             ssrrrrrrrrrrr',
'                                      e    ssrrrrrrrrrrrrr', '                                         ssrrrrrrrrrrrrrrr', '                                       ssrrrrrrrrrrrrrrrrr', '                                     ssrrrrrrrrrrrrrrrrrrr', '                                   ssrrrrrrrrrrrrrrrrrrrrr', '                                 ssrrrrrrrrrrrrrrrrrrrrrrr', '                               ssrrrrrrrrrrrrrrrrrrrrrrrrr', '                             ssrrrrrrrrrrrrrrrrrrrrrrrrrrr', '                           ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '                         ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '                       ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '                     ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '                   ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '                 ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '               ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '             ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '           ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '         ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '       ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '1    ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', '   ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', ' ssrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', 'srrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',        
        ], 
    [
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'1                         Y                               ',
'                                                          ',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',
'rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr',        
        ],
    [
'                                                                                                                    ',
'                                                                                                                    ',   
'                                                                                                                    ',
'                                                                                                                    ',
'                                                                                                                    ',   
'                                                                                                                    ',
'                                                                                                                    ',

'                                                                                                                    ',
'                                                                                                                    ',
'                                                                                                                    ',
'                                                                                                                    ',
'                                                                                                                    ',
'1                                                                                                      z  z  z      ',
'                                                                                                                    ',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'                                                                                                                    ',
'                                                                                                                    ',   
'                                                                                                                    ',
'                                                                                                                    ',
        ], 
    [
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                                                          ',
'                            zaz                           ',
'                             a                            ',
'                           aaaaa                          ',
'                          aaaaaaa                         ',
'                         aaaaaaaaa                        ',
'                        aaaaaaaaaaa                       ',
'aaaa      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa     aaaa',
'aaaaaa      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa     aaaaaa',
'aaaaaaaa                                          aaaaaaaa',
'aaaaaaaaaa     e             A             e    aaaaaaaaaa',
'aaaaaaaaaaaa          a             a         aaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa   aaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa    aaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaa     aaaaaaaaaaaaaaaaaaaaaaaaa',
'                  aaa          aaa    aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa                 aaa                 ',
'                  aaaaaa              aaa                 ',
'                  aaa  aaa            aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa          aaa    aaa                 ', '                  aaa                 aaa                 ',
'                  aaa              aaaaaa                 ',
'                  aaa        z   aaa  aaa                 ',
'                  aaa          aaa    aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa                 aaa                 ',
'                  aaaaaa              aaa                 ',
'                  aaa  aaa            aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa          aaa  X aaa                 ', 
'                  aaa            e    aaa                 ',
'                  aaa              aaaaaa                 ',
'                  aaa        e   aaa  aaa                 ',
'                  aaa          aaa    aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa                 aaa                 ',
'                  aaaaaa              aaa                 ',
'                  aaa  aaa            aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa          aaa  A aaa                 ', 
'                  aaa            z    aaa                 ',
'                  aaa              aaaaaa                 ',
'                  aaa        e   aaa  aaa                 ',
'                  aaa          aaa    aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa                 aaa                 ',
'                  aaaaaa              aaa                 ',
'                  aaa  aaa            aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa          aaa    aaa                 ', '                  aaa            e  X aaa                 ',
'                  aaa              aaaaaa                 ',
'                  aaa            aaa  aaa                 ',
'                  aaa          aaa    aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa                 aaa                 ',
'                  aaaaaa              aaa                 ',
'                  aaa  aaa            aaa                 ',
'                  aaa    aaa          aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa        aaa      aaa                 ',
'                  aaa          aaa    aaa                 ', '                  aaa                 aaa                 ',
'                  aaa              aaaaaa                 ',
'                  aaa            aaa  aaa                 ',
'                  aaa          aaa    aaa                 ',
'                  aaa 1      aaa      aaa                 ',
'                  aaa      aaa        aaa                 ',
'                  aaa    aaa          aaa                 ',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',

        ],
    [
'                                                           ',
'                                                           ',
'                                                           ',
'                       2                                   ',
'                      sSSSSSSSs                            ',  
'                      sssssss`s                            ',  
'                      /VSSSSS`/                            ',
'                      sSSSSSS`s                     2      ',  
'                      sssssss`s                    sSSSSSSs',
'                      /VSSSSS`/                    ssssss`s',
'                      sSSSSSS`s                    /VSSSS`S',  
'                      sssssss`s                    sSSSSS`S',
'                      |SSSSSS`S                    ssssss`s',
'1                     |SSSSSS`S                    /SSSSS`S',
'                      |SSSSSS`S                    /SSSSS`S',
'ggggggggggggggggggggggsssssssssssssssssssssssssssssssssssss',
'kkdddddddkkdddddddddddsssssssssssssssssssssssssssssssssssss',  'ddddssdddddsdddddddsddddddssddddddddssssddddddsdddddddsddds',
'sdddssdddddssdddddsssdddddsddddddddddsdsddddddssddddssssddd',
'ddddsddddsssddddddsddddddsssdddddddddsdddddddddsdddddsdddds',
'kdddssdddddsdddddddsddddddssddddddddssssddddddsdddddddsddds',
'kkdssddssssdsdsssddkdddddsddddsdsdsdddssssddddsssdddsssssds',
'kkkdsdssdkddddssssdddddsksddddsdsdsdddssssddddsssdddsddssds',
'kkkkkkddddddddkdssdddddkkkddddsdsdsdddssssddddsssdddsddssds',
],

    [

'                                                          ', '                                                          ', '                                                          ', '                                                          ', '                                                          ', '                                                          ', '                            1                             ', '                         sSSSSSs                          ',
'                         sssss`s                          ', '           sSSSSSSs      /SSSS`/                  SSs     ',
'           ssssss`s      sSSSS`s                  `ss     ',
'           /SSSSS`S      sssss`s                  `Ss     ', '           /SSSSS`S      /SSSS`/                  `S|     ',
'           /SSSSS`S      /SSSS`/     s  s     B]B `Ss     ',
'swwwwwwwwwwwssssssssssssssssssssss`sssSSsss`ssB]Bssss     ', 'ss         ssSWSSWSSWSSWSSWSSWSSWs`sssSSsss`ssB]Bssss gg  ',
'ssvvvvvvvvvssSWSSWSSWSSWSSWSSWSSWS`sssvvsss`SSB]BSSSsgddgg',
'dsvvvvvvvvvssSWSSWSSWSSWSSWSSWSSWS`sdsvvsds`SS]F]SSSsdkkdd',
'dsvvvvvvvvvssssssssssssssssssssssssddsvvsssssssssssssddsss',
'dsvvvvvvvvvsdssssdddsdddsddddddssddddsvvsddddddsssddddddsd',
'dsssssssssssdddsdddssdkdsddkkddsssdddsvvsdkkkddsdsdddkdsss',
'dddkkkdddkdkkddsdddddsssddkkkddddsdddsssssddkdddsddddkkkds',
'ddkdkkkddkkkkkdsddddkkdssskddddddsssdddssdddkkddssdkkkkkks',
'ddddkkkkkkkddkdsssddkkkdssdkkddddsddddddssddkdkdsddddkkkdk',
'dsdddddkkkdsdsddsdddkkddkkkkdddssddddssksddddddsdssdddddss',
'dsddddsssddddssskkddsdddsdddsddssddddssssddddddsssdddddkkk',
'sssddkkddddkkkdsddddsssssskddddssddsdsssssddkkddssddddkkks',
'ddkdkkkddkkkkkdsddddkkdssskddddddsssdddssdddkkddssdkkkkkks',
'ddddkkkkkkkddkdsssddkkkdssdkkddddsddddddssddkdkdsddddkkkdk',
   ],
  
    [],
    
    
    
];    


frameRate(50);

textFont(createFont('monospace'));
var runObject = function(obj) {
    for(var i = 0; i < obj.length; i ++) {
        obj[i].run();   
    }
};    
var drawtext = function (x, y, Size, Text, col) {
    pushMatrix();
    translate(x, y);
    scale(Size * 0.3);
    if(col === 1) {
        stroke(0, 0, 0);
    } else if(col === 2) {
        stroke(255, 255, 255);
    }    
    strokeWeight(Size*7);
    noFill();
    switch (Text.toUpperCase()) {
        case "A" : 
            line(0, 20, 0, 60);
            line(40, 20, 40, 60);
            arc(20, 20, 40, 40, 180, 360);
            arc(20, 20, 40, 30, 180, 360);
            arc(17, 22, 35, 32, 180, 360);
            line(0, 30, 40, 30);
            line(35, 30, 35, 60);
            line(37, 30, 37, 60);
            line(20, 35, 30, 35);
        break;
        case 'B':
            line(0, 0, 0, 60);
            line(0, 0, 10, 0);
            line(0, 30, 10, 30);
            line(0, 60, 10, 60);
            arc(10, 15, 60, 30, -90, 90);
            arc(10, 15, 55, 30, -90, 90);
            arc(10, 15, 50, 30, -90, 90);
            arc(10, 45, 60, 30, -90, 90);
            arc(10, 45, 55, 30, -90, 90);
            arc(10, 45, 50, 30, -90, 90);
            
            
            arc(8, 18, 50, 25, -90, 90);
            arc(8, 48, 60, 25, -90, 90);
        break;    
        case 'C':
            arc(25, 30, 50, 60, 45, 325);
            arc(20, 30, 45, 60, 45, 325);
            arc(22, 30, 48, 60, 45, 325);
        break;    
       case 'D':
           line(0, 0, 0, 60);
           line(0, 0, 10, 0);
           line(0, 5, 10, 5);
           line(0, 60, 10, 60);
           arc(10, 30, 60, 60, -90, 90);
           arc(10, 33, 50, 50, -90, 90);
           arc(10, 31, 50, 55, -90, 90);
         break; 
         case 'E':
             line(0, 0, 0, 60);
             line(0, 0, 40, 0);
             line(0, 30, 30, 30);
             line(0, 60, 40, 60);
             line(0, 5, 40, 5);
             line(20, 35, 30, 35);
            
            break; 
        case 'F':
            line(0, 0, 0, 60);
             line(0, 0, 40, 0);
             line(0, 30, 30, 30);
             line(0, 5, 40, 5);
             line(20, 35, 30, 35);
        break;      
        case 'G':
            arc(20, 30, 40, 60, 35, 325);
            arc(18, 30, 35, 60, 35, 325);
            line(20, 35, 30, 35);
            line(35, 43, 32, 38);
            
        break;    
        case 'H':
            line(0, 0, 0, 60);
            line(40, 0, 40, 60);
            line(35, 0, 35, 60);
            line(0, 30, 40, 30);
            line(20, 35, 40, 35);
        break;    
        case 'I':
            line(0, 0, 40, 0);
            line(0, 60, 40, 60);
            line(20, 0, 20, 60);
            line(0, 5, 40, 5);
            line(25, 0, 25, 30);
            
            
        break;    
        case 'J':
            line(0, 0, 40, 0);
            line(40, 0, 40, 30);
            arc(20, 30, 40, 60, 0, 180);
            line(0, 5, 40, 5);
            line(35, 0, 35, 30);
            arc(18, 30, 35, 60, 0, 180);
            
        break;    
        case 'K':
            line(0, 0, 0, 60);
            line(0, 30, 40, 0);
            line(0, 30, 40, 60);
            line(0, 35, 40, 5);
            
            break;
        case 'L':
            line(0, 0, 0, 60);
            line(0, 60, 40, 60);
            
        break;    
        case 'M':
            
            arc(10, 30, 20, 60, 180, 360);
            arc(30, 30, 20, 60, 180, 360);
            arc(27, 30, 15, 60, 180, 360);
            arc(10, 30, 20, 50, 180, 360);
            arc(27, 30, 15, 50, 180, 360);
            line(0, 30, 0, 60);
            line(40, 30, 40, 60);
            line(35, 30, 35, 60);
            
        break;    
        
        case 'N':
            arc(0, 30, 80, 60, 270, 360);
            arc(0, 30, 70, 50, 270, 360);
            line(0, 0, 0, 60);
            line(40, 30, 40, 60);
            line(35, 30, 35, 60);
            
        break;    
        case 'O':
            ellipse(20, 30, 40, 60);
            ellipse(15, 35, 30, 50);
            ellipse(17, 33, 35, 55);
        break;    
        case 'P':
            line(0, 0, 0, 60);
            line(0, 0, 10, 0);
            line(0, 30, 10, 30);
            arc(10, 15, 60, 30, -90, 90);
            arc(7, 15, 55, 30, -90, 90);
            arc(5, 18, 50, 26, -90, 90);
            
        break;    
        case 'Q':
            ellipse(20, 30, 40, 60);
            ellipse(15, 35, 30, 50);
            ellipse(17, 33, 35, 55);
            line(30, 50, 40, 60);
        break;     
        case 'R':
            line(0, 0, 0, 60);
            line(0, 0, 10, 0);
            line(0, 30, 10, 30);
            arc(10, 15, 60, 30, -90, 90);
            arc(7, 15, 55, 30, -90, 90);
            arc(5, 18, 50, 26, -90, 90);
            line(0, 30, 40, 60);
        break;    
        case 'S':
            arc(20, 15, 60, 30, 100, 280);
            arc(20, 17, 60, 25, 100, 280);
            arc(10, 45, 50, 30, 270, 500);
            
        break;    
        case 'T':
            line(0, 0, 40, 0);
            line(20, 0, 20, 60);
            line(0, 5, 40, 5);
            line(25, 0, 25, 30);
        break;    
        case 'U':
            arc(20, 30, 40, 60, 0, 180);
            arc(18, 30, 35, 60, 0, 180);
            line(0, 0, 0, 30);
            line(35, 0, 35, 30);
            line(40, 0, 40, 30);
        break;    
        case 'V':
            line(0, 0, 20, 60);
            line(40, 0, 20, 60);
            line(35, 0, 18, 45);
        break;    
        case 'W':
            line(0, 0, 10, 60);
            line(10, 60, 20, 30);
            line(20, 30, 30, 60);
            line(30, 60, 40, 0);
            line(35, 0, 25, 50);
        break;    
        case 'X':
            line(0, 0, 40, 60);
            line(40, 0, 0, 60);
           line(-5, 60, 35, 0);
        break;    
        case 'Y':
            line(0, 0, 20, 30);
            line(20, 30, 40, 0);
            line(20, 30, 20, 60);
            line(18, 25, 35, 0);
        break;
        case 'Z':
            line(0, 0, 40, 0);
            line(5, 60, 40, 60);
            line(0, 60, 40, 0);
            line(0, 5, 35, 5);
            line(35, 0, 0, 60);
        break;    
        case '!':
            line(20, 30, 20, 0);
            ellipse(20, 55, 10, 10);
        break;    
        case '.':
            ellipse(20, 55, 10, 10);
        break;    
        case ',':
            line(30, 50, 20, 60);
        break;    
        case '`':
            line(20, 0, 30, 10);
        break;    
        case '?':
            arc(20, 20, 40, 40, -180, 90);
            arc(18, 22, 35, 35, -180, 90);
            ellipse(20, 55, 10, 10);
        break;    
         case '0':
            ellipse(20, 30, 40, 60);
            ellipse(15, 35, 30, 50);
            ellipse(17, 33, 35, 55);
        break;  
        case '1':
            line(20, 0, 20, 60);
            line(25, 0, 25, 30);
        break;    
        case '2':
            
            arc(10, 30, 60, 60, -90, 90);
            arc(7, 30, 55, 60, -90, 90);
            arc(5, 34, 50, 58, -90, 90);
            line(5, 63, 40, 63);
        
        break;  
        case '3':
            
            arc(10, 15, 60, 30, -90, 90);
            arc(10, 15, 55, 30, -90, 90);
            arc(10, 15, 50, 30, -90, 90);
            arc(10, 45, 60, 30, -90, 90);
            arc(10, 45, 55, 30, -90, 90);
            arc(10, 45, 50, 30, -90, 90);
            arc(8, 18, 50, 25, -90, 90);
            arc(8, 48, 60, 25, -90, 90);
            
        break;    
        case '4':
            line(0, 0, 0, 30);
            line(40, 0, 40, 60);
            line(35, 0, 35, 60);
            line(0, 30, 40, 30);
            line(20, 35, 40, 35);
        break;    
        case '5':
            line(0, 0, 0, 30);
            line(20, 5, 35, 5);  
            line(0, 0, 35, 0);
            line(0, 30, 10, 30);
            line(0, 60, 10, 60);
            
            arc(10, 45, 60, 30, -90, 90);
            arc(10, 45, 55, 30, -90, 90);
            arc(10, 45, 50,30, -90, 90);
        break;    
        case '6':
            ellipse(20, 45, 40, 30);
            ellipse(15, 47, 30, 25);
            ellipse(17, 46, 35, 22);
            arc(30, 40, 60, 80, 180, 300);
            arc(29, 40, 58, 74, 180, 300);
            arc(29, 40, 58, 70, 180, 300);
        break;    
        case '7':
            line(0, 0, 40, 0);
            line(40, 0, 40, 30);
            arc(20, 30, 40, 60, 0, 90);
            line(0, 5, 40, 5);
            line(35, 0, 35, 30);
            arc(18, 30, 35, 60, 0, 90);
        break;    
        case '8':
            ellipse(20, 45, 40, 30);
            ellipse(15, 47, 30, 25);
            ellipse(17, 46, 35, 22);
            ellipse(20, 15, 40, 30);
            ellipse(15, 17, 30, 25);
            ellipse(17, 16, 35, 22);
        break;    
        case '9':
            ellipse(20, 15, 40, 30);
            ellipse(15, 17, 30, 25);
            ellipse(17, 16, 35, 22);
            arc(20, 30, 40, 60, 0, 90);
            arc(18, 30, 35, 60, 0, 90);
            line(40, 30, 40, 15);
            
        break;    
         case '>':
            line(0, 10, 40, 30);
            line(40, 30, 0, 50);
            line(0, 15, 35, 33);
        break;    
    }
    noStroke();
    popMatrix();
}; 
var Text = function (x, y, Size, TXT, col) {
    var Txt = TXT.split("");
    for (var i = 0; i < TXT.length; i++) {
       drawtext(x + i * 20 * Size, y, Size, TXT[i], col);
        noStroke();
    }
};
var Sign = function(x, y, msg) {
    noStroke();
    fill(0, 0, 0);
    rect(x+blockSize/2-blockSize/5, y, (blockSize/5)*2, blockSize);
    fill(143, 91, 0);
    rect(x, y, blockSize, blockSize/4, blockSize/5);
    fill(150, 90, 0);
    rect(x, y+blockSize/10+blockSize/10+blockSize/10, blockSize, blockSize/10, blockSize/5);
    fill(173, 130, 0);
    rect(x, y+blockSize/10, blockSize, blockSize/10);
    fill(138, 121, 14);
    rect(x, y+blockSize/10+blockSize/10, blockSize, blockSize/4);
    fill(107, 91, 0);
    rect(x, y+blockSize/10+blockSize/10+blockSize/10, blockSize, blockSize/4);
    
    if(player1[0].x +player1[0].w> x && player1[0].x < x+blockSize && player1[0].y + player1[0].h > y && player1[0].y < y + blockSize) {
        
        fill(255, 255, 255);
        textFont(createFont('san serif'));
        textSize(30);
        Text(-translateX +48, 80, 0.8, msg, 1);
        Text(-translateX +50, 80, 0.8, msg, 2);
    }   
};    
var checkIn = function(x, y, w, h, X, Y, W, H) {
    if(x + w > X && x < X + W && y + h > Y && y < Y + H) {
        return true;  
    }
};  

//buttons{
var button = function(x, y, w, h, pageTo) {
    if(mouseX > x && mouseX < x+w && mouseY > y && mouseY < y+ h) {
        fill(168, 168, 168);
        if(click) {
            page = pageTo;  
            
        }    
        
    }    else {
        fill(122, 122, 122);
    }    
    noStroke();
    rect(x, y, w, h, 10);
            
    fill(97, 97, 97);
    noStroke();
    ellipse(x+7, y+7, 5, 5);
    ellipse(x+w-7, y+h-7, 5, 5);
    ellipse(x+7, y+h-7, 5, 5);
    ellipse(x+w-7, y+7, 5, 5);
    
};    
var printlnButton = function(x, y, w, h, printLn) {
    fill(122, 122, 122);

    if(mouseX > x && mouseX < x+w && mouseY > y && mouseY < y+ h) {
        
        fill(168, 168, 168);
        if(click) {
            println(printLn);  
        }   
    }    
   noStroke();
    rect(x, y, w, h, 10);
            
    fill(97, 97, 97);
    noStroke();
    ellipse(x+7, y+7, 5, 5);
    ellipse(x+w-7, y+h-7, 5, 5);
    ellipse(x+7, y+h-7, 5, 5);
    ellipse(x+w-7, y+7, 5, 5);
    
};
var pauseButton = function() {
    stroke(0, 0, 0);
    strokeWeight(5);
    if(mouseX >= 425 && mouseY <= 50) {
        fill(107, 107, 107);
        if(mouseIsPressed) {
            fill(186, 186, 186);
        }    
        if(click) {
            page = 'pause';   
        }    
    } else {
        fill(87, 87, 87);
    }    
    
    quad(425, -2, 450, 50, 602, 50, 602, -2);
    
    fill(0, 0, 0);
    Text(455, 10, 1.5, 'pause', 1);
};    
var playButton = function() {
    stroke(0, 0, 0);
    strokeWeight(5);
    if(mouseX >= 400 && mouseY <= 50) {
        fill(107, 107, 107);
        if(mouseIsPressed) {
            fill(186, 186, 186);
        }    
        if(click) {
            page = 'game';   
        }    
    } else {
        fill(87, 87, 87);
    }    
    
    quad(400, -2, 425, 50, 602, 50, 602, -2);
    
    fill(0, 0, 0);
    Text(460, 10, 1.5, 'play', 1);
}; 
var backButton = function() {
    stroke(0, 0, 0);
    strokeWeight(5);
    if(mouseX <= 200 && mouseY <= 50) {
        fill(107, 107, 107);
        if(mouseIsPressed) {
            fill(186, 186, 186);
        }    
        if(click) {
            if(gamePage === -1) {
                gamePage = 2;  
            } else if(gamePage === -2) {
                gamePage = 1;   
            }    else {
             gamePage --;    
            }    
        }    
    } else {
        fill(87, 87, 87);
    }    
    
    quad(0, -2, 0, 50, 150, 50, 175, -2);
    
    fill(0, 0, 0);
    Text(10, 10, 1.5, 'back', 1);
};    
var levelPickerButton = function() {
    stroke(0, 0, 0);
    strokeWeight(5);
    if(mouseX >= 200 && mouseX <= 400&& mouseY <= 50) {
        fill(107, 107, 107);
        if(mouseIsPressed) {
            fill(186, 186, 186);
        }    
        if(click) {
            page = 'levelPicker';   
        }    
    } else {
        fill(87, 87, 87);
    }    
    
    quad(200, -2, 225, 50, 375, 50, 400, -2);
    
    fill(0, 0, 0);
    Text(250, 10, 1.5, 'menu', 1);
};    
var mcb/*multiple choice button*/ = function(x, y, w, h, pageTo) {
    if(page === 'levelPicker') {
        if(mouseX+levelPickerScroll>x && mouseY > y && mouseX+levelPickerScroll < x+w && mouseY < y+h) {
            fill(168, 168, 168);
            if(click) {
                page = 'game';
                gamePage = pageTo;
                blocks = [];
                enemies = [];
                sprites = [];
                archers = [];
                wizards = [];
                bosses = [];
                arrows = [];
                knives = [];
                bolts = [];
                wizards = [];
                fireBalls = [];
                if(gamePage >= unlockedLevels) {
                    unlockedLevels = gamePage;
                }
            }    
        }    else {
            fill(122, 122, 122);
                    
        }    
    }   else {
          if(mouseX>x && mouseY > y && mouseX < x+w && mouseY < y+h) {
            fill(168, 168, 168);
            if(click) {
                page = 'game';
                gamePage = pageTo;
                blocks = [];
                enemies = [];
                bosses = [];
                sprites = [];
                archers = [];
                arrows = [];
                knives = [];
                bolts = [];
                wizards = [];
                fireBalls = [];
                if(unlockedLevels <= gamePage ) {
                    unlockedLevels = gamePage;
                }
                player1[0].spawnLocation = 1;
            }    
        }    else {
            fill(122, 122, 122);
                    
        } 
    }    
    noStroke();
    rect(x, y, w, h, 10);
            
    fill(97, 97, 97);
    noStroke();
    ellipse(x+7, y+7, 5, 5);
    ellipse(x+w-7, y+h-7, 5, 5);
    ellipse(x+7, y+h-7, 5, 5);
    ellipse(x+w-7, y+7, 5, 5);
    
};    
var tutorialButton = function(x, y, w, h) {
     if(mouseX>x && mouseY > y && mouseX < x+w && mouseY < y+h) {
        fill(168, 168, 168);
        if(click) {
            tutorialPage ++;
            level =0;
            setLevel();
        }    
    }    else {
        fill(122, 122, 122);
                    
    }  
    noStroke();
    rect(x, y, w, h, 10);
            
    fill(97, 97, 97);
    noStroke();
    ellipse(x+7, y+7, 5, 5);
    ellipse(x+w-7, y+h-7, 5, 5);
    ellipse(x+7, y+h-7, 5, 5);
    ellipse(x+w-7, y+7, 5, 5);
};  
var storyButton = function(type, x, y, w, h) {
    switch(type) {
        case 'forward':
           
            if(mouseX>x && mouseY > y && mouseX < x+w && mouseY < y+h) {
                 fill(168, 168, 168);
                if(click) {
                    storyPage ++;   
                }    
            }    else {
                fill(122, 122, 122);
                
               
            }    
            
            noStroke();
            rect(x, y, w, h, 10);
            
            Text(x+w/7, y+h/3.5, w/100, 'next', 1);
            
            fill(97, 97, 97);
            noStroke();
            ellipse(x+7, y+7, 5, 5);
            ellipse(x+w-7, y+h-7, 5, 5);
            ellipse(x+7, y+h-7, 5, 5);
            ellipse(x+w-7, y+7, 5, 5);
        break;    
      case 'backward':
           
            if(mouseX>x && mouseY > y && mouseX < x+w && mouseY < y+h) {
                 fill(168, 168, 168);
                if(click) {
                    storyPage --;   
                }    
            }    else {
                fill(122, 122, 122);
                
               
            }    
            
            noStroke();
            rect(x, y, w, h, 10);
            
            Text(x+w/7, y+h/3.5, w/100, 'back', 1);
            
            fill(97, 97, 97);
            noStroke();
            ellipse(x+7, y+7, 5, 5);
            ellipse(x+w-7, y+h-7, 5, 5);
            ellipse(x+7, y+h-7, 5, 5);
            ellipse(x+w-7, y+7, 5, 5);
        break; 
        case 'skip':
            if(mouseX>x && mouseY > y && mouseX < x+w && mouseY < y+h) {
                 fill(168, 168, 168);
                if(click) {
                    storyPage = 10;
                }    
            }    else {
                fill(122, 122, 122);
                
               
            }    
            
            noStroke();
            rect(x, y, w, h, 10);
            
            Text(x+w/7, y+h/3.5, w/100, 'skip', 1);
            
            fill(97, 97, 97);
            noStroke();
            ellipse(x+7, y+7, 5, 5);
            ellipse(x+w-7, y+h-7, 5, 5);
            ellipse(x+7, y+h-7, 5, 5);
            ellipse(x+w-7, y+7, 5, 5);  
            
            
        break;
        
    }    
    
};    
//}

var healthBonus = function(x, y) {
    this.x = x;
    this.y = y;
    this.alive = true;
};   
healthBonus.prototype.draw = function() {
    noStroke();
    fill(0, 115, 255);
    ellipse(this.x+blockSize/2, this.y+blockSize/2, blockSize/1.5, blockSize/1.5);
    
};
healthBonus.prototype.collide = function() {
    if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, blockSize, blockSize)) {
        player1[0].health = 100;
        player1[0].oxygen = 100;
        this.alive = false;
    }    
};    
healthBonus.prototype.run = function() {
    if(this.alive) {
        this.draw();
        this.collide();
    }
};    

/*var Coin = function(x, y) {
    this.x = x;
    this.y = y;
    this.alive = true;
};   
Coin.prototype.draw = function() {
    noStroke();
    fill(255, 216, 41);
    ellipse(this.x+blockSize/2, this.y+blockSize/2, blockSize/1.5, blockSize/1.5);
    
};
Coin.prototype.collide = function() {
    if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, blockSize, blockSize)) {
        gold ++;
        this.alive = false;
    }    
};    
Coin.prototype.run = function() {
    if(this.alive) {
        this.draw();
        this.collide();
    }
};  */  

var Bolt = function(x, y) {
    this.x = x;
    this.y = y;
    this.grav = 0;
    
    
   this.rot = atan2(mouseY-translateY - this.y,mouseX-translateX - this.x);
   this.ydir = sin(this.rot)*30;
    this.xdir = cos(this.rot)*30;
   
    this.alive = true;
};    
Bolt.prototype.draw = function() {
    
    pushMatrix();
    translate(this.x, this.y);
    
    rotate(this.rot);
     noStroke();
     fill(110, 92, 0);
     rect(-blockSize/2, -blockSize/40, blockSize, blockSize/20);
     fill(135, 135, 135);
     triangle(blockSize/2, blockSize/20,blockSize/2, -blockSize/20, blockSize/10+blockSize/2, 0);
     fill(122, 0, 0);
     rect(-blockSize/2, -blockSize/20, blockSize/10, blockSize/10);
     popMatrix();
};
Bolt.prototype.applyPhysics = function() {
    
    this.grav += 0.01;
    this.ydir += this.grav;
    
    for (var i = 0; i < 5; i ++) {
    this.x += 0.2* this.xdir;
    this.y += 0.2 * this.ydir;
    }
    
    for(var i in blocks) {
        if(dist(this.x, this.y, blocks[i].x + blocks[i].w/2, blocks[i].y + blocks[i].h / 3) <= blocks[i].w/1.5) {
            this.alive = false;   
        }    
    }   
    for(var i in enemies) {
        if(dist(this.x, this.y, enemies[i].x + enemies[i].w/2, enemies[i].y + enemies[i].h / 3) <= enemies[i].w) {
            this.alive = false;   
            enemies[i].health -= blockSize;
        }    
    } 
     for(var i in archers) {
        if(dist(this.x, this.y, archers[i].x + archers[i].w/2, archers[i].y + archers[i].h / 3) <= archers[0].w) {
            this.alive = false;   
            archers[i].health -= blockSize;
        }    
    } 
      for(var i in wizards) {
        if((dist(this.x, this.y, wizards[i].x + wizards[i].w/2, wizards[i].y + wizards[i].h / 3) <= wizards[i].w)) {
            this.alive = false;   
            wizards[i].health -= blockSize;
        }  
      }    
        for(var i in bosses) {
        if(dist(this.x, this.y, bosses[i].x + bosses[i].w/2, bosses[i].y + bosses[i].h / 3) <= bosses[0].w) {
            this.alive = false;   
           bosses[i].health -= blockSize;
        }   
    }
    
    
};    
Bolt.prototype.run = function() {
    if(this.alive){
      this.draw();
      this.applyPhysics();
    }
};    

var Player1 = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    
   this.w = w;
   this.h = h;
    this.grav = 0;
   this.vel = 0;
    this.onGround = false;
    
    this.direction = 'none';
    this.health = 100;
    this.oxygen = 100;
    
    this.weapon = 'sword';
    
    this.armorLevel = 1;
    this.swordLevel = 1;
    
    this.spawnLocation = 1;
    
     this.bowDraw = 0;
     
    this.canDie = true;
    this.hasPearl = false;
};    
Player1.prototype.draw = function() {
    //quiver
     noStroke();
     pushMatrix();
     translate(this.x, this.y-this.h/20);
     rotate(-20);
     fill(0, 0, 0);
     rect(this.w/20, -this.h/10, this.w/40, this.h/3);
     rect(this.w/20+this.w/20, -this.h/10, this.w/40, this.h/3);
     rect(this.w/20+this.w/20+this.w/20, -this.h/10, this.w/40, this.h/3);
     fill(117, 117, 117);
     rect(0, 0, this.w/5, this.h/2);
     popMatrix();
         if(this.direction === 'left') {
            noStroke();
            //farther arm
            noFill();
            
            pushMatrix();
            translate(this.x+ this.w/8, this.y+this.h/10);
           if(this.weapon === 'sword') {
                 rotate(-cos(frameCount*15)*this.vel*this.w/4);
           } else if(this.weapon === 'bow'){
               
                rotate(90); 
           } 
            stroke(120,0, 0);
            strokeWeight(this.w / 6);
            line(0, 0, 0, this.h/5); 
            
            translate(0, this.h/5);
           if(this.weapon === 'sword') {
                rotate(-cos(frameCount*15)*this.vel*this.w/4+30);
           } else if(this.weapon === 'bow'){
                rotate(0);   
           } 
            
            stroke(120, 0, 0);
            strokeWeight(this.w / 6);
            line(0, 0, 0, this.h/6); 
            noStroke();
            fill(140, 140, 0);
            arc(0, this.h/6, this.w/6, this.h/6, 0, 180);
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            
             point(-this.w/20, this.h/5);
             noStroke();
             
             fill(140, 140, 0);
            noStroke();
            rect(-this.w/10, 0, this.w/6, this.h/10);
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            point(-this.w/20, this.h/5.5);
            noStroke();
             //sword
             if(this.weapon === 'sword') {
                 translate(0,-this.h/7);
                
                noStroke();
                fill(100, 100, 100);
                rect(-this.w, this.h/3, this.w/1.2, this.h/20, this.w);
                triangle(-this.w, this.h/3, -this.w, this.h/3 + this.h/20, -this.w - this.w/5, this.h/3 + this.h/40);
                
                fill(171, 171, 171);
                rect(-this.w, this.h/3, this.w/1.2, this.h/40);
                triangle(-this.w, this.h/3, -this.w, this.h/3 + this.h/40, -this.w - this.w/5, this.h/3 + this.h/40);
                
                fill(0);
                rect(-this.w + this.w/1.2, this.h/3 - this.h/20, this.w/10, this.h/6);
             } else if(this.weapon === 'bow') {
                 
                    //bow
                   translate(0, -this.h/5);  
                   
                    noFill();
                    stroke(0);
                    strokeWeight(1);
                 arc(0, this.h/3-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);
                    arc(0, this.h/3+1-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);   
                    arc(0, this.h/3+2-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);
                    line(-this.w+this.w/2/2, this.h/3-this.bowDraw/2, 0, -this.bowDraw+this.w/2-this.w/20);
                    line(this.w-this.w/2/2, this.h/3-this.bowDraw/2, 0, -this.bowDraw+this.w/2-this.w/20);
                 
             } 
            popMatrix();    
            noStroke();
            
            //legs{
            strokeWeight(this.w/4.5);
            pushMatrix();
    
            translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
            rotate(cos(frameCount*15)*this.vel*this.w/6);        
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/3);
            stroke(140, 140, 0);
            line(0, this.h/3, 0, this.h/2);
            fill(140, 140, 0);
            noStroke();
            quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
            //foot
            noStroke();
            fill(140, 140, 0);
            arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
            popMatrix();
            
            strokeWeight(this.w/4.2);
            pushMatrix();
    
            translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
            rotate(-cos(frameCount*15)*this.vel*this.w/6 );                   
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/3);
            stroke(140, 140, 0);
            line(0, this.h/3, 0, this.h/2);
            fill(140, 140, 0);
            noStroke();
            quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
            
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
            //foot
            noStroke();
            fill(140, 140, 0);
            arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
            popMatrix();
            noStroke();
            //}
            
            
            //torso
            fill(140, 140, 0);
            quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
            
            //belt
            noStroke();
            fill(122, 102, 0);
            rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
            
            
            //closer arm
            noFill();
            stroke(120,0, 0);
            pushMatrix();
            translate(this.x+ this.w-this.w/8, this.y+this.h/10);
            rotate(cos(frameCount*15)*this.vel*this.w/4);
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/5); 
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            point(-this.w/20, this.h/5.5);
            
             
             translate(0, this.h/5);
            
            rotate(cos(frameCount*15)*this.vel*this.w/4+30);
            
            
            strokeWeight(this.w / 5);
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/5);
            
            fill(140, 140, 0);
            noStroke();
            rect(-this.w/8, 0, this.w/4, this.h/10);
            arc(0, this.w/3, this.w/4, this.h/5, 0, 180);
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
             point(-this.w/20, this.h/5);
            popMatrix();    
            noStroke();
            
            
            //closer shoulder
            fill(196, 196, 0);
            ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2, this.h/8);
            
             
            
            //farther shoulder
            fill(196, 196, 0);
            ellipse(this.x+this.w/10, this.y+this.h/10, this.w/2.5, this.h/10);
            
            //head
            noStroke();
            fill(199, 189, 0);
            ellipse(this.x + this.w/2 - this.w/20, this.y- this.h/20, this.w/3, this.h/6);
   
            fill(140, 140, 0);
            arc(this.x + this.w/2- this.w/20, this.y - this.h/12, this.w/2, this.h/2.5, 180, 360); 
           
            rect(this.x+this.w/2, this.y-this.h/12, this.w/5.5, this.h/10);
            rect(this.x + this.w/2- this.w/20 - this.w/5, this.y-this.h/25, this.w/2.5, this.h/10);
            fill(0, 0, 0);
            ellipse(this.x+this.w/2 - this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
      } else if(this.direction === 'right') {
            noStroke();
            //farther arm{
            noFill();
            stroke(120,0, 0);
            pushMatrix();
            translate(this.x+ this.w - this.w/8, this.y+this.h/10);
           if(this.weapon === 'sword') {
                rotate(-cos(frameCount*15)*this.vel*this.w/4);
           } else if(this.weapon === 'bow') {
                rotate(-90);    
           } 
            strokeWeight(this.w / 6);
            line(0, 0, 0, this.h/5); 
            translate(0, this.h/5);
           if(this.weapon === 'sword') {
                rotate(-cos(frameCount*15)*this.vel*this.w/4-30);
           } else if(this.weapon === 'bow') {
               rotate(0);
           } 
               
            strokeWeight(this.w / 6);
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/5); 
            fill(140, 140, 0);
            noStroke();
            rect(-this.w/10, 0, this.w/6, this.h/10);
            noStroke();
            fill(140, 140, 0);
            arc(0, this.h/6, this.w/6, this.h/6, 0, 180);
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            point(-this.w/20, 0);
             point(-this.w/20, this.h/5);
             //sword
             if(this.weapon === 'sword') {
                 translate(0, -this.h/6);
                noStroke();
                fill(100, 100, 100);
                rect(this.w - this.w/1.2, this.h/3, this.w/1.2, this.h/20, this.w);
                triangle(this.w, this.h/3, this.w, this.h/3 + this.h/20, this.w + this.w/5, this.h/3 + this.h/40);
                fill(171, 171, 171);
                rect(this.w - this.w/1.2, this.h/3, this.w/1.2, this.h/40, this.w);
                triangle(this.w, this.h/3, this.w, this.h/3 + this.h/40, this.w + this.w/5, this.h/3 + this.h/40);
                
                fill(0);
                rect(this.w- this.w/1.2, this.h/3 - this.h/20, this.w/10, this.h/6);
             } else if(this.weapon === 'bow') {
                 
              //bow
                     
                   translate(0, -this.h/5);  
                    noFill();
                    stroke(0);
                    strokeWeight(1);
                 arc(0, this.h/3-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);
                    arc(0, this.h/3+1-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);   
                    arc(0, this.h/3+2-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);
                    line(-this.w+this.w/2/2, this.h/3-this.bowDraw/2, 0, -this.bowDraw+this.w/2-this.w/20);
                    line(this.w-this.w/2/2, this.h/3-this.bowDraw/2, 0, -this.bowDraw+this.w/2-this.w/20);
                 
                
                
                 
             } 
             
             
            popMatrix();    
            noStroke();
            //}
            
            //legs{
            
            
            
           
            
            strokeWeight(this.w/4.2);
            pushMatrix();
    
            translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
            rotate(-cos(frameCount*15)*this.vel*this.w/6 );        
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/3);
            stroke(140, 140, 0);
            line(0, this.h/3, 0, this.h/2);
            fill(140, 140, 0);
            noStroke();
            quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
            
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
            //foot
            noStroke();
            fill(140, 140, 0);
            arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
            popMatrix();
            
            
             strokeWeight(this.w/4.5);
            pushMatrix();
    
            translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
            rotate(cos(frameCount*15)*this.vel*this.w/6);        
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/3);
            stroke(140, 140, 0);
            line(0, this.h/3, 0, this.h/2);
            fill(140, 140, 0);
            noStroke();
            quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
            //foot
            noStroke();
            fill(140, 140, 0);
            arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
            popMatrix();
            noStroke();
            //}
            
            
            //torso
            fill(140, 140, 0);
            quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
            
            //belt
            noStroke();
            fill(122, 102, 0);
            rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
            
           
            //closer arm
            noFill();
            stroke(120,0, 0);
            pushMatrix();
            translate(this.x+ this.w/8, this.y+this.h/10);
            rotate(cos(frameCount*15)*this.vel*this.w/4);
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/5); 
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            point(-this.w/20, this.h/5.5);
            
             
             translate(0, this.h/5);
            
            rotate(cos(frameCount*15)*this.vel*this.w/4-30);
            
            
            strokeWeight(this.w / 5);
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/5);
            
            fill(140, 140, 0);
            noStroke();
            rect(-this.w/8, 0, this.w/4, this.h/10);
            arc(0, this.w/3, this.w/4, this.h/5, 0, 180);
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
             point(-this.w/20, this.h/5);
            popMatrix();    
            noStroke();
            
            
            //farther shoulder
            fill(196, 196, 0);
            ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/10);
            
             
            
            //closer shoulder
            fill(196, 196, 0);
            ellipse(this.x+this.w/8, this.y+this.h/10, this.w/2, this.h/8);
            
            //head
            noStroke();
            fill(199, 189, 0);
            ellipse(this.x + this.w/2 + this.w/20, this.y- this.h/20, this.w/3, this.h/6);
            
            fill(140, 140, 0);
            arc(this.x + this.w/2+ this.w/20, this.y - this.h/12, this.w/2, this.h/2.5, 180, 360); 
           
            rect(this.x+this.w/2-this.w/5.5, this.y-this.h/12, this.w/5.5, this.h/10);
            rect(this.x + this.w/2 - this.w/7, this.y-this.h/25, this.w/2.5, this.h/10);
            
            noStroke();
            fill(0);
          ellipse(this.x+this.w/2 + this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          
          
      } else if(this.direction === 'none') {
            noStroke();
            
            //legs{
            
            
            
            strokeWeight(this.w/4.5);
            pushMatrix();
    
            translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                   
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/3);
            stroke(140, 140, 0);
            line(0, this.h/3, 0, this.h/2);
            fill(140, 140, 0);
            noStroke();
            quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
            //foot
            noStroke();
            fill(140, 140, 0);
            arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
            popMatrix();
            
            strokeWeight(this.w/4.2);
            pushMatrix();
    
           
    
            translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                   
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/3);
            stroke(140, 140, 0);
            line(0, this.h/3, 0, this.h/2);
            fill(140, 140, 0);
            noStroke();
            quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
            //foot
            noStroke();
            fill(140, 140, 0);
            arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
            popMatrix();
            
            strokeWeight(this.w/4.2);
            
            //}
            
            
            //torso
            fill(140, 140, 0);
            quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
            
            //belt
            noStroke();
            fill(122, 102, 0);
            rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
            
            
            //arms
            noFill();
            stroke(120,0, 0);
            pushMatrix();
            translate(this.x+ this.w-this.w/8, this.y+this.h/10);
            
            
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/2.5); 
            fill(140, 140, 0);
            noStroke();
            rect(-this.w/8, this.w/3, this.w/4, this.h/10);
            arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            point(-this.w/20, this.h/5.5);
             point(-this.w/20, this.h/2.6);
            popMatrix(); 
            
            stroke(120, 0, 0);
            pushMatrix();
            translate(this.x+ this.w/8, this.y+this.h/10);
            
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/2.5); 
            fill(140, 140, 0);
            noStroke();
            rect(-this.w/8, this.w/3, this.w/4, this.h/10);
            arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            point(-this.w/20, this.h/5.5);
             point(-this.w/20, this.h/2.6);
             popMatrix();
            noStroke();
            
            
            //shoulders
            fill(196, 196, 0);
            ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
            ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
             
            
            
            
            //head
            noStroke();
            fill(199, 189, 0);
            ellipse(this.x + this.w/2, this.y- this.h/20, this.w/3, this.h/6);
            
            fill(140, 140, 0);
            arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
           
            noFill();
            stroke(140, 140, 0);
            strokeWeight(this.w/13);
            rect(this.x + this.w/2- this.w/6, this.y-this.h/12, this.w/2.8, this.h/13);
            noStroke();
            fill(140, 140, 0);
            rect(this.x + this.w/2 - this.w/5, this.y, this.w/2.5, this.h/17);
            
            fill(0);
            ellipse(this.x+this.w/2 - this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
            ellipse(this.x+this.w/2 + this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
            
           
      } if (this.direction === 'ladder') { 
          noStroke();
            
            //legs{
            
            
            
            strokeWeight(this.w/4.5);
            pushMatrix();
    
            translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                   
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/3);
            stroke(140, 140, 0);
            line(0, this.h/3, 0, this.h/2);
            fill(140, 140, 0);
            noStroke();
            quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
            //foot
            noStroke();
            fill(140, 140, 0);
            arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
            popMatrix();
            
            strokeWeight(this.w/4.2);
            pushMatrix();
    
           
    
            translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                   
            stroke(120, 0, 0);
            line(0, 0, 0, this.h/3);
            stroke(140, 140, 0);
            line(0, this.h/3, 0, this.h/2);
            fill(140, 140, 0);
            noStroke();
            quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
            
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
            //foot
            noStroke();
            fill(140, 140, 0);
            arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
            popMatrix();
            
            strokeWeight(this.w/4.2);
          
            //}
            
            
            //torso
            fill(140, 140, 0);
            quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
            
            //belt
            noStroke();
            fill(122, 102, 0);
            rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
            
            
            //arms
            noFill();
            stroke(120,0, 0);
            pushMatrix();
            translate(this.x+ this.w-this.w/8, this.y+this.h/10);
            
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/2.5); 
            fill(140, 140, 0);
            noStroke();
            rect(-this.w/8, this.w/3, this.w/4, this.h/10);
            arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            point(-this.w/20, this.h/5.5);
             point(-this.w/20, this.h/2.6);
            popMatrix(); 
            
            stroke(120, 0, 0);
            pushMatrix();
            translate(this.x+ this.w/8, this.y+this.h/10);
            
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/2.5); 
            fill(140, 140, 0);
            noStroke();
            rect(-this.w/8, this.w/3, this.w/4, this.h/10);
            arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
            stroke(180, 180, 180);
            strokeWeight(this.w/15);
            point(-this.w/20, this.h/5.5);
             point(-this.w/20, this.h/2.6);
             popMatrix();
            noStroke();
            
            
            //shoulders
            fill(196, 196, 0);
            ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
            ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
             
            
            
            
            //head
            noStroke();
           
            
            fill(140, 140, 0);
            arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
           
           
            noStroke();
            fill(140, 140, 0);
            rect(this.x + this.w/2 - this.w/5, this.y-this.h/10, this.w/2.5, this.h/17+this.h/10);
           
            //quiver
     noStroke();
     pushMatrix();
     translate(this.x, this.y-this.h/20);
     rotate(-20);
     fill(0, 0, 0);
     rect(this.w/20, -this.h/10, this.w/40, this.h/3);
     rect(this.w/20+this.w/20, -this.h/10, this.w/40, this.h/3);
     rect(this.w/20+this.w/20+this.w/20, -this.h/10, this.w/40, this.h/3);
     fill(117, 117, 117);
     rect(0, 0, this.w/5, this.h/2);
     popMatrix();
      } 
      
    
    fill(166, 166, 166);
    rect(this.x, this.y - this.h/2+this.h/10, this.w, this.h/10);
    fill(0, 255, 0);
    rect(this.x, this.y - this.h/2+this.h/10, this.health/this.w*7.1, this.h/10);
    
  
     fill(166, 166, 166);
    rect(this.x, this.y - this.h/2-this.h/20, this.w, this.h/10);
    fill(56, 83, 255);
    rect(this.x, this.y - this.h/2-this.h/20, this.oxygen/this.w*7.1, this.h/10);
    
    
    
    
    this.x += round(this.vel);
    this.y += this.grav;
    this.vel = constrain(this.vel, -5, 5);
    
    this.grav +=0.8;
    
    if(keys[RIGHT] || keys[68]) {
        this.vel ++;   
        this.direction = 'right';
    }    
     if(keys[LEFT] || keys[65]) {
        this.vel --;
        this.direction = 'left';
    }
    if(keys[UP] && this.onGround === true|| keys[87] && this.onGround === true) {
         this.grav = -10;  
         this.onGround = false;
    }    
    
    this.onGround = false;
  
  if(this.vel > -1 && this.vel < 1) {
        this.direction = 'none';   
  } 
    
    // Implements friction
    if(this.vel > 0) {
        this.vel -= 0.3;
    } else if(this.vel < 0) {
        this.vel += 0.3;
    }   
    
   
    //advance level
    if(this.x + this.w >=  levelW -1) {
        gamePage ++;   
        level ++;
        setLevel();
        
    }    
    
    if(this.health <= 1 &&this.canDie || this.oxygen <= 1 && this.canDie) {
       if(page === 'game') {
             deaths ++;   
       }
       
        translateY =0;  
      translateX = 0;
       this.x = p1SpawnX;
        this.y = p1SpawnY;
          
       this.vel = 0;
        this.grav = 0;
        this.health = 100;
        this.oxygen = 100;
    }    
    
    //bow stuff
    if(this.weapon === 'bow') {
          this.bowDraw ++;   
      }  
     if(this.bowDraw >=blockSize/1.5) {
        this.bowDraw = 0;  
    } 
    if(this.bowDraw >=blockSize/1.6) {
       bolts.push(new Bolt(this.x+this.w/2, this.y+this.h/20));
       this.bowDraw = 0;
    } 
    if(mouseIsPressed) {
        if(mouseButton === RIGHT) {
            this.weapon = 'bow';    
        }  else if(mouseButton === LEFT){
            this.weapon = 'sword';   
        }    
    }  
      
};
var player1 = [    
    new Player1(p1SpawnX,p1SpawnY, blockSize - blockSize/10, blockSize*2-blockSize/10-blockSize/10),
    
    
];

//shortcuts for game{
var resetPlayer1 = function() {
    player1[0].x = p1SpawnX;
    player1[0].y = p1SpawnY;
   
    player1[0].vel = 0;
    player1[0].grav = 0;
    player1[0].health = 100;
    
};    
var resetLevel = function() {
    resetPlayer1();   
                
  
    player1[0].vel = 0;
    player1[0].grav = 0;
    player1[0].health = 100;
};   
setLevel = function() {
    resetPlayer1();   
                
    blocks = [];
    sprites = [];
    arrows = [];
    knives = [];
    archers = [];
    wizards = [];
    fireBalls = [];
    enemies = [];
    bosses = [];
    bolts = [];
    healthBonuses = [];
    coins = [];
    translateX = 0;
    translateY = 0;
    
    drawLevel();
};    
var runObjects = function() {
    runObject(sprites);
    runObject(blocks);
    runObject(enemies);
    runObject(bosses);
    runObject(archers);
    runObject(wizards);
    runObject(fireBalls);
    runObject(arrows);
    runObject(knives);
    runObject(bolts);
    runObject(healthBonuses);
    runObject(coins);
               
};    
//}

var Enemy = function( sx, sy, w, h) {
    this.sx = sx;
    this.sy = sy;
    this.x = this.sx;
    this.y = this.sy;
    
   this.w = w;
   this.h = h;
    this.grav = 0;
   this.vel = 0;
    this.onGround = false;
    this.inRange = false;
    
    this.direction = 'left';
    this.health = 100;
    this.oxygen = 100;
    this.onLadder = false;
    
    this.alive = true;
    this.canJump= true;
    this.jump = -blockSize/3;
};   
Enemy.freed = [];
Enemy.prototype.draw = function() {
        //graphics
        if(this.direction === 'left') {
                noStroke();
                //farther arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                if(!this.inRange) {
                rotate(-cos(frameCount*15)*this.vel*this.w/4);
                } else if(this.inRange) { 
                        rotate(-cos(frameCount*18)*this.vel*this.w/4);
                }
                strokeWeight(this.w / 6);
                line(0, 0, 0, this.h/2.6); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/10, this.w/3, this.w/6, this.h/10);
                arc(0, this.h/2.8, this.w/6, this.h/6, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 //sword
                 if(this.inRange) {
                     
                    noStroke();
                    fill(140, 120, 0);
                    rect(-this.w, this.h/3, this.w/1.2, this.h/20, this.w);
                    triangle(-this.w, this.h/3, -this.w, this.h/3 + this.h/20, -this.w - this.w/5, this.h/3 + this.h/40);
                    
                    fill(0);
                    rect(-this.w + this.w/1.2, this.h/3 - this.h/20, this.w/10, this.h/6);
                 } 
                popMatrix();    
                noStroke();
                
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/6);        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
                translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
                rotate(-cos(frameCount*15)*this.vel*this.w/6 );        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                noStroke();
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //closer arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/4);
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix();    
                noStroke();
                
                
                //closer shoulder
                fill(51, 51, 51);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2, this.h/8);
                
                 
                
                //farther shoulder
                fill(48, 48, 48);
                ellipse(this.x+this.w/10, this.y+this.h/10, this.w/2.5, this.h/10);
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2 - this.w/20, this.y- this.h/20, this.w/3, this.h/6);
       
                fill(0, 0, 0);
                arc(this.x + this.w/2- this.w/20, this.y - this.h/12, this.w/2, this.h/2.5, 180, 360); 
               
                rect(this.x+this.w/2, this.y-this.h/12, this.w/5.5, this.h/10);
                rect(this.x + this.w/2- this.w/20 - this.w/5, this.y-this.h/25, this.w/2.5, this.h/10);
                fill(0, 0, 0);
                ellipse(this.x+this.w/2 - this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          } else if(this.direction === 'right') {
                noStroke();
                //farther arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w - this.w/8, this.y+this.h/10);
                if(!this.inRange) {
                rotate(-cos(frameCount*15)*this.vel*this.w/4);
                } else if(this.inRange) { 
                        rotate(-cos(frameCount*18)*this.vel*this.w/4);
                }
                strokeWeight(this.w / 6);
                line(0, 0, 0, this.h/2.6); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/10, this.w/3, this.w/6, this.h/10);
                arc(0, this.h/2.8, this.w/6, this.h/6, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 //sword
                 if(this.inRange) {
                     
                    noStroke();
                    fill(140, 120, 0);
                    rect(this.w - this.w/1.2, this.h/3, this.w/1.2, this.h/20, this.w);
                    triangle(this.w, this.h/3, this.w, this.h/3 + this.h/20, this.w + this.w/5, this.h/3 + this.h/40);
                    
                    fill(0);
                    rect(this.w- this.w/1.2, this.h/3 - this.h/20, this.w/10, this.h/6);
                 } 
                popMatrix();    
                noStroke();
                
                //legs{
                
                
                
               
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
                translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
                rotate(-cos(frameCount*8)*this.vel*this.w/6 );        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                
                 strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
                rotate(cos(frameCount*8)*this.vel*this.w/6);        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                noStroke();
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //closer arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/4);
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix();    
                noStroke();
                
                
                //farther shoulder
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/10);
                
                 
                
                //closer shoulder
                fill(50, 50, 50);
                ellipse(this.x+this.w/8, this.y+this.h/10, this.w/2, this.h/8);
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2 + this.w/20, this.y- this.h/20, this.w/3, this.h/6);
                
                fill(0, 0, 0);
                arc(this.x + this.w/2+ this.w/20, this.y - this.h/12, this.w/2, this.h/2.5, 180, 360); 
               
                rect(this.x+this.w/2-this.w/5.5, this.y-this.h/12, this.w/5.5, this.h/10);
                rect(this.x + this.w/2 - this.w/7, this.y-this.h/25, this.w/2.5, this.h/10);
                
                noStroke();
                fill(0);
              ellipse(this.x+this.w/2 + this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          } else if(this.direction === 'none') {
               
                noStroke();
                
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
               
        
                translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //arms
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix(); 
                
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 popMatrix();
                noStroke();
                
                
                //shoulders
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                 
                
                
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2, this.y- this.h/20, this.w/3, this.h/6);
                
                fill(0, 0, 0);
                arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
               
                noFill();
                stroke(0, 0, 0);
                strokeWeight(this.w/13);
                rect(this.x + this.w/2- this.w/6, this.y-this.h/12, this.w/2.8, this.h/13);
                noStroke();
                fill(0, 0, 0);
                rect(this.x + this.w/2 - this.w/5, this.y, this.w/2.5, this.h/17);
                
                fill(0);
                ellipse(this.x+this.w/2 - this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
                ellipse(this.x+this.w/2 + this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
          } 
        else if(this.direction === 'ladder') {
            noStroke();
                
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
             
        
                translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                
                //}
                
                
                 //arms
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix(); 
                
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 popMatrix();
                noStroke();
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
               
                
                
                //shoulders
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                 
                
                
                
                //head
                noStroke();
                
                
                fill(0, 0, 0);
                arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
               
                fill(0);
                stroke(0, 0, 0);
                strokeWeight(this.w/13);
                rect(this.x + this.w/2- this.w/6, this.y-this.h/12, this.w/3, this.h/13);
                noStroke();
                
            
        }  
         
     
        //health and oxygen bar
        fill(166, 166, 166);
        rect(this.x, this.y - this.h/2+this.h/10, this.w, this.h/10);
        fill(0, 255, 0);
        rect(this.x, this.y - this.h/2+this.h/10, this.health/this.w*7.1, this.h/10);
     
    fill(166, 166, 166);
    rect(this.x, this.y - this.h/2-this.h/20, this.w, this.h/10);
    fill(56, 83, 255);
    rect(this.x, this.y - this.h/2-this.h/20, this.oxygen/this.w*7.1, this.h/10);
    

        
    
};
Enemy.prototype.brain = function() {
    
    //on patrol{
    if(dist(this.x, this.y, player1[0].x, player1[0].y) >=width/3) {
        this.sword = false;
        
        for(var i in blocks) {
            if(checkIn(blocks[i].x, blocks[i].y, blocks[i].w, blocks[i].h, this.x - this.w/2, this.y, this.w+this.w/2+this.w/2, this.h)) {   
                
                
                 if(this.y +this.h> blocks[i].y + blocks[i].h / 5 && this.y < blocks[i].y + blocks[i].h - blocks[i].h/5) {
                    
                           if(this.direction === 'left' && this.vel <=0 && this.x > blocks[i].x + blocks[i].w/2) {
                               this.vel = 4;
                                this.direction = 'right';   
                                
                           } 
                            if(this.direction === 'right' && this.vel >=0 && this.x + this.w< blocks[i].x + blocks[i].w/2) {
                               this.vel = -4;
                                this.direction = 'left';   
                                
                           } 
               }
            }
        }
    
    } //}  
    //on pursuit{
    else {
    
    
    //player 1 attack
     if(dist(this.x, this.y, player1[0].x, player1[0].y) <=width/3) {
            
            
            
               //left and right and jump
               if(this.x>player1[0].x + player1[0].w) {
                    this.direction = 'left';   
               } 
                if(this.x + this.w < player1[0].x) {
                    this.direction = 'right';   
               } 
               if(player1[0].y + player1[0].h/2 <= this.y &&  this.onGround === true ) {
                this.grav = this.jump;  
                this.onGround = false;
                
                }
                //makes the enemy jump over walls
                if(this.y === player1[0].y && this.vel === 0) {
                    this.grav = this.jump;   
                    this.onGround = false;
                }    
                if(this.onGround && this.vel >=0 && player1[0].x <= this.x) {
                     this.grav = this.jump;   
                    this.onGround = false;
                }
                if(this.onGround && this.vel <=0 && player1[0].x >= this.x) {
                     this.grav = this.jump;   
                    this.onGround = false;
                }
               
                   
           
     }  
    
     
     
     
     
     //registers whether the enmy will chase the player or not
     if(dist(this.x, this.y, player1[0].x, player1[0].y) <= width/4) {
               this.inRange = true;
        }  
        
    
    }
     
     //}
    this.x += round(this.vel);
    this.y += this.grav;
    this.vel = constrain(this.vel, -4, 4);
    
    this.grav +=0.8;
    
    if(this.direction === 'right' && this.direction !== 'ladder') {
        this.vel ++;   
       
    }    
     if(this.direction === 'left' && this.direction !== 'ladder') {
        this.vel --;
        
    }
     
  
  if(this.vel > -1 && this.vel < 1) {
        this.direction = 'none';   
  } 
    
    // Implements friction
    if(this.vel > 0) {
        this.vel -= 0.3;
    } else if(this.vel < 0) {
        this.vel += 0.3;
    }   
    
};
Enemy.prototype.kill = function() {
    //enemy kills player
    if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, this.w, this.h)){
        player1[0].health -= player1[0].armorLevel*blockSize/8;
        
    } 
    
    
    //player kills enemy
    if(checkIn(player1[0].x - player1[0].w, player1[0].y, player1[0].w*3, player1[0].h, this.x, this.y, this.w, this.h) && player1[0].direction !== 'none' && player1[0].weapon === 'sword') {
        this.health -= player1[0].swordLevel*blockSize/5;
        
    }    
     
    
    if(this.health <= 0 || this.oxygen <= 0) {
        /*this.x = this.sx;
        this.y = this.sy;
        this.health = 100;
        this.vel = 0;
        this.grav = 0;
        */
        this.alive = false;
    }    
};    
Enemy.prototype.run = function() {
    if(this.alive) {
        this.draw();
        this.brain();
        this.kill();
    }
};    
Enemy.new = function(sx, sy, w, h) {
    var e;
    if (Enemy.freed.length > 0) {
        e = Enemy.freed.pop();
        e.init(sx, sy, w, h);
    } else {
        e = new Enemy(sx, sy, w, h);
    }
    return e;
};  

var Knife = function(x, y) {
    this.x = x;
    this.y = y;
    this.grav = 0;
    
     this.rot = atan2(player1[0].y - this.y,player1[0].x+player1[0].w/2 - this.x);
    this.ydir = sin(this.rot)*20;
    this.xdir = cos(this.rot)*20;
    
    this.alive = true;
    this.rotation = 0;
    
};    
Knife.prototype.draw = function() {
    
    pushMatrix();
    translate(this.x, this.y);
    
    rotate(this.rot);
    rotate(this.rotation);
     noStroke();
     fill(0, 0, 0);
     rect(-blockSize/10, -blockSize/40, blockSize/10, blockSize/20);
     fill(0, 0, 0);
     triangle(0, blockSize/15,0, -blockSize/15, blockSize/2, 0);
     fill(0, 0, 0);
     
     popMatrix();
};
Knife.prototype.applyPhysics = function() {
    this.rotation +=blockSize;
    this.grav += 0.02;
    this.ydir += this.grav;
    for (var i = 0; i <= 10; i ++) {
    this.x += 0.1* this.xdir;
    this.y += 0.1 * this.ydir;
    }
    
     for(var i in blocks) {
        if(dist(this.x, this.y, blocks[i].x + blocks[i].w/2, blocks[i].y + blocks[i].h / 3) <= blocks[i].w) {
            this.alive = false;   
        }    
    }    
    for(var i in enemies) {
        if(this.x -10>=enemies[i].x && this.x +10<= enemies[i].x + enemies[i].w&&this.y >=enemies[i].y && this.y <= enemies[i].y + enemies[i].h) {
            this.alive = false;   
            enemies[i].health -= blockSize;
        }    
    } 
    for(var i in wizards) {
        if(this.x -10>=wizards[i].x && this.x+10 <= wizards[i].x + wizards[i].w&&this.y >=wizards[i].y && this.y <= wizards[i].y + wizards[i].h) {
            this.alive = false;   
           wizards[i].health -= blockSize;
        }    
    } 
     for(var i in archers) {
        if(dist(this.x, this.y, archers[i].x + archers[i].w/2, archers[i].y + archers[i].h / 3) <= archers[0].w) {
            this.alive = false;   
            archers[i].health -= blockSize;
        }    
    } 
     for(var i in bosses) {
        if(this.x -10>=bosses[i].x && this.x+10 <= bosses[i].x + bosses[i].w&&this.y >=bosses[i].y && this.y <= bosses[i].y + bosses[i].h) {
            this.alive = false;   
           wizards[i].health -= blockSize;
        }    
    } 
    if(dist(this.x, this.y, player1[0].x + player1[0].w/2, player1[0].y + player1[0].h / 3) <= player1[0].w) {
            player1[0].health -= player1[0].armorLevel*blockSize*2;   
            this.alive = false;
    } 
    
};    
Knife.prototype.run = function() {
    if(this.alive){
      this.draw();
      this.applyPhysics();
    }
};    

var Oran = function( sx, sy, w, h) {
    this.sx = sx;
    this.sy = sy;
    this.x = this.sx;
    this.y = this.sy;
    
   this.w = w;
   this.h = h;
    this.grav = 0;
   this.vel = 0;
    this.onGround = false;
    this.inRange = false;
    
    this.direction = 'left';
    this.health = 100;
    this.oxygen = 100;
    this.onLadder = false;
    
    this.alive = true;
    this.canJump= true;
    this.jump = -blockSize/3;
    
   
    this.knifeThrowTimer = 0;
};  
Oran.freed = [];
Oran.prototype.draw = function() {
  
    
       
    
        //graphics
     
        if(this.direction === 'left') {
                noStroke();
            //farther arm
            noFill();
            
            pushMatrix();
            translate(this.x+ this.w/8, this.y+this.h/10);
           
            rotate(-cos(frameCount*15)*this.vel*this.w/4);
         
            stroke(0, 0, 0);
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/5); 
            
            translate(0, this.h/5);
           
            rotate(-cos(frameCount*15)*this.vel*this.w/4+30);
          
            
            stroke(0, 0, 0);
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/6); 
            noStroke();
            fill(0, 0, 0);
            arc(0, this.h/6, this.w/6, this.h/6, 0, 180);
            
             
             fill(0, 0, 0);
             if(dist(player1[0].x, player1[0].y, this.x, this.y) <= blockSize*2) {
                triangle(0, this.h/6, 0, this.h/4, this.w/2, this.h/5); 
             } 
            noStroke();
            noStroke();
            popMatrix();
            //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/6);        
                stroke(0, 0, 0);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(0, 0, 0);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
                translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
                rotate(-cos(frameCount*15)*this.vel*this.w/6 );        
                stroke(0, 0, 0);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                
                stroke(0, 0, 0);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                noStroke();
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/20,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/20);
                
                //belt
                noStroke();
                fill(0, 0, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //closer arm
            noFill();
            stroke(0, 0, 0);
            pushMatrix();
            translate(this.x+ this.w-this.w/8, this.y+this.h/10);
            rotate(cos(frameCount*15)*this.vel*this.w/4);
            strokeWeight(this.w / 4);
            line(0, 0, 0, this.h/5); 
            
            
             
             translate(0, this.h/5);
            
            rotate(cos(frameCount*15)*this.vel*this.w/4+30);
            
            
            strokeWeight(this.w / 4);
            stroke(0, 0, 0);
            line(0, 0, 0, this.h/5);
            
            fill(0, 0, 0);
            noStroke();
            arc(0, this.w/3, this.w/4, this.h/5, 0, 180);
            
            popMatrix();    
            noStroke();
                
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2 - this.w/20, this.y- this.h/20, this.w/3, this.h/6);
       
                fill(0, 0, 0);
                arc(this.x + this.w/2- this.w/20, this.y - this.h/12, this.w/2, this.h/2.5, 180, 360); 
               
                rect(this.x+this.w/2, this.y-this.h/12, this.w/5.5, this.h/10);
                rect(this.x + this.w/2- this.w/20 - this.w/5, this.y-this.h/25, this.w/2.5, this.h/10);
                fill(0, 0, 0);
                ellipse(this.x+this.w/2 - this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          } else if(this.direction === 'right') {
                noStroke();
            //farther arm{
            noFill();
            stroke(0, 0, 0);
            pushMatrix();
            translate(this.x+ this.w - this.w/8, this.y+this.h/10);
    
            rotate(-cos(frameCount*15)*this.vel*this.w/4);
          
            strokeWeight(this.w / 5);
            line(0, 0, 0, this.h/5); 
            translate(0, this.h/5);
            rotate(-cos(frameCount*15)*this.vel*this.w/4-30);
          
               
            strokeWeight(this.w / 5);
            stroke(0, 0, 0);
            line(0, 0, 0, this.h/5); 
            fill(0, 0, 0);
            noStroke();
            fill(0, 0, 0);
            arc(0, this.h/6, this.w/6, this.h/6, 0, 180);
            
            
             fill(0, 0, 0);
             if(dist(player1[0].x, player1[0].y, this.x, this.y) <= blockSize*2) {
                triangle(0, this.h/6, 0, this.h/4, -this.w/2, this.h/5); 
             } 
            popMatrix();    
            noStroke();
            //}
                
                //legs{
                
                
                
               
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
                translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
                rotate(-cos(frameCount*8)*this.vel*this.w/6 );        
                stroke(0, 0, 0);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                
                stroke(0, 0, 0);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                
                 strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
                rotate(cos(frameCount*8)*this.vel*this.w/6);        
                stroke(0, 0, 0);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(0, 0, 0);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                noStroke();
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/20,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/20);
                
                //belt
                noStroke();
                fill(0, 0, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
               //closer arm
            noFill();
            stroke(0, 0, 0);
            pushMatrix();
            translate(this.x+ this.w/8, this.y+this.h/10);
            rotate(cos(frameCount*15)*this.vel*this.w/4);
            strokeWeight(this.w / 4);
            line(0, 0, 0, this.h/5); 
            
            
             
             translate(0, this.h/5);
            
            rotate(cos(frameCount*15)*this.vel*this.w/4-30);
            
            
            strokeWeight(this.w / 4);
            stroke(0, 0, 0);
            line(0, 0, 0, this.h/5);
            
            fill(0, 0, 0);
            noStroke();
            arc(0, this.w/3, this.w/4, this.h/5, 0, 180);
           
            popMatrix();    
            noStroke();
                
                
               
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2 + this.w/20, this.y- this.h/20, this.w/3, this.h/6);
                
                fill(0, 0, 0);
                arc(this.x + this.w/2+ this.w/20, this.y - this.h/12, this.w/2, this.h/2.5, 180, 360); 
               
                rect(this.x+this.w/2-this.w/5.5, this.y-this.h/12, this.w/5.5, this.h/10);
                rect(this.x + this.w/2 - this.w/7, this.y-this.h/25, this.w/2.5, this.h/10);
                
                noStroke();
                fill(0);
              ellipse(this.x+this.w/2 + this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          } else if(this.direction === 'none') {
               
                noStroke();
                
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(0, 0, 0);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(0, 0, 0);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
               
        
                translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(0, 0, 0);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(0, 0, 0);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/20,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/20);
                
                //belt
                noStroke();
                fill(0, 0, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //arms
                noFill();
                stroke(0, 0, 0);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
               
                popMatrix(); 
                
                stroke(0, 0, 0);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                 popMatrix();
                noStroke();
                
                
                //shoulders
                fill(0, 0, 0);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                 
                
                
                
                //head
                noStroke();
                fill(0, 0, 0);
                ellipse(this.x + this.w/2, this.y- this.h/20, this.w/3, this.h/6);
                
                fill(0, 0, 0);
                arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
               
                noFill();
                stroke(0, 0, 0);
                strokeWeight(this.w/13);
                rect(this.x + this.w/2- this.w/6, this.y-this.h/12, this.w/2.8, this.h/13);
                noStroke();
                fill(0, 0, 0);
                rect(this.x + this.w/2 - this.w/5, this.y, this.w/2.5, this.h/17);
                
                fill(0);
                ellipse(this.x+this.w/2 - this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
                ellipse(this.x+this.w/2 + this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
          } 
      
         
     
        //health and oxygen bar
        fill(166, 166, 166);
        rect(this.x, this.y - this.h/2+this.h/10, this.w, this.h/10);
        fill(0, 255, 0);
        rect(this.x, this.y - this.h/2+this.h/10, this.health/this.w*7.1, this.h/10);
     
    fill(166, 166, 166);
    rect(this.x, this.y - this.h/2-this.h/20, this.w, this.h/10);
    fill(56, 83, 255);
    rect(this.x, this.y - this.h/2-this.h/20, this.oxygen/this.w*7.1, this.h/10);
    

        
    
};
Oran.prototype.brain = function() {
    //player 1 attack
     //left and right and jump
               //left and right and jump
               if(this.x>player1[0].x + player1[0].w) {
                    this.direction = 'left';   
               } 
                if(this.x + this.w < player1[0].x) {
                    this.direction = 'right';   
               } 
               if(player1[0].y + player1[0].h/2 <= this.y &&  this.onGround === true ) {
                this.grav = this.jump;  
                this.onGround = false;
                
                }
                //makes the enemy jump over walls
                if(this.y === player1[0].y && this.vel === 0) {
                    this.grav = this.jump;   
                    this.onGround = false;
                }    
                if(this.onGround && this.vel >=0 && player1[0].x <= this.x) {
                     this.grav = this.jump;   
                    this.onGround = false;
                }
                if(this.onGround && this.vel <=0 && player1[0].x >= this.x) {
                     this.grav = this.jump;   
                    this.onGround = false;
                }
    this.x += round(this.vel);
    this.y += this.grav;
    this.vel = constrain(this.vel, -4, 4);
    
    this.grav +=0.8;
    
    if(this.direction === 'right' && this.direction !== 'ladder') {
        this.vel ++;   
       
    }    
     if(this.direction === 'left' && this.direction !== 'ladder') {
        this.vel --;
        
    }
     
  
  if(this.vel > -1 && this.vel < 1) {
        this.direction = 'none';   
  } 
    
    // Implements friction
    if(this.vel > 0) {
        this.vel -= 0.3;
    } else if(this.vel < 0) {
        this.vel += 0.3;
    }   
    
      this.knifeThrowTimer ++;   
     if(this.knifeThrowTimer >=blockSize/2) {
        this.knifeThrowTimer = 0;  
    }    
    
};
Oran.prototype.kill = function() {
    //enemy kills player
    if(this.knifeThrowTimer >=blockSize/2-1) {
        knives.push(new Knife(this.x+this.w/2, this.y+this.h/20));
      }
      if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, this.w, this.h)){
        player1[0].health -= player1[0].armorLevel*blockSize/2;
        
    }
    
    //player kills enemy
    if(checkIn(player1[0].x - player1[0].w, player1[0].y, player1[0].w*3, player1[0].h, this.x, this.y, this.w, this.h) && player1[0].direction !== 'none' && player1[0].weapon === 'sword') {
        this.x = this.sx;
        this.y = this.sy;
        this.health -= player1[0].swordLevel*blockSize/10;
        
    }    
     
    
    if(this.health <= 0 || this.oxygen <= 0) {
        this.alive = false;
    }    
};    
Oran.prototype.run = function() {
    if(this.alive) {
        this.draw();
        this.brain();
        this.kill();
    }
};    
Oran.new = function(sx, sy, w, h) {
    var o;
    if (Oran.freed.length > 0) {
        o = Oran.freed.pop();
        o.init(sx, sy, w, h);
    } else {
        o = new Oran(sx, sy, w, h);
    }
    return o;
};  

var Arrow = function(x, y) {
    this.x = x;
    this.y = y;
    this.grav = 0;
    
     this.rot = atan2(player1[0].y - this.y,player1[0].x+player1[0].w/2 - this.x);
    this.ydir = sin(this.rot)*blockSize;
    this.xdir = cos(this.rot)*blockSize;
    
    this.alive = true;
    
    
};    
Arrow.prototype.draw = function() {
    
    pushMatrix();
    translate(this.x, this.y);
    
    rotate(this.rot);
     noStroke();
     fill(110, 79, 0);
     rect(-blockSize/2, -blockSize/40, blockSize, blockSize/20);
     fill(135, 135, 135);
     triangle(blockSize/2, blockSize/20,blockSize/2, -blockSize/20, blockSize/10+blockSize/2, 0);
     fill(0, 0, 0);
     rect(-blockSize/2, -blockSize/20, blockSize/10, blockSize/10);
     popMatrix();
};
Arrow.prototype.applyPhysics = function() {
    
    this.grav += 0.005;
    this.ydir += this.grav;
   for (var i = 0; i <= 3; i ++) {
    this.x += 0.3* this.xdir;
    this.y += 0.3 * this.ydir;
    }
     for(var i in blocks) {
        if(dist(this.x, this.y, blocks[i].x + blocks[i].w/2, blocks[i].y + blocks[i].h / 3) <= blocks[i].w/1.5) {
            this.alive = false;   
        }    
    }    
    for(var i in enemies) {
        if(this.x -10>=enemies[i].x && this.x +10<= enemies[i].x + enemies[i].w&&this.y >=enemies[i].y && this.y <= enemies[i].y + enemies[i].h) {
            this.alive = false;   
            enemies[i].health -= blockSize;
        }    
    } 
    for(var i in wizards) {
        if(this.x -10>=wizards[i].x && this.x+10 <= wizards[i].x + wizards[i].w&&this.y >=wizards[i].y && this.y <= wizards[i].y + wizards[i].h) {
            this.alive = false;   
           wizards[i].health -= blockSize;
        }    
    } 
     for(var i in bosses) {
        if(this.x -10>=bosses[i].x && this.x+10 <= bosses[i].x + bosses[i].w&&this.y >=bosses[i].y && this.y <= bosses[i].y + bosses[i].h) {
            this.alive = false;   
           wizards[i].health -= blockSize;
        }    
    } 
    if(dist(this.x, this.y, player1[0].x + player1[0].w/2, player1[0].y + player1[0].h / 3) <= player1[0].w) {
            player1[0].health -= player1[0].armorLevel*blockSize;      
            this.alive = false;
    } 
    
};    
Arrow.prototype.run = function() {
    if(this.alive){
      this.draw();
      this.applyPhysics();
    }
};    

var Archer = function( sx, sy, w, h) {
    this.sx = sx;
    this.sy = sy;
    this.x = this.sx;
    this.y = this.sy;
    
   this.w = w;
   this.h = h;
    this.grav = 0;
   this.vel = 0;
    this.onGround = false;
    this.inRange = false;
    
    this.direction = 'left';
    this.health = 100;
    this.oxygen = 100;
    this.onLadder = false;
    
    this.alive = true;
    this.canJump= true;
    this.jump = -blockSize/3;
    
   
    this.bowDraw = 0;
};   
Archer.freed = [];
Archer.prototype.draw = function() {
    //graphics
     //quiver
     noStroke();
     pushMatrix();
     translate(this.x, this.y-this.h/20);
     rotate(-20);
     fill(0, 0, 0);
     rect(this.w/20, -this.h/10, this.w/40, this.h/3);
     rect(this.w/20+this.w/20, -this.h/10, this.w/40, this.h/3);
     rect(this.w/20+this.w/20+this.w/20, -this.h/10, this.w/40, this.h/3);
     fill(117, 117, 117);
     rect(0, 0, this.w/5, this.h/2);
     popMatrix();
     
        if(this.direction === 'left') {
                noStroke();
                //farther arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                if(!this.inRange) {
                rotate(-cos(frameCount*15)*this.vel*this.w/4);
                } else if(this.inRange) { 
                        rotate(atan2(player1[0].y - this.y,player1[0].x - this.x)-90);
                }
                strokeWeight(this.w / 6);
                line(0, 0, 0, this.h/2.6); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/10, this.w/3, this.w/6, this.h/10);
                arc(0, this.h/2.8, this.w/6, this.h/6, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 //bow
                
                if(this.inRange){
                    noFill();
                    stroke(0);
                    strokeWeight(1);
                 arc(0, this.h/3-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);
                    arc(0, this.h/3+1-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);   
                    arc(0, this.h/3+2-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);
                    line(-this.w+this.w/2/2, this.h/3-this.bowDraw/2, 0, -this.bowDraw+this.w/2-this.w/20);
                    line(this.w-this.w/2/2, this.h/3-this.bowDraw/2, 0, -this.bowDraw+this.w/2-this.w/20);
                 
                
                
                } else {
                    noFill();
                    stroke(0);
                    strokeWeight(1);
                 arc(0, this.h/3, this.w+this.w/2, this.h/5, 0, 180);
                    arc(0, this.h/3+1, this.w+this.w/2, this.h/5, 0, 180);   
                    arc(0, this.h/3, this.w+this.w/2, this.h/5, 0, 180);
                    line(-this.w+this.w/2/2,this.h/3, this.w-this.w/2/2,this.h/3);
                 
                }  
                noStroke();
                popMatrix();    
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/6);        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
                translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
                rotate(-cos(frameCount*15)*this.vel*this.w/6 );        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                noStroke();
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //closer arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/4);
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix();    
                noStroke();
                
                
                //closer shoulder
                fill(51, 51, 51);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2, this.h/8);
                
                 
                
                //farther shoulder
                fill(48, 48, 48);
                ellipse(this.x+this.w/10, this.y+this.h/10, this.w/2.5, this.h/10);
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2 - this.w/20, this.y- this.h/20, this.w/3, this.h/6);
       
                fill(0, 0, 0);
                arc(this.x + this.w/2- this.w/20, this.y - this.h/12, this.w/2, this.h/2.5, 180, 360); 
               
                rect(this.x+this.w/2, this.y-this.h/12, this.w/5.5, this.h/10);
                rect(this.x + this.w/2- this.w/20 - this.w/5, this.y-this.h/25, this.w/2.5, this.h/10);
                fill(0, 0, 0);
                ellipse(this.x+this.w/2 - this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          } else if(this.direction === 'right') {
                noStroke();
                //farther arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w - this.w/8, this.y+this.h/10);
                if(!this.inRange) {
                rotate(-cos(frameCount*15)*this.vel*this.w/4);
                } else if(this.inRange) { 
                        rotate(atan2(player1[0].y - this.y,player1[0].x - this.x)-90);
                }
                strokeWeight(this.w / 6);
                line(0, 0, 0, this.h/2.6); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/10, this.w/3, this.w/6, this.h/10);
                arc(0, this.h/2.8, this.w/6, this.h/6, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 //bow
                     
                   if(this.inRange){
                    noFill();
                    stroke(0);
                    strokeWeight(1);
                 arc(0, this.h/3-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);
                    arc(0, this.h/3+1-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);   
                    arc(0, this.h/3+2-this.bowDraw/2, this.w+this.w/2, this.h/5+this.bowDraw, 0, 180);
                    line(-this.w+this.w/2/2, this.h/3-this.bowDraw/2, 0, -this.bowDraw+this.w/2-this.w/20);
                    line(this.w-this.w/2/2, this.h/3-this.bowDraw/2, 0, -this.bowDraw+this.w/2-this.w/20);
                 
                
                } else {
                    noFill();
                    stroke(0);
                    strokeWeight(1);
                 arc(0, this.h/3, this.w+this.w/2, this.h/5, 0, 180);
                    arc(0, this.h/3+1, this.w+this.w/2, this.h/5, 0, 180);   
                    arc(0, this.h/3, this.w+this.w/2, this.h/5, 0, 180);
                    line(-this.w+this.w/2/2,this.h/3, this.w-this.w/2/2,this.h/3);
                 
                }  
                noStroke();
                 
                popMatrix();    
                noStroke();
                
                //legs{
                
                
                
               
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
                translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
                rotate(-cos(frameCount*8)*this.vel*this.w/6 );        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                
                 strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
                rotate(cos(frameCount*8)*this.vel*this.w/6);        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                noStroke();
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //closer arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/4);
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix();    
                noStroke();
                
                
                //farther shoulder
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/10);
                
                 
                
                //closer shoulder
                fill(50, 50, 50);
                ellipse(this.x+this.w/8, this.y+this.h/10, this.w/2, this.h/8);
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2 + this.w/20, this.y- this.h/20, this.w/3, this.h/6);
                
                fill(0, 0, 0);
                arc(this.x + this.w/2+ this.w/20, this.y - this.h/12, this.w/2, this.h/2.5, 180, 360); 
               
                rect(this.x+this.w/2-this.w/5.5, this.y-this.h/12, this.w/5.5, this.h/10);
                rect(this.x + this.w/2 - this.w/7, this.y-this.h/25, this.w/2.5, this.h/10);
                
                noStroke();
                fill(0);
              ellipse(this.x+this.w/2 + this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          } else if(this.direction === 'none') {
               
                noStroke();
                
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
               
        
                translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //arms
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix(); 
                
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 popMatrix();
                noStroke();
                
                
                //shoulders
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                 
                
                
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2, this.y- this.h/20, this.w/3, this.h/6);
                
                fill(0, 0, 0);
                arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
               
                noFill();
                stroke(0, 0, 0);
                strokeWeight(this.w/13);
                rect(this.x + this.w/2- this.w/6, this.y-this.h/12, this.w/2.8, this.h/13);
                noStroke();
                fill(0, 0, 0);
                rect(this.x + this.w/2 - this.w/5, this.y, this.w/2.5, this.h/17);
                
                fill(0);
                ellipse(this.x+this.w/2 - this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
                ellipse(this.x+this.w/2 + this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
          } 
        else if(this.direction === 'ladder') {
            noStroke();
                
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
             
        
                translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                
                //}
                
                
                 //arms
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix(); 
                
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 popMatrix();
                noStroke();
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
               
                
                
                //shoulders
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                 
                
                
                
                //head
                noStroke();
                
                
                fill(0, 0, 0);
                arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
               
                fill(0);
                stroke(0, 0, 0);
                strokeWeight(this.w/13);
                rect(this.x + this.w/2- this.w/6, this.y-this.h/12, this.w/3, this.h/13);
                noStroke();
                
            
        }  
         
     
        //health bar
        fill(166, 166, 166);
        rect(this.x, this.y - this.h/2+this.h/10, this.w, this.h/10);
        fill(0, 255, 0);
        rect(this.x, this.y - this.h/2+this.h/10, this.health/this.w*7.1, this.h/10);
     
    
    fill(166, 166, 166);
    rect(this.x, this.y - this.h/2-this.h/20, this.w, this.h/10);
    fill(56, 83, 255);
    rect(this.x, this.y - this.h/2-this.h/20, this.oxygen/this.w*7.1, this.h/10);
    

        
    
};
Archer.prototype.brain = function() {
    
    //on patrol{
    if(dist(this.x, this.y, player1[0].x, player1[0].y) >=width) {
        this.inRange = false;
        
        for(var i in blocks) {
            if(checkIn(blocks[i].x, blocks[i].y, blocks[i].w, blocks[i].h, this.x - this.w/2, this.y, this.w+this.w/2+this.w/2, this.h)) {   
                
                
                 if(this.y +this.h> blocks[i].y + blocks[i].h / 5 && this.y < blocks[i].y + blocks[i].h - blocks[i].h/5) {
                    
                           if(this.direction === 'left' && this.vel <=0 && this.x > blocks[i].x + blocks[i].w/2) {
                               this.vel = 4;
                                this.direction = 'right';   
                                
                           } 
                            if(this.direction === 'right' && this.vel >=0 && this.x + this.w< blocks[i].x + blocks[i].w/2) {
                               this.vel = -4;
                                this.direction = 'left';   
                                
                           } 
                           
                }
            }
        }
    
    } //}  
    //on pursuit{
    else {
     this.bowDraw ++; 
    
    //player 1 attack
     if(dist(this.x, this.y, player1[0].x, player1[0].y) <=width &&dist(this.x, this.y, player1[0].x, player1[0].y) >= blockSize*2) {
            //left and right and jump
               if(this.x>player1[0].x + player1[0].w) {
                    this.direction = 'left';   
               } 
                if(this.x + this.w < player1[0].x) {
                    this.direction = 'right';   
               } 
            this.inRange = true;
     }  
    
     //registers whether the enmy will chase the player or not
     if(dist(this.x, this.y, player1[0].x, player1[0].y) <= width&&dist(this.x, this.y, player1[0].x, player1[0].y) >= blockSize*2) {
               this.inRange = true;
        }  else {
            this.inRange = false;   
        }    
        
    
    }
     
     //}
    this.x += round(this.vel);
    this.y += this.grav;
    this.vel = constrain(this.vel, -4, 4);
    
    this.grav +=0.8;
    
    if(this.direction === 'right' && this.direction !== 'ladder') {
        this.vel ++;   
       
    }    
     if(this.direction === 'left' && this.direction !== 'ladder') {
        this.vel --;
        
    }
   
  if(this.vel > -1 && this.vel < 1) {
        this.direction = 'none';   
  } 
    
    // Implements friction
    if(this.vel > 0) {
        this.vel -= 0.3;
    } else if(this.vel < 0) {
        this.vel += 0.3;
    }   
    
     
     if(this.bowDraw >=blockSize/1.5) {
        this.bowDraw = 0;  
    }    
    
};
Archer.prototype.kill = function() {
    //enemy kills player
    if(this.inRange&&this.bowDraw >=blockSize/1.6) {
        arrows.push(new Arrow(this.x+this.w/2, this.y+this.h/20));
       
        
    }    
    
    
    //player kills enemy
    if(checkIn(player1[0].x - player1[0].w, player1[0].y, player1[0].w*3, player1[0].h, this.x, this.y, this.w, this.h) && player1[0].direction !== 'none' && player1[0].weapon === 'sword') {
        this.health -= player1[0].armorLevel*blockSize/5;
        
    }    
     
    
    if(this.health <= 0  || this.oxygen <= 0) {
        
        this.alive = false;
        //coins.push(new Coin(this.x, this.y));
    }    
};    
Archer.prototype.run = function() {
    if(this.alive) {
        this.draw();
        this.brain();
        this.kill();
    }
};    
Archer.new = function(sx, sy, w, h) {
    var a;
    if (Archer.freed.length > 0) {
        a = Archer.freed.pop();
        a.init(sx, sy, w, h);
    } else {
        a = new Archer(sx, sy, w, h);
    }
    return a;
};  

var fireBall= function(x, y) {
    this.x = x;
    this.y = y;
    this.grav = 0;
    this.ydir = random((player1[0].y+player1[0].h/10-this.y-2)/10-2,(player1[0].y+player1[0].h/10-this.y-2)/10+2);
    this.xdir= random((player1[0].x+player1[0].w/2-this.x)/10-2,(player1[0].x+player1[0].w/2-this.x)/10+2);
    this.rot = atan2(player1[0].y - this.y,player1[0].x - this.x);
    
    this.alive = true;
    
    
};    
fireBall.prototype.draw = function() {
    
    this.ydir = random((player1[0].y+player1[0].h/10-this.y)/10,(player1[0].y+player1[0].h/10-this.y-2)/10);
    this.xdir= random((player1[0].x+player1[0].w/2-this.x)/10-2,(player1[0].x+player1[0].w/2-this.x)/10);
    this.rot = atan2(player1[0].y - this.y,player1[0].x - this.x);
    
    pushMatrix();
    translate(this.x, this.y);
    
    rotate(this.rot);
     
     fill(255, 0, 0);
     ellipse(0, 0, blockSize/3, blockSize/3);
     stroke(255, 0, 0);
     strokeWeight(blockSize/15);
     line(0, 0, -random(0, blockSize), 0);
     line(0, blockSize/10, -random(0, blockSize/2), blockSize/10);
     line(0, -blockSize/10, -random(0, blockSize/2), -blockSize/10);
     line(0, blockSize/20, -random(0, blockSize/2), blockSize/20);
     line(0, -blockSize/20, -random(0, blockSize/2), -blockSize/20);
     popMatrix();
};
fireBall.prototype.applyPhysics = function() {
    
   
    
    this.y += this.ydir;
    
    this.x += this.xdir;
    
    for(var i in blocks) {
        if(this.x >=blocks[i].x && this.x <= blocks[i].x + blocks[i].w&&this.y >=blocks[i].y && this.y <= blocks[i].y + blocks[i].h) {
            this.alive = false;   
        }    
    }   
    for(var i in enemies) {
        if(this.x >=enemies[i].x && this.x <= enemies[i].x + enemies[i].w&&this.y >=enemies[i].y && this.y <= enemies[i].y + enemies[i].h) {
            this.alive = false;   
            enemies[i].health -= blockSize;
        }    
    } 
    if(this.x >=player1[0].x && this.x <= player1[0].x + player1[0].w&&this.y >=player1[0].y && this.y <= player1[0].y + player1[0].h) {
            player1[0].health -= player1[0].armorLevel*blockSize*1.5;   
            this.alive = false;
    } 
    
};    
fireBall.prototype.run = function() {
    if(this.alive){
      this.draw();
      this.applyPhysics();
    }
};    

var Wizard = function(sx, sy, w, h) {
    this.sx = sx;
    this.sy = sy;
    this.x = this.sx;
    this.y = this.sy;
   this.w = w;
   this.h = h;
    this.grav = 0;
   this.vel = 0;
    this.onGround = false;
    this.inRange = false;
    this.direction = 'none';
    this.health = 100;
    this.oxygen = 100;
    this.onLadder = false;
    this.alive = true;
    this.canJump= true;
    this.jump = -blockSize/3;
    this.bowDraw = 0;
};   
Wizard.freed = [];
Wizard.prototype.draw = function() {
  
    //graphics
     
     
        if(this.direction === 'left') {
                noStroke();
                //cloak
                fill(50, 50, 50);
                rect(this.x+this.w/8, this.y+this.h/10, this.w-this.w/8, this.h/1.5, this.w/5);
                
                //farther arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                if(!this.inRange) {
                rotate(-cos(frameCount*15)*this.vel*this.w/4);
                } else if(this.inRange) { 
                        rotate(atan2(player1[0].y - this.y,player1[0].x - this.x)-90);
                }
                strokeWeight(this.w / 6);
                line(0, 0, 0, this.h/2.6); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/10, this.w/3, this.w/6, this.h/10);
                arc(0, this.h/2.8, this.w/6, this.h/6, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
              
                
               //staff 
               if(this.inRange) {
                   pushMatrix();
                   translate(0, this.h/3);
                   rotate(-45);
                    noFill();
                stroke(0);
                strokeWeight(3);
                line(-this.w, 0, this.w, 0);  
                popMatrix();
               } else { 
                noFill();
                stroke(0);
                strokeWeight(3);
               line(-this.w, this.h/3, this.w, this.h/3);
               }
                
                noStroke();
                popMatrix();    
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/6);        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
                translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
                rotate(-cos(frameCount*15)*this.vel*this.w/6 );        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                noStroke();
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //closer arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/4);
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix();    
                noStroke();
                
                
                //closer shoulder
                fill(51, 51, 51);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2, this.h/8);
                
                 
                
                //farther shoulder
                fill(48, 48, 48);
                ellipse(this.x+this.w/10, this.y+this.h/10, this.w/2.5, this.h/10);
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2 - this.w/20, this.y- this.h/20, this.w/3, this.h/6);
       
                fill(0, 0, 0);
                 
                triangle(this.x + this.w/2- this.w/20-(this.w/2)/2,  this.y - this.h/12, this.x + this.w/2- this.w/20+(this.w/2)/2,this.y - this.h/12, this.x + this.w/2- this.w/20,this.y - this.h/12-this.h/2.5);
                rect(this.x,  this.y-this.h/10, this.w-this.w/10, this.h/30, this.w);
                rect(this.x+this.w/2, this.y-this.h/12, this.w/5.5, this.h/10);
                rect(this.x + this.w/2- this.w/20 - this.w/5, this.y-this.h/25, this.w/2.5, this.h/10);
                fill(0, 0, 0);
                ellipse(this.x+this.w/2 - this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          } else if(this.direction === 'right') {
                noStroke();
                //cloak
                fill(50, 50, 50);
                rect(this.x, this.y+this.h/10, this.w-this.w/8, this.h/1.5, this.w/5);
                
                //farther arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w - this.w/8, this.y+this.h/10);
                if(!this.inRange) {
                rotate(-cos(frameCount*15)*this.vel*this.w/4);
                } else if(this.inRange) { 
                        rotate(atan2(player1[0].y - this.y,player1[0].x - this.x)-90);
                }
                strokeWeight(this.w / 6);
                line(0, 0, 0, this.h/2.6); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/10, this.w/3, this.w/6, this.h/10);
                arc(0, this.h/2.8, this.w/6, this.h/6, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 
                 //staff 
               if(this.inRange) {
                   pushMatrix();
                   translate(0, this.h/3);
                   rotate(45);
                    noFill();
                stroke(0);
                strokeWeight(3);
                line(-this.w, 0, this.w, 0);  
                popMatrix();
               } else { 
                noFill();
                stroke(0);
                strokeWeight(3);
               line(-this.w, this.h/3, this.w, this.h/3);
               }
                noStroke();
                 
                popMatrix();    
                noStroke();
                
                //legs{
                
                
                
               
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
                translate(this.x + this.w -this.w/3, this.y + this.h/2-this.h/10);
                rotate(-cos(frameCount*8)*this.vel*this.w/6 );        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                
                 strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.6, this.y + this.h/2-this.h/10);
                rotate(cos(frameCount*8)*this.vel*this.w/6);        
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                noStroke();
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //closer arm
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                rotate(cos(frameCount*15)*this.vel*this.w/4);
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix();    
                noStroke();
                
                
                //farther shoulder
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/10);
                
                 
                
                //closer shoulder
                fill(50, 50, 50);
                ellipse(this.x+this.w/8, this.y+this.h/10, this.w/2, this.h/8);
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2 + this.w/20, this.y- this.h/20, this.w/3, this.h/6);
                
                fill(0, 0, 0);
                
               triangle(this.x + this.w/2+ this.w/20-(this.w/2)/2,  this.y - this.h/12, this.x + this.w/2+ this.w/20+(this.w/2)/2,this.y - this.h/12, this.x + this.w/2+ this.w/20,this.y - this.h/12-this.h/2.5);
                rect(this.x+this.w/10,  this.y-this.h/10, this.w-this.w/10, this.h/30, this.w);
                rect(this.x+this.w/2-this.w/5.5, this.y-this.h/12, this.w/5.5, this.h/10);
                rect(this.x + this.w/2 - this.w/7, this.y-this.h/25, this.w/2.5, this.h/10);
                
                noStroke();
                fill(0);
              ellipse(this.x+this.w/2 + this.w/10, this.y - this.h / 17, this.w/20, this.h/40);
          } else if(this.direction === 'none') {
               
                noStroke();
                
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
               
        
                translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                
                //}
                
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
                //arms
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix(); 
                
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 popMatrix();
                noStroke();
                
                
                //shoulders
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                 
                
                
                
                //head
                noStroke();
                fill(173, 156, 2);
                ellipse(this.x + this.w/2, this.y- this.h/20, this.w/3, this.h/6);
                
                fill(0, 0, 0);
                arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
               
                noFill();
                stroke(0, 0, 0);
                strokeWeight(this.w/13);
                rect(this.x + this.w/2- this.w/6, this.y-this.h/12, this.w/2.8, this.h/13);
                noStroke();
                fill(0, 0, 0);
                rect(this.x + this.w/2 - this.w/5, this.y, this.w/2.5, this.h/17);
                
                fill(0);
                ellipse(this.x+this.w/2 - this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
                ellipse(this.x+this.w/2 + this.w/20, this.y - this.h / 20, this.w/20, this.h/40);
          } 
        else if(this.direction === 'ladder') {
            noStroke();
                
                //legs{
                
                
                
                strokeWeight(this.w/4.5);
                pushMatrix();
        
                translate(this.x + this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(-this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                pushMatrix();
        
             
        
                translate(this.x + this.w - this.w/2.7, this.y + this.h/2-this.h/10);
                       
                stroke(120, 0, 120);
                line(0, 0, 0, this.h/3);
                stroke(0, 0, 0);
                line(0, this.h/3, 0, this.h/2);
                fill(0, 0, 0);
                noStroke();
                quad(-this.w/6, this.h/3.2, -this.w/8, this.h/1.7, this.w/8, this.h/1.7, this.w/6, this.h/3.2);
                
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                line(-this.w/15, this.h/3, -this.w/15, this.h/2.5);
                //foot
                noStroke();
                fill(0, 0, 0);
                arc(this.w/10, this.h/1.7, this.w/4, this.h/10, 180, 360);
                popMatrix();
                
                strokeWeight(this.w/4.2);
                
                //}
                
                
                 //arms
                noFill();
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w-this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                popMatrix(); 
                
                stroke(120, 0, 120);
                pushMatrix();
                translate(this.x+ this.w/8, this.y+this.h/10);
                
                strokeWeight(this.w / 5);
                line(0, 0, 0, this.h/2.5); 
                fill(0, 0, 0);
                noStroke();
                rect(-this.w/8, this.w/3, this.w/4, this.h/10);
                arc(0, this.w/1.4, this.w/4, this.h/5, 0, 180);
                stroke(180, 180, 180);
                strokeWeight(this.w/15);
                point(-this.w/20, this.h/5.5);
                 point(-this.w/20, this.h/2.6);
                 popMatrix();
                noStroke();
                
                //torso
                fill(0, 0, 0);
                quad(this.x + this.w/8, this.y + this.h/10,this.x + this.w/8+ this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8- this.w/8, this.y + this.h/2, this.x + this.w - this.w / 8, this.y + this.h/10);
                
                //belt
                noStroke();
                fill(122, 102, 0);
                rect(this.x+this.w/8+this.w/10, this.y+this.h/2-this.h/10, this.w/1.7, this.h/10);
                
                
               
                
                
                //shoulders
                fill(50, 50, 50);
                ellipse(this.x+ this.w-this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                ellipse(this.x + this.w/8, this.y+this.h/10, this.w/2.5, this.h/8);
                 
                
                
                
                //head
                noStroke();
                
                
                fill(0, 0, 0);
                arc(this.x + this.w/2, this.y - this.h/12, this.w/2.3, this.h/2.5, 180, 360); 
               
                fill(0);
                stroke(0, 0, 0);
                strokeWeight(this.w/13);
                rect(this.x + this.w/2- this.w/6, this.y-this.h/12, this.w/3, this.h/13);
                noStroke();
                
            
        }  
         
     
        //health bar
        fill(166, 166, 166);
        rect(this.x, this.y - this.h/2+this.h/10, this.w, this.h/10);
        fill(0, 255, 0);
        rect(this.x, this.y - this.h/2+this.h/10, this.health/this.w*7.1, this.h/10);
     
    
    fill(166, 166, 166);
    rect(this.x, this.y - this.h/2-this.h/20, this.w, this.h/10);
    fill(56, 83, 255);
    rect(this.x, this.y - this.h/2-this.h/20, this.oxygen/this.w*7.1, this.h/10);
    

        
    
};
Wizard.prototype.brain = function() {
    
    //on patrol{
    if(dist(this.x, this.y, player1[0].x, player1[0].y) >=width) {
        this.inRange = false;
        
        for(var i in blocks) {
            if(checkIn(blocks[i].x, blocks[i].y, blocks[i].w, blocks[i].h, this.x - this.w/2, this.y, this.w+this.w/2+this.w/2, this.h)) {   
                
                
                 if(this.y +this.h> blocks[i].y + blocks[i].h / 5 && this.y < blocks[i].y + blocks[i].h - blocks[i].h/5) {
                    
                           if(this.direction === 'left' && this.vel <=0 && this.x > blocks[i].x + blocks[i].w/2) {
                               this.vel = 4;
                                this.direction = 'right';   
                                
                           } 
                            if(this.direction === 'right' && this.vel >=0 && this.x + this.w< blocks[i].x + blocks[i].w/2) {
                               this.vel = -4;
                                this.direction = 'left';   
                                
                           } 
                           
                
                   
                    
                    
                    
                    
            
                
                
              
                    
                }
            }
        }
    
    } //}  
    //on pursuit{
    else {
     this.bowDraw ++;   
    
    //player 1 attack
     if(dist(this.x, this.y, player1[0].x, player1[0].y) <=width &&dist(this.x, this.y, player1[0].x, player1[0].y) >= blockSize*2) {
            
          //left and right and jump
               if(this.x>player1[0].x + player1[0].w) {
                    this.direction = 'left';   
               } 
                if(this.x + this.w < player1[0].x) {
                    this.direction = 'right';   
               } 
               
               
               
                   
           this.inRange = true;
     }  
    
     
     
     
     
     //registers whether the enmy will chase the player or not
     if(dist(this.x, this.y, player1[0].x, player1[0].y) <= width&&dist(this.x, this.y, player1[0].x, player1[0].y) >= blockSize*2) {
               this.inRange = true;
        }  else {
            this.inRange = false;   
        }    
        
    
    }
     
     //}
    this.x += round(this.vel);
    this.y += this.grav;
    this.vel = constrain(this.vel, -4, 4);
    
    this.grav +=0.8;
    
    if(this.direction === 'right' && this.direction !== 'ladder') {
        this.vel ++;   
       
    }    
     if(this.direction === 'left' && this.direction !== 'ladder') {
        this.vel --;
        
    }
   
  if(this.vel > -1 && this.vel < 1) {
        this.direction = 'none';   
  } 
    
    // Implements friction
    if(this.vel > 0) {
        this.vel -= 0.3;
    } else if(this.vel < 0) {
        this.vel += 0.3;
    }   
    
    
    
    
      
     if(this.bowDraw >=blockSize/1.5) {
        this.bowDraw = 0;  
    }    
    
};
Wizard.prototype.kill = function() {
    //enemy kills player
    if(this.inRange&&this.bowDraw >=blockSize/1.6) {
        fireBalls.push(new fireBall(this.x+this.w/2, this.y+this.h/20));
       
        
    }    
    
    
    //player kills enemy
    if(checkIn(player1[0].x - player1[0].w, player1[0].y, player1[0].w*3, player1[0].h, this.x, this.y, this.w, this.h) && player1[0].direction !== 'none' && player1[0].weapon === 'sword') {
        this.health -= player1[0].armorLevel*blockSize/8;
        
    }    
     
    
    if(this.health <= 0  || this.oxygen <= 0) {
        
        this.alive = false;
        //coins.push(new Coin(this.x, this.y));
    }    
};    
Wizard.prototype.run = function() {
    if(this.alive) {
        this.draw();
        this.brain();
        this.kill();
    }
};    
Wizard.new = function(sx, sy, w, h) {
    var W;
    if (Wizard.freed.length > 0) {
        W = Wizard.freed.pop();
        W.init(sx, sy, w, h);
    } else {
        W = new Wizard(sx, sy, w, h);
    }
    return W;
};  


var Block = function(x, y, w, h, t) {
    this.x = x;
    this.y = y;
    this.h = h;
    this.w = w;
    this.t = t;
    
};    
Block.images = {};
Block.freed = [];
Block.prototype.draw = function() {
    if (Block.images[this.t] !== undefined) {
        image(Block.images[this.t], this.x,this.y,this.w,this.h);
    }
    else {
        stroke(69, 69, 69);
        strokeWeight(2);
        fill(0, 0, 0);
        rect(this.x, this.y, this.w, this.h);
        noStroke();
    }
};
Block.loadStone = function() {
    noStroke();
    fill(145, 145, 145);
    rect(0, 0, blockSize,blockSize);
    fill(100, 100, 100);
    ellipse(0 + blockSize/3, 0 + blockSize/5, blockSize/3,blockSize/4);
    ellipse(blockSize/1.6,  blockSize/2.5, blockSize/2,blockSize/5);
    arc(0, 0 + blockSize/1.5, blockSize/4, blockSize/5, 270, 450);
    arc(blockSize, blockSize/1.5, blockSize/2,blockSize/5, 90, 270);
    arc(blockSize/1.5, 0, blockSize/3, blockSize/2, 0, 180);
    arc(blockSize/1.5, blockSize, blockSize/3, blockSize/3, 180, 360);
    ellipse( blockSize/2.5, blockSize/1.4, blockSize/1.5, this.h/5);
            
}; 
Block.loadDirt = function() {
    fill(77, 62, 0);
    rect(0, 0,  blockSize,  blockSize);
    fill(100, 100, 100);
    ellipse(0 +  blockSize/3, 0+  blockSize/5,  blockSize/3,  blockSize/4);
    ellipse( blockSize/1.6,   blockSize/2.5,  blockSize/2,  blockSize/5);
    arc(0,   blockSize/1.5,  blockSize/4,  blockSize/5, 270, 450);
    arc( blockSize,  blockSize/1.5,  blockSize/2,  blockSize/5, 90, 270);
    arc( blockSize/1.5, 0, blockSize/3,  blockSize/2, 0, 180);
    arc(blockSize/1.5,  blockSize,  blockSize/3,  blockSize/3, 180, 360);
    ellipse( blockSize/2.5,  blockSize/1.4,  blockSize/1.5,  blockSize/5);  
};    
Block.loadGrass = function() {
    fill(77, 62, 0);
    rect(0, 0,  blockSize, blockSize);
    fill(0, 148, 47);
    triangle(0, 0,0,   blockSize/4,   blockSize/3, 0);
    triangle(  blockSize/10, 0,  blockSize/4,  blockSize/3,  blockSize/2,0);
    triangle(  blockSize/3, 0,  blockSize/1.5, 0,   blockSize/ 1.8,  blockSize/3.5);
    triangle(  blockSize, 0,  blockSize,   blockSize/3,   blockSize/2,0);  
};    
Block.loadBark = function() {
  noStroke();
    fill(125, 94, 0);
    rect( blockSize,  blockSize,  blockSize,  blockSize);
    fill(97, 74, 7);
    quad(0,0, 0,  blockSize,   blockSize/10,   blockSize/2,  blockSize/4, 0);
    quad( blockSize/10,  blockSize/2, 0,   blockSize/2,   blockSize/10,   blockSize,   blockSize/3,   blockSize);
    triangle( blockSize/2, blockSize,  blockSize/3,  blockSize/1.5, blockSize/2.5, 0 );
    quad( blockSize, 0, blockSize- blockSize/10, 0, blockSize/1.5, blockSize, blockSize - blockSize/10,  blockSize);
    triangle( blockSize/2, 0,  blockSize/1.3, 0, blockSize/1.5,  blockSize/1.5);
        
};
Block.loadLeaf = function() {
     noStroke();
    fill(0, 97, 11);
    rect(0, 0, blockSize, blockSize);
    fill(33, 122, 0);
    rect(0, 0, blockSize/2, blockSize, blockSize);
    ellipse( blockSize/2,blockSize/3, blockSize/3, blockSize/1.5);
    ellipse(blockSize - blockSize/5, blockSize- blockSize/4, blockSize/5, blockSize / 2);  
};
Block.loadBrick = function() {
            
    fill(71, 71, 71);
    rect(0, 0, blockSize, blockSize);
    fill(176, 135, 0);
    rect(blockSize/20, blockSize/20, blockSize/2-blockSize/20, blockSize/4-blockSize/20);
    fill(130, 93, 14);
    rect(blockSize/20+blockSize/2, blockSize/20, blockSize/2-blockSize/20, blockSize/4-blockSize/20);
    fill(122, 94, 0);
    rect(0, blockSize/20+(blockSize/2)/2, (blockSize/2-blockSize/20)/2, blockSize/4-blockSize/20);
    rect(blockSize-(blockSize/2-blockSize/20)/2, blockSize/20+(blockSize/2)/2, (blockSize/2-blockSize/20)/2, blockSize/4-blockSize/20);
    fill(148, 124, 30);
    rect(blockSize/20+(blockSize/2-blockSize/20)/2,blockSize/20+(blockSize/2)/2,blockSize/2-blockSize/20,blockSize/4-blockSize/20);
           
    pushMatrix();
    translate(0, blockSize/2);
    fill(176, 120, 0);
    rect(blockSize/20, blockSize/20, blockSize/2-blockSize/20, blockSize/4-blockSize/20);
    fill(161, 124, 23);
    rect(blockSize/20+blockSize/2, blockSize/20, blockSize/2-blockSize/20, blockSize/4-blockSize/20);
    fill(145, 117, 32);
    rect(0, blockSize/20+(blockSize/2)/2, (blockSize/2-blockSize/20)/2, blockSize/4-blockSize/20);
    rect(blockSize-(blockSize/2-blockSize/20)/2, blockSize/20+(blockSize/2)/2, (blockSize/2-blockSize/20)/2, blockSize/4-blockSize/20);
    fill(128, 104, 24);
    rect(blockSize/20+(blockSize/2-blockSize/20)/2,blockSize/20+(blockSize/2)/2,blockSize/2-blockSize/20,blockSize/4-blockSize/20);
    popMatrix();
            
};
Block.loadWood = function() {
   noStroke();
    fill(115, 88, 0);
    rect(0, 0, blockSize,blockSize);
    fill(99, 69, 0);
    triangle(0, 0, blockSize, 0, 0, blockSize/4);
    quad(0,  blockSize,  blockSize, blockSize, blockSize/1.5,  blockSize/1.5, blockSize/2, blockSize - blockSize/10);
    triangle(blockSize/10,  blockSize/2,  blockSize, blockSize/3, blockSize/2,  blockSize/1.5);
    triangle(0,  blockSize,  blockSize/5,blockSize, 0, blockSize-blockSize/3); 
    noStroke();
            
}; 
Block.loadBars = function() {
    noStroke();
    fill(145, 145, 145);
    rect(0, 0, blockSize,blockSize);
    fill(100, 100, 100);
    ellipse(0 + blockSize/3, 0 + blockSize/5, blockSize/3,blockSize/4);
    ellipse(blockSize/1.6,  blockSize/2.5, blockSize/2,blockSize/5);
    arc(0, 0 + blockSize/1.5, blockSize/4, blockSize/5, 270, 450);
    arc(blockSize, blockSize/1.5, blockSize/2,blockSize/5, 90, 270);
            
    arc(blockSize/1.5, 0, blockSize/3, blockSize/2, 0, 180);
    arc(blockSize/1.5, blockSize, blockSize/3, blockSize/3, 180, 360);
    ellipse( blockSize/2.5, blockSize/1.4, blockSize/1.5, this.h/5);
    pushMatrix();
    translate(0, 0);
    for(var i = 0; i < blockSize; i += blockSize/4) {
        noStroke();
        fill(92, 92, 92);
        rect(i, 0, blockSize/10, blockSize);
        fill(61, 61, 61);
        rect(i, 0, blockSize/25, blockSize);
    }    
    popMatrix();  
}; 
Block.loadMud = function() {
    fill(77, 62, 0);
    rect(0, 0,  blockSize,  blockSize);
    fill(61, 49, 0);
    ellipse(0 +  blockSize/3, 0+  blockSize/5,  blockSize/3,  blockSize/4);
    ellipse( blockSize/1.6,   blockSize/2.5,  blockSize/2,  blockSize/5);
    arc(0,   blockSize/1.5,  blockSize/4,  blockSize/5, 270, 450);
    arc( blockSize,  blockSize/1.5,  blockSize/2,  blockSize/5, 90, 270);
            
    arc( blockSize/1.5, 0, blockSize/3,  blockSize/2, 0, 180);
    arc(blockSize/1.5,  blockSize,  blockSize/3,  blockSize/3, 180, 360);
    ellipse( blockSize/2.5,  blockSize/1.4,  blockSize/1.5,  blockSize/5);  
};    
Block.loadMagma = function() {
    fill(66, 66, 66);
  rect(0, 0, blockSize, blockSize);
   fill(0, 0, 0);
    ellipse(0 +  blockSize/3, 0+  blockSize/5,  blockSize/3,  blockSize/4);
    ellipse( blockSize/1.6,   blockSize/2.5,  blockSize/2,  blockSize/5);
    arc(0,   blockSize/1.5,  blockSize/4,  blockSize/5, 270, 450);
    arc( blockSize,  blockSize/1.5,  blockSize/2,  blockSize/5, 90, 270);
            
    arc( blockSize/1.5, 0, blockSize/3,  blockSize/2, 0, 180);
    arc(blockSize/1.5,  blockSize,  blockSize/3,  blockSize/3, 180, 360);
    ellipse( blockSize/2.5,  blockSize/1.4,  blockSize/1.5,  blockSize/5);  
    noStroke();  
};    
Block.loadBlack = function() {
    noStroke();
    rectMode(CORNER);
    fill(0);
    rect(0, 0, blockSize, blockSize);
    fill(64, 64, 64, 50);
    rectMode(CENTER);
    for(var i = 0; i < blockSize/1.5; i ++) {
        rect(blockSize/2, blockSize/2, i, i);
    }
    rectMode(CORNER);
};    
Block.prototype.collide = function(player) {
    
    //collisions
    var px = player.x;
    var py = player.y;
    var pw = player.w;
    var ph = player.h;
    var pvel = player.vel;
    var  pOnGround = player.onDround;
    var pgrav = player.grav;
      
     if( py+ ph + pgrav/2> this.y &&py + pgrav/2<this.y+this.h &&px+pw +pvel> this.x &&px +pvel < this.x+this.w){
                
                if(px + pw> this.x + this.w/5 &&px < this.x + this.w - this.w/5) 
                {
                    //from the top
                    
                    if(pgrav > 0 && py + ph < this.y + this.h/2) {
                         player.onGround = true;
                         player.grav = 0;
                    }    
                    
                    
                    //from bottom
                    if(pgrav < 0 && py > this.y + this.h/2) {
                        player.grav = 1;   
                        player.y = this.y + this.h;
                    }  
                    
                    
                }
                
                
               if(py + ph> this.y + this.h/5 &&
                py < this.y + this.h - this.h/5) 
                {
                    //from left
                    if(pvel > 0 && px < this.x + this.w/2) {
                        player.vel = 0;
                    }
                    
                    //from right
                    if(pvel < 0 && px >this.x + this.w/2) {
                        player.vel = 0;
                    }    
                }
            }
            
      
}; 
Block.prototype.run = function() {
    this.draw();
    this.collide(player1[0]);
    
    for (var i in enemies) {
	    this.collide(enemies[i]);
    }
    for(var i in archers) {
        this.collide(archers[i]);   
    }    
    for(var i in wizards) {
        this.collide(wizards[i]);   
    }    
    for(var i in bosses) {
        this.collide(wizards[i]);   
    }    
};    
Block.new = function(x, y, w, h, t) {
    var b;
    if (Block.freed.length > 0) {
        b = Block.freed.pop();
        b.init(x, y, w, h, t);
    } else {
        b = new Block(x, y, w, h, t);
    }
    return b;
};  

var physicBlock = function(x, y, w, h, t) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.t = t;
    this.portalOpen = false;
    this.portalDoorW = this.w;
    this.fireRate= 0;
    this.crossBowRot = 0;
    this.grav = 0;
    this.falling = false;
    this.activated = false;
    this.flagY = this.h*1.5;
};   

physicBlock.freed = [];
physicBlock.images = {};
physicBlock.prototype.draw = function() {
    
        switch(this.t) {    
     case 'ladder':
     noStroke();
            fill(87, 83, 0);
            rect(this.x + this.w/10, this.y, this.w/10, this.h);
            fill(87, 83, 0);
            rect(this.x+this.w -  this.w/10 - this.w/10, this.y, this.w/10, this.h);
            
            rect(this.x+ this.w/10,this.y+ this.h/5, this.w - this.w/10 - this.w/10, this.h/10);
            rect(this.x+ this.w/10, this.y+ this.h/5+this.h/5, this.w - this.w/10 - this.w/10, this.h/10);
            rect(this.x+ this.w/10, this.y+ this.h/5+this.h/5+this.h/5, this.w - this.w/10 - this.w/10, this.h/10);
            rect(this.x+ this.w/10,this.y+ this.h/5+this.h/5+this.h/5+this.h/5, this.w - this.w/10 - this.w/10, this.h/10);
            rect(this.x + this.w/10, this.y + this.h/5+this.h/5+this.h/5+this.h/5 + this.h/5, this.w - this.w/10 - this.w/10, this.h/10);
            
break;
case 'leftWater':
   fill(0, random(255, 200), 200);
    rect(this.x, this.y, this.w, this.h);
              
break;   
case 'rightWater':
    fill(0, 0, random(255, 200), 200);
            rect(this.x, this.y, this.w, this.h);
break;    
case 'downWater':
    fill(0, 0, random(255, 200), 200);
    rect(this.x, this.y, this.w, this.h);
    break;
case 'fallingBlock':
    noStroke();
   fill(122, 75, 0);
   rect(this.x, this.y, this.w, this.h);
   fill(128, 107, 0);
   rect(this.x+this.w/10, this.y, this.w/10, this.h);
   fill(128, 92, 0);
   rect(this.x+this.w/10+this.w/10, this.y, this.w/10, this.h);
   fill(145, 116, 0);
   rect(this.x+this.w/10+this.w/10+this.w/10, this.y, this.w/10, this.h);
   fill(143, 91, 0);
   rect(this.x+this.w/10+this.w/10+this.w/10+this.w/10, this.y, this.w/10, this.h);
   fill(128, 107, 0);
   rect(this.x+this.w/10+this.w/10+this.w/10+this.w/10+this.w/10, this.y, this.w/10, this.h);
   fill(133, 98, 2);
   rect(this.x+this.w/10+this.w/10+this.w/10+this.w/10+this.w/10+this.w/10, this.y, this.w/10, this.h);
   fill(133, 107, 3);
   rect(this.x+this.w/10+this.w/10+this.w/10+this.w/10+this.w/10+this.w/10+this.w/10+this.w/10, this.y, this.w/10, this.h);
   fill(97, 97, 97);
   rect(this.x, this.y, this.w, this.h/10);
   rect(this.x, this.y+this.h-this.h/10, this.w, this.h/10);
   rect(this.x,this.y,this.w/10,this.h);
   rect(this.x+this.w-this.w/10,this.y,this.w/10,this.h);
break; 
case 'checkPoint':
    noStroke();
    fill(0, 0, 0);
    rect(this.x+this.w/2-this.w/20, this.y, this.w/10, this.h*2);
    
    fill(120, 0, 0);
    triangle(this.x+this.w/2, this.y+this.flagY, this.x+this.w/2, this.y+this.h/2+this.flagY, this.x+this.w, this.y+this.h/4+this.flagY);
    if(this.activated && this.flagY >0) {
        this.flagY --;   
        
    }
    
break;    
}
 
    
};
physicBlock.prototype.collide = function() {
      if(this.t === 'ladder') {
           
            if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, this.w, this.h)) {
                player1[0].vel = constrain(player1[0].vel, -2, 2);
                player1[0].grav = constrain(player1[0].grav, -3, 3);
                
                player1[0].onGround = true;
                player1[0].direction = 'ladder';
            }    
            
            
            for(var i in enemies) {
                
                var px = enemies[i].x;
            var py = enemies[i].y;
            var pw = enemies[i].w;
            var ph = enemies[i].h;
            var pvel = enemies[i].vel;
            var  pOnGround = enemies[i].onGround;
            var pgrav = enemies[i].grav;
              //player 1
             if( py+ ph + pgrav> this.y &&py + pgrav<this.y+this.h &&px+pw +pvel> this.x &&px +pvel < this.x+this.w){
                        
                        if(px + pw> this.x + this.w/5 &&px < this.x + this.w - this.w/5) 
                        {
                            //from the top
                            
                            if(pgrav > 0 && py + ph < this.y + this.h/2) {
                                 enemies[i].onGround = true;
                                 enemies[i].grav = 0;
                            }    
                            
                            
                            //from bottom
                            if(pgrav < 0 && py > this.y + this.h/2) {
                               enemies[i].grav = 1;   
                                enemies[i].y = this.y + this.h;
                            }  
                        
                        
                    }
                    
                    
                  
                }  
                    
        }    
        
        //archer collide
        for(var i in archers) {
                
                var px = archers[i].x;
            var py = archers[i].y;
            var pw = archers[i].w;
            var ph = archers[i].h;
            var pvel = archers[i].vel;
            var  pOnGround = archers[i].onGround;
            var pgrav = archers[i].grav;
              //player 1
             if( py+ ph + pgrav> this.y &&py + pgrav<this.y+this.h &&px+pw +pvel> this.x &&px +pvel < this.x+this.w){
                        
                        if(px + pw> this.x + this.w/5 &&px < this.x + this.w - this.w/5) 
                        {
                            //from the top
                            
                            if(pgrav > 0 && py + ph < this.y + this.h/2) {
                                 archers[i].onGround = true;
                                 archers[i].grav = 0;
                            }    
                            
                            
                            //from bottom
                            if(pgrav < 0 && py > this.y + this.h/2) {
                               archers[i].grav = 1;   
                                archers[i].y = this.y + this.h;
                            }  
                        
                        
                    }
                    
                    
                  
                }  
                    
        }    
        
        //wizards collide
        for(var i in wizards) {
                
                var px = wizards[i].x;
            var py = wizards[i].y;
            var pw = wizards[i].w;
            var ph =wizards[i].h;
            var pvel = wizards[i].vel;
            var  pOnGround = wizards[i].onGround;
            var pgrav = wizards[i].grav;
              //player 1
             if( py+ ph + pgrav> this.y &&py + pgrav<this.y+this.h &&px+pw +pvel> this.x &&px +pvel < this.x+this.w){
                        
                        if(px + pw> this.x + this.w/5 &&px < this.x + this.w - this.w/5) 
                        {
                            //from the top
                            
                            if(pgrav > 0 && py + ph < this.y + this.h/2) {
                                 wizards[i].onGround = true;
                                 wizards[i].grav = 0;
                            }    
                            
                            
                            //from bottom
                            if(pgrav < 0 && py > this.y + this.h/2) {
                              wizards[i].grav = 1;   
                                wizards[i].y = this.y + this.h;
                            }  
                        
                        
                    }
                    
                    
                  
                }  
                    
        }
        
        //bosses collide
        for(var i in bosses) {
                
                var px = bosses[i].x;
            var py = bosses[i].y;
            var pw = bosses[i].w;
            var ph =bosses[i].h;
            var pvel = bosses[i].vel;
            var  pOnGround = bosses[i].onGround;
            var pgrav =bosses[i].grav;
              //player 1
             if( py+ ph + pgrav> this.y &&py + pgrav<this.y+this.h &&px+pw +pvel> this.x &&px +pvel < this.x+this.w){
                        
                        if(px + pw> this.x + this.w/5 &&px < this.x + this.w - this.w/5) 
                        {
                            //from the top
                            
                            if(pgrav > 0 && py + ph < this.y + this.h/2) {
                                 bosses[i].onGround = true;
                                 bosses[i].grav = 0;
                            }    
                            
                            
                            //from bottom
                            if(pgrav < 0 && py > this.y + this.h/2) {
                             bosses[i].grav = 1;   
                                bosses[i].y = this.y + this.h;
                            }  
                        
                        
                    }
                    
                    
                  
                }  
                    
        }
               
     } 
     
     else if(this.t === 'leftWater') {
        
       
           
           if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, this.w, this.h)) {
                 player1[0].vel = constrain(player1[0].vel, -10, 3);  
                 if(!keys[RIGHT]) {
                     
                    player1[0].vel -= 0.4;   
                 } 
                 player1[0].onGround = true;
                 player1[0].grav = constrain(player1[0].grav,-3, 3);
                 player1[0].oxygen --;
            }    
            
           
     } 
     else if(this.t === 'rightWater') {
        
       
           
            if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, this.w, this.h)) {
                 player1[0].vel = constrain(player1[0].vel, -3, 10);  
                 if(!keys[LEFT]) {
                     
                    player1[0].vel += 0.4;   
                 } 
                 player1[0].onGround = true;
                 player1[0].grav = constrain(player1[0].grav, -3, 3);
                  player1[0].oxygen --;
            }    
           
           
           
     } 
      else if(this.t === 'downWater') {
        
       
           
            
            if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, this.w, this.h)) {
                 player1[0].grav = constrain(player1[0].grav, -2, 10);        
                 player1[0].vel = constrain(player1[0].vel, -3, 3);
                 player1[0].onGround = true;
                 if(!keys[UP]) {
                     
                    player1[0].grav += 0.6;   
                 } 
                 player1[0].oxygen --;
            }    
            
           for(var i in enemies) {
                
                var px = enemies[i].x;
            var py = enemies[i].y;
            var pw = enemies[i].w;
            var ph = enemies[i].h;
            var pvel = enemies[i].vel;
            var  pOnGround = enemies[i].onGround;
            var pgrav = enemies[i].grav;
              //player 1
             if( py+ ph + pgrav> this.y &&py + pgrav<this.y+this.h &&px+pw +pvel> this.x &&px +pvel < this.x+this.w){
                        
                    enemies[i].oxygen --;
                   
                }  
                    
        }  
           
     } 
    else if(this.t === 'fallingBlock') {
        
        if(this.falling) {
            this.grav ++;
        }
   
        this.y += round(this.grav);
        
        //collisions
        var px = player1[0].x;
        var py = player1[0].y;
        var pw = player1[0].w;
        var ph = player1[0].h;
        var pvel = player1[0].vel;
        var  pOnGround = player1[0].onGround;
        var pgrav = player1[0].grav;
        
        
         if( py+ ph + pgrav/2> this.y &&py + pgrav/2<this.y+this.h &&px+pw +pvel> this.x &&px +pvel < this.x+this.w){
                
                if(px + pw> this.x + this.w/5 &&px < this.x + this.w - this.w/5) 
                {
                    //from the top
                    
                    if(pgrav > 0 && py + ph < this.y + this.h/2) {
                         player1[0].onGround = true;
                         player1[0].grav = this.grav;
                         this.falling = true;
                    }    
                    
                    
                    //from bottom
                    if(pgrav < 0 && py > this.y + this.h/2) {
                        player1[0].grav = 1;   
                        player1[0].y = this.y + this.h;
                    }  
                    
                    
                }
                
                
               if(py + ph> this.y + this.h/5 &&
                py < this.y + this.h - this.h/5) 
                {
                    //from left
                    if(pvel > 0 && px < this.x + this.w/2) {
                        player1[0].vel = 0;
                    }
                    
                    //from right
                    if(pvel < 0 && px >this.x + this.w/2) {
                        player1[0].vel = 0;
                    }    
                }
            }
          
        
            
               
    }       else if(this.t === 'checkPoint') {
        if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h*2, this.x, this.y, this.w, this.h)) {
            this.activated = true;
            p1SpawnX = this.x;
            p1SpawnY = this.y;
            player1[0].spawnLocation = 2;
        }
        
          
          
    }    
};    
physicBlock.prototype.run = function() {
    this.collide();
    this.draw();  
};    

physicBlock.new = function(x, y, w, h, t) {
    var pb;
    if (physicBlock.freed.length > 0) {
        pb = physicBlock.freed.pop();
        pb.init(x, y, w, h, t);
    } else {
        pb = new physicBlock(x, y, w, h, t);
    }
    return pb;
}; 

var deathBlock = function(x, y, w, h, t) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.t = t;
};   

deathBlock.freed = [];

deathBlock.prototype.draw = function() {
     if(this.t === 'fire') {
            fill(255, 0, 0);
            
            triangle(this.x, this.y + this.h, this.x + this.w/2, cos(frameCount*50)*5+this.y, this.x + this.w, this.y +this.h);
            
            fill(255, 153, 0);
            
            triangle(this.x + this.w/10, this.y + this.h, this.x + this.w/2, cos(frameCount*50)*5+this.y+this.h/10, this.x + this.w - this.w/10, this.y +this.h);
            
            fill(255, 242, 0);
            
            triangle(this.x + this.w/10+this.w/4, this.y + this.h, this.x + this.w/2, cos(frameCount*50)*5+this.y+this.h/3, this.x + this.w - this.w/10-this.w/4, this.y +this.h);
            
             
               
     } 
     else if(this.t === 'spike') {
        noStroke();
        fill(0);
        triangle(this.x + this.w/3, this.y + this.h, this.x + this.w-this.w/3, this.y + this.h, this.x + this.w/2, this.y);
        fill(79, 79, 79);
        triangle(this.x, this.y+this.h, this.x+this.w/2, this.y + this.h/1.5, this.x + this.w, this.y + this.h);
        ellipse(this.x + this.w/2, this.y + this.h/1.5, this.w/4, this.h/4);
        fill(54, 54, 54);
        triangle(this.x + this.w/3, this.y + this.h, this.x + this.w/2, this.y + this.h, this.x + this.w/2, this.y);
        triangle(this.x, this.y+this.h, this.x+this.w/2, this.y + this.h/1.5, this.x + this.w/2, this.y + this.h);
        arc(this.x + this.w/2, this.y + this.h/1.5, this.w/4, this.h/4,180, 270);
     }     
     else if(this.t === 'lava') {
        for(var i = this.x; i < this.x + this.w; i += this.w/10) {
           for(var j = this.y; j < this.y + this.h; j += this.h/10) {
            fill(random(200, 255), 0, 0);
            rect(i, j, this.w/10, this.h/10);
            }   
        }    
        rect(random(this.x, this.x+this.w-this.w/10), this.y-this.h/10, this.w/10, this.h/10);
        rect(random(this.x, this.x+this.w-this.w/10), this.y-this.h/10, this.w/10, this.h/10);
        rect(random(this.x, this.x+this.w-this.w/10), this.y-this.h/10, this.w/10, this.h/10);
        rect(random(this.x, this.x+this.w-this.w/10), this.y-this.h/10, this.w/10, this.h/10);
        rect(random(this.x, this.x+this.w-this.w/10), this.y-this.h/10, this.w/10, this.h/10);
     } 
      if(checkIn(player1[0].x, player1[0].y, player1[0].w, player1[0].h, this.x, this.y, this.w, this.h)) {
                player1[0].health -=10;
            }    
            
        for(var i in enemies) {
        if(checkIn(enemies[0].x, enemies[0].y, enemies[0].w, enemies[0].h, this.x, this.y, this.w, this.h)) {
                enemies[0].health -=10;
            }    
        }   
        for(var i in archers) {
        if(checkIn(archers[0].x, archers[0].y, archers[0].w, archers[0].h, this.x, this.y, this.w, this.h)) {
                archers[0].health -=10;
            }    
        }    
         for(var i in bosses) {
        if(checkIn(bosses[0].x, bosses[0].y, bosses[0].w, bosses[0].h, this.x, this.y, this.w, this.h)) {
                bosses[0].health -=10;
            }    
        }   
        for(var i in wizards) {
        if(checkIn(wizards[0].x, wizards[0].y, wizards[0].w, wizards[0].h, this.x, this.y, this.w, this.h)) {
                wizards[0].health -=10;
            }    
        }    
};

deathBlock.prototype.run = function() {
    this.draw();  
};    
deathBlock.new = function(x, y, w, h, t) {
    var db;
    if (deathBlock.freed.length > 0) {
        db = deathBlock.freed.pop();
        db.init(x, y, w, h, t);
    } else {
        db = new deathBlock(x, y, w, h, t);
    }
    return db;
}; 




var Sprite = function(x, y, w, h, t) {
    this.x = x;
    this.y = y;
    this.h = h;
    this.w = w;
    this.t = t;
    
};    
Sprite.freed = [];
Sprite.images = {};
Sprite.prototype.draw = function() {
 if (Sprite.images[this.t]!== undefined) {
        image(Sprite.images[this.t], this.x,this.y,this.w,this.h);
        
        
       }
    else {
        stroke(0, 0, 0);
        strokeWeight(2);
        fill(99, 99, 99);
        rect(this.x, this.y, this.w, this.h);
        noStroke();
    }
};
Sprite.loadStone = function() {
    noStroke();
    fill(145, 145, 145);
    rect(0, 0, blockSize,blockSize);
    fill(100, 100, 100);
    ellipse(0 + blockSize/3, 0 + blockSize/5, blockSize/3,blockSize/4);
    ellipse(blockSize/1.6,  blockSize/2.5, blockSize/2,blockSize/5);
    arc(0, 0 + blockSize/1.5, blockSize/4, blockSize/5, 270, 450);
    arc(blockSize, blockSize/1.5, blockSize/2,blockSize/5, 90, 270);
    arc(blockSize/1.5, 0, blockSize/3, blockSize/2, 0, 180);
    arc(blockSize/1.5, blockSize, blockSize/3, blockSize/3, 180, 360);
    ellipse( blockSize/2.5, blockSize/1.4, blockSize/1.5, this.h/5);
    fill(0, 0, 0, 100);
    rect(0, 0, blockSize, blockSize);
}; 
Sprite.loadDirt = function() {
    fill(77, 62, 0);
    rect(0, 0,  blockSize,  blockSize);
    fill(100, 100, 100);
    ellipse(0 +  blockSize/3, 0+  blockSize/5,  blockSize/3,  blockSize/4);
    ellipse( blockSize/1.6,   blockSize/2.5,  blockSize/2,  blockSize/5);
    arc(0,   blockSize/1.5,  blockSize/4,  blockSize/5, 270, 450);
    arc( blockSize,  blockSize/1.5,  blockSize/2,  blockSize/5, 90, 270);
    arc( blockSize/1.5, 0, blockSize/3,  blockSize/2, 0, 180);
    arc(blockSize/1.5,  blockSize,  blockSize/3,  blockSize/3, 180, 360);
    ellipse( blockSize/2.5,  blockSize/1.4,  blockSize/1.5,  blockSize/5);  
    fill(0, 0, 0, 100);
    rect(0, 0, blockSize, blockSize);
};    
Sprite.loadGrass = function() {
    fill(77, 62, 0);
    rect(0, 0,  blockSize, blockSize);
    fill(0, 148, 47);
    triangle(0, 0,0,   blockSize/4,   blockSize/3, 0);
    triangle(  blockSize/10, 0,  blockSize/4,  blockSize/3,  blockSize/2,0);
    triangle(  blockSize/3, 0,  blockSize/1.5, 0,   blockSize/ 1.8,  blockSize/3.5);
    triangle(  blockSize, 0,  blockSize,   blockSize/3,   blockSize/2,0); 
    fill(0, 0, 0, 100);
    rect(0, 0, blockSize, blockSize);
};    
Sprite.loadBark = function() {
  noStroke();
    fill(125, 94, 0);
    rect( blockSize,  blockSize,  blockSize,  blockSize);
    fill(97, 74, 7);
    quad(0,0, 0,  blockSize,   blockSize/10,   blockSize/2,  blockSize/4, 0);
    quad( blockSize/10,  blockSize/2, 0,   blockSize/2,   blockSize/10,   blockSize,   blockSize/3,   blockSize);
    triangle( blockSize/2, blockSize,  blockSize/3,  blockSize/1.5, blockSize/2.5, 0 );
    quad( blockSize, 0, blockSize- blockSize/10, 0, blockSize/1.5, blockSize, blockSize - blockSize/10,  blockSize);
    triangle( blockSize/2, 0,  blockSize/1.3, 0, blockSize/1.5,  blockSize/1.5);
    fill(0, 0, 0, 100);   
    rect(0, 0, blockSize, blockSize); 
};
Sprite.loadLeaf = function() {
     noStroke();
    fill(0, 97, 11);
    rect(0, 0, blockSize, blockSize);
    fill(33, 122, 0);
    rect(0, 0, blockSize/2, blockSize, blockSize);
    ellipse( blockSize/2,blockSize/3, blockSize/3, blockSize/1.5);
    ellipse(blockSize - blockSize/5, blockSize- blockSize/4, blockSize/5, blockSize / 2);  
    fill(0, 0, 0, 100);
    rect(0, 0, blockSize, blockSize);
};
Sprite.loadBrick = function() {
            
    fill(71, 71, 71);
    rect(0, 0, blockSize, blockSize);
    fill(176, 135, 0);
    rect(blockSize/20, blockSize/20, blockSize/2-blockSize/20, blockSize/4-blockSize/20);
    fill(130, 93, 14);
    rect(blockSize/20+blockSize/2, blockSize/20, blockSize/2-blockSize/20, blockSize/4-blockSize/20);
    fill(122, 94, 0);
    rect(0, blockSize/20+(blockSize/2)/2, (blockSize/2-blockSize/20)/2, blockSize/4-blockSize/20);
    rect(blockSize-(blockSize/2-blockSize/20)/2, blockSize/20+(blockSize/2)/2, (blockSize/2-blockSize/20)/2, blockSize/4-blockSize/20);
    fill(148, 124, 30);
    rect(blockSize/20+(blockSize/2-blockSize/20)/2,blockSize/20+(blockSize/2)/2,blockSize/2-blockSize/20,blockSize/4-blockSize/20);
           
    pushMatrix();
    translate(0, blockSize/2);
    fill(176, 120, 0);
    rect(blockSize/20, blockSize/20, blockSize/2-blockSize/20, blockSize/4-blockSize/20);
    fill(161, 124, 23);
    rect(blockSize/20+blockSize/2, blockSize/20, blockSize/2-blockSize/20, blockSize/4-blockSize/20);
    fill(145, 117, 32);
    rect(0, blockSize/20+(blockSize/2)/2, (blockSize/2-blockSize/20)/2, blockSize/4-blockSize/20);
    rect(blockSize-(blockSize/2-blockSize/20)/2, blockSize/20+(blockSize/2)/2, (blockSize/2-blockSize/20)/2, blockSize/4-blockSize/20);
    fill(128, 104, 24);
    rect(blockSize/20+(blockSize/2-blockSize/20)/2,blockSize/20+(blockSize/2)/2,blockSize/2-blockSize/20,blockSize/4-blockSize/20);
    popMatrix();
    fill(0, 0, 0, 100);  
    rect(0, 0, blockSize, blockSize);      
};
Sprite.loadWood = function() {
   noStroke();
    fill(115, 88, 0);
    rect(0, 0, blockSize,blockSize);
    fill(99, 69, 0);
    triangle(0, 0, blockSize, 0, 0, blockSize/4);
    quad(0,  blockSize,  blockSize, blockSize, blockSize/1.5,  blockSize/1.5, blockSize/2, blockSize - blockSize/10);
    triangle(blockSize/10,  blockSize/2,  blockSize, blockSize/3, blockSize/2,  blockSize/1.5);
    triangle(0,  blockSize,  blockSize/5,blockSize, 0, blockSize-blockSize/3); 
    noStroke();
    fill(0, 0, 0, 100); 
    rect(0, 0, blockSize, blockSize);       
}; 
Sprite.loadBars = function() {
    noStroke();
    fill(145, 145, 145);
    rect(0, 0, blockSize,blockSize);
    fill(100, 100, 100);
    ellipse(0 + blockSize/3, 0 + blockSize/5, blockSize/3,blockSize/4);
    ellipse(blockSize/1.6,  blockSize/2.5, blockSize/2,blockSize/5);
    arc(0, 0 + blockSize/1.5, blockSize/4, blockSize/5, 270, 450);
    arc(blockSize, blockSize/1.5, blockSize/2,blockSize/5, 90, 270);
            
    arc(blockSize/1.5, 0, blockSize/3, blockSize/2, 0, 180);
    arc(blockSize/1.5, blockSize, blockSize/3, blockSize/3, 180, 360);
    ellipse( blockSize/2.5, blockSize/1.4, blockSize/1.5, this.h/5);
    pushMatrix();
    translate(0, 0);
    for(var i = 0; i < blockSize; i += blockSize/4) {
        noStroke();
        fill(92, 92, 92);
        rect(i, 0, blockSize/10, blockSize);
        fill(61, 61, 61);
        rect(i, 0, blockSize/25, blockSize);
    }    
    popMatrix(); 
    fill(0, 0, 0, 100);
    rect(0, 0, blockSize, blockSize);
}; 
Sprite.loadMud = function() {
    fill(77, 62, 0);
    rect(0, 0,  blockSize,  blockSize);
    fill(61, 49, 0);
    ellipse(0 +  blockSize/3, 0+  blockSize/5,  blockSize/3,  blockSize/4);
    ellipse( blockSize/1.6,   blockSize/2.5,  blockSize/2,  blockSize/5);
    arc(0,   blockSize/1.5,  blockSize/4,  blockSize/5, 270, 450);
    arc( blockSize,  blockSize/1.5,  blockSize/2,  blockSize/5, 90, 270);
            
    arc( blockSize/1.5, 0, blockSize/3,  blockSize/2, 0, 180);
    arc(blockSize/1.5,  blockSize,  blockSize/3,  blockSize/3, 180, 360);
    ellipse( blockSize/2.5,  blockSize/1.4,  blockSize/1.5,  blockSize/5);  
    fill(0, 0, 0, 100);
    rect(0, 0, blockSize, blockSize);
};    
Sprite.loadMagma = function() {
    fill(66, 66, 66);
  rect(0, 0, blockSize, blockSize);
   fill(0, 0, 0);
    ellipse(0 +  blockSize/3, 0+  blockSize/5,  blockSize/3,  blockSize/4);
    ellipse( blockSize/1.6,   blockSize/2.5,  blockSize/2,  blockSize/5);
    arc(0,   blockSize/1.5,  blockSize/4,  blockSize/5, 270, 450);
    arc( blockSize,  blockSize/1.5,  blockSize/2,  blockSize/5, 90, 270);
            
    arc( blockSize/1.5, 0, blockSize/3,  blockSize/2, 0, 180);
    arc(blockSize/1.5,  blockSize,  blockSize/3,  blockSize/3, 180, 360);
    ellipse( blockSize/2.5,  blockSize/1.4,  blockSize/1.5,  blockSize/5);  
    noStroke();
    fill(0, 0, 0, 100);
    rect(0, 0, blockSize, blockSize);
};   
Sprite.prototype.run = function() {
    this.draw();  
};    
Sprite.new = function(x, y, w, h, t) {
    var s;
    if (Sprite.freed.length > 0) {
        s = Sprite.freed.pop();
        s.init(x, y, w, h, t);
    } else {
        s = new Sprite(x, y, w, h, t);
    }
    return s;
}; 

//backgrounds{
var drawRange = function() {
    
    var incAmount = 0.01;
  
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(156, 156, 156);
            var y = map(n, 0, 1, 0, height+height/3);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
           var n = noise(t);
            noStroke();
            fill(122, 122, 122);
            var y = map(n, 0, 1, 0, height+height/4);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(97, 97, 97);
            var y = map(n, 0, 1, 0, height);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(54, 102, 65);
            var y = map(n, 0, 1, 0, height/1.4);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(0, 97, 24);
            var y = map(n, 0, 1, 0, height/2);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(0, 87, 20);
            var y = map(n, 0, 1, 0, height/5);
            rect(t*100, height-y, 1, y);
        }
    
};
var drawRange = function() {
    
    var incAmount = 0.01;
  
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(156, 156, 156);
            var y = map(n, 0, 1, 0, height+height/3);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
           var n = noise(t);
            noStroke();
            fill(122, 122, 122);
            var y = map(n, 0, 1, 0, height+height/4);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(97, 97, 97);
            var y = map(n, 0, 1, 0, height);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(54, 102, 65);
            var y = map(n, 0, 1, 0, height/1.4);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(0, 97, 24);
            var y = map(n, 0, 1, 0, height/2);
            rect(t*100, height-y, 1, y);
        }
        for (var t = 0; t < incAmount*width; t += incAmount) {
            var n = noise(t);
            noStroke();
            fill(0, 87, 20);
            var y = map(n, 0, 1, 0, height/5);
            rect(t*100, height-y, 1, y);
        }
    
};
var star = function(x, y, s) {
    fill(random(0, 255), 255, 255);
    
    noStroke();
    ellipse(x, y, s/3, s*2);
    ellipse(x, y, s*2, s/3);
};
var drawStars = function() {
    for(var i = 0; i < 500; i ++){
        star(random(0, width), random(0, height/1.5), random(2, 5), color(random(0, 255), 255, 255));
    }
};   
var lantern = function(x, y, s) {
  for(var i = 0; i<s*3; i+=s/15) {
        noStroke();
        fill(255, 255, 0, 3);
        ellipse(x, y, i, i);
  } 
  
  fill(255, cos(frameCount*10)*200, 0);
  triangle(x-s/20, y+s/4-s/10, x+s/20, y+s/4-s/10, x, y+cos(frameCount*10)*5);
  fill(255, cos(frameCount*10)*200+100, 0);
  triangle(x-s/30, y+s/4-s/10, x+s/30, y+s/4-s/10, x, y+cos(frameCount*10)*5+s/20);
  
  fill(255, 255, 0, 100);
   noStroke();
   rect(x-s/10, y-s/4, s/10+s/10, s/4+s/4);
  fill(0);
  rect(x-s/10, y-s/4, s/30, s/2);
  rect(x+s/10-s/30, y-s/4, s/30, s/2);
  rect(x-s/10, y-s/4,s/10+s/10, s/10);
  rect(x-s/10, y+s/4-s/10,s/10+s/10, s/10);
  
  fill(0);
  ellipse(x, y-s/3, s/10, s/20);
  noFill();
  stroke(0);
  strokeWeight(s/40);
  arc(x, y-s/10, s/7, s/7, 180, 360);
   arc(x, y-s/4, s/7, s/7, 180, 360);
   
   
};    
var Tree = function(x, y, s) {
        
            pushMatrix();
            translate(x, y);
            scale(s);
            noStroke();
            fill(138, 131, 0);
            rect(0, 0, -1, 2);
            fill(181, 169, 0);
            rect(0, 0, 1, 2);
            fill(0, 107, 12);
            triangle(-4, 0, 4, 0, 0, -6);
            fill(0, 54, 5);
            triangle(-4, 0, 3, 0, -1, -2);
            fill(0, 138, 14);
            triangle(-3, -3, 3, -3, 0,-7);
            fill(0, 110, 7);
            triangle(-3, -3, 3, -3, -1, -5);
            
            popMatrix();
      
};
var drawForest = function(x, y, w, h) {
    for(var i =0; i < width+10; i+=50) {
        
        Tree(i, 360, 1); 
        Tree(i+40, 360, 0.1);
        Tree(i+10, 370, 1.2);
        Tree(i+15, 355, 0.5);
        Tree(i+30, 365, 1);
        
        Tree(i, 380, 1.5); 
        Tree(i+40, 380, 0.5);
        Tree(i+10, 390, 1.7);
        Tree(i+15, 375, 1);
        Tree(i+30, 385, 1.5);
        
        Tree(i+40, 400, 1);
        Tree(i+10, 410, 2.2);
        Tree(i+15, 395, 1.5);
        Tree(i+30, 405, 2);
        
        
        Tree(i, 420, 2.5); 
        Tree(i+40, 420, 1.5);
        Tree(i+10, 430, 2.7);
        Tree(i+15, 415, 2);
        Tree(i+30, 425, 2.5);
        
   } 
    
};    
var pearl = function(x, y, s) {
    pushMatrix();
    translate(x, y);
    scale(s);
    
    noStroke();
    fill(130, 130, 130);
    ellipse(0, 0, 50, 50);
    for(var i = 100; i >0; i --) {
           fill(158, 255, 239, 2);
           
           ellipse(0, 0, i, i);
           noFill();
    }
    for(var i = 50; i >0; i --) {
           fill(255, 255, 255, 20);
           
           ellipse(0, 0, i, i);
           noFill();
    }
    popMatrix();
}; 
var castleMap = [
"                    ",
"                    ",
"                    ",
"                    ",
"                    ",
"                    ",
"                    ",
"                    ",
"                    ",
"                    ",
"                                        s s s",
"s s             s s s s                 sssss    s",
"ssss s s s      sssssss                 sbsbs s ss",
"sbssssssss      sbsbsbs                 ssssssssss",
"sssssssssss s s sssssss s s s           sbsbssssss",
"sbsssbsbssssssssssssssssssssss s s s s ssssssssss",
"sssssssssssssssssssbsssssssssssssssssssssbsbsss",
"sbsssbsbssssbssbsssbsssbssbsssssssssssssssssss",
"sssssssssssssssssssbsssssssssssbssbssbsssbsbs",
"sbsssssssssssssssssbsssssssssssssssssssssssss",
"ssssssssss      sss sss      ssssssssssssssss",
"sss                                     sssss",
]; 
var castle1 = [
'',    
'',
'',
'',
's s s s',
'sssssss',
'sbsbsbs',
'sssssss',
'sbsbsbs',
'sssssss',
'sbsbsbs',
'sssssss',
'sbsbsbs',
'sssssss',
'sbsbsbs',
'sssssss',
'sbsbsbs',
'sssssss',
'sbsbsbs',
'sssssss',
'sssbsbs',
'sssssss',
'  sssbss',
'    sssss',
'     ssbss',
'      sssss   s s s',
'       ssbss  sssss',
'        sssss sbsbs',
'         ssbsssssss',
'          sssssbsbs',
'           ssbsssss',
'            sssssbs',
'             ssbsss',
'             ssssss',
'              sssbss',
'               sssss',
'                ssss',
'                ssss',
'                 sss',
'                  ss',
'                   s',
'                   s',
'',
];
var tower1 = [
's   s   s',
'ss sss ss',
'sssssssss',
'sbsbsbsbs',
'sssssssss',
'sbsbsbsbs',
'sssssssss',
'sbsbsbsbs',
'sssssssss',
'sbsbsbsbs',
'sssssssss',
'sbsbsbsbs',
'sssssssss',
'sbsbsbsss',
'ssssssss',
'sbssss',
'ssss',
'ss',

    
];
var wall1 = [
'                                  s s s s',
'                          s s s sssssssss',
'                    s s sssssssssbsbsbsbs',
'             s s s ssssssbsbsbsbsssssssss',
'     s s s ssssssssssbsbsssssssssssssssss',
'   ssssssssssbsbsbsbsssssssssssssss',
' ssssbsbsbsbssssssssssssssss',
'sssbssssssssssssssssssss',
'sbsssssssssssssssss',
'sssssssssssssss',
'sssssssssss',
'ssssssss',
'ssss',
's'
];
var fortress1 = [
's  s        s  s        s  s        s  s        s  s       ',
'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',        
    
    ];
var fortress2 = [
'                          s',  
'                         sss',
'                       s sss s',
' s  s        s  s    s sssbsss s    s  s        s  s       ', 'ssssssssssssssssssssssssssbsssssssssssssssssssssssssssssssss',        
    
    ];
var city1 = [
'                                                          ',
'                                       c                  ',
'                                      cpc                  ',
'                                      pgp    c            ',
'                           gcgcgcg    ppp  c g c          ',
'                           gpgpgpg    pgp  ggg g          ',
'                           gdggggg    ppp  ggggg          ',
'                                   g  pgp  gdggg          ',
'                                c  d  pdp    ggd          ',
'                                gc    ccccc               ',
' c                          cc  dg dg gdgdg               ',
'cgc                     c   gg c   ccc   ccc   c c        ',
'ggg   c c c            gdg  gg d d gpgcccgpg   g d     cgc',
'gdg   pgdgp c  pgp          gg  cc ggggpgggg   dcc     gpg',
'     c c    g  pgp g gggggg gd  gd gpgpbpgpg   cdg pgp gpg',
'     dgd dg d  pdp d dddddd     c       c    g g c gdg gpg',
' pgp       ccc   ccc c          d c    gdg   d g d     gpg',
' pdp  dcd  pgp   pgp d ccc c g c  g        c   d    cc gdg',
'           pgpcccpgp   pgp ggdgg  g   gpg gdg c    cggc   ',
' c     g   pgpgggpgp   pdp        g   gdg     g    gggg   ',
'cpc  gpgpg ppppbpppp             gd ccccccccc g    ggdg   ',
'pgp  ppdpp                       d  pgpgpgpgp d           ',
'pgpcccccccccc              ccc      pdpdpdpdp    g        ',
'gdgdgdgdgdgdg              gpg                   d        ',
'                           gdg                            ',

    
    
];    
var city2 = [
'             ccccc                                  ',
'           ccgggggccc                               ',
'           gggpggpggp                               ',
'           pgddpddgpp                               ',
'           pgp pp gpp                               ',
'           pp  p  pp      c                     ',
'                       cccgccc                  ',
'                       pppgppp                  ',
'                       gggdggg                  ',
'                                                    ',
'                                                    ',
];    
var wall2 = [
'scscscscscscscscscscscscscscscscscscscscscscscscscscscscsc', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss', 'ssssssss sssssssss sssssssss sssssssss sssssssss sssssssss', 'sssssssspssssssssspssssssssspssssssssspssssssssspsssssssss', 'ssssssssgsssssssssgsssssssssgsssssssssgsssssssssgsssssssss', 'sssssssspssssssssspssssssssspssssssssspssssssssspsssssssss', 'ssssssss sssssssss sssssssss sssssssss sssssssss sssssssss', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',  
];
var wall3 = [
'cscscscscscscscscscscscscscscscscscscscscscscscscscscscscs', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss', 'ssssssss sssssssss sssssssss sssssssss sssssssss sssssssss', 'sssssssspssssssssspssssssssspssssssssspssssssssspsssssssss', 'ssssssssgsssssssssgsssssssssgsssssssssgsssssssssgsssssssss', 'sssssssspssssssssspssssssssspssssssssspssssssssspsssssssss', 'ssssssss sssssssss sssssssss sssssssss sssssssss sssssssss', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss', 'ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss',  
];
var gateHouse1 = [
'scscscscs',
'sssssssss',
'sgsgsgsgs',
'sssssssss',
'sgsssssgs',
'ssssgssss',
'sgsssssgs',
'sssssssss',
'sgs   sgs',
'sss   sss',
'sgs   sgs',
'sss   sss',
'sgs   sgs',
'sss   sss',
'sgs   sgs',
'sss   sss',
'sgs   sgs',
];    
var drawCastleMap = function(x, y,array) {
    pushMatrix();
    translate(x, y);
  for(var i =0; i <array.length; i++) {
      for(var j =0; j <array[i].length; j++) {
            switch(array[i][j]) {
                case 's':
                    noStroke();
                    fill(97, 97, 97);
                    rect(j*5, i*5, 5, 5);
                    stroke(30, 30, 30);
                    strokeWeight(1);
                    noFill();
                    arc(j*5+3, i*5+2, 4, 4, 90, 180);
                    noStroke();
                break;
                case 'p':
                    noStroke();
                    fill(97, 97, 97);
                    rect(j*5, i*5, 5, 5);
                    stroke(30, 30, 30);
                break;    
                case 'g':
                    noStroke();
                    fill(97, 97, 97);
                    rect(j*5, i*5, 5, 5);
                    fill(0);
                    ellipse(j*5+2.5, i*5+2.5, 2, 2);
                break;    
                case 'd':
                    noStroke();
                    fill(97, 97, 97);
                    rect(j*5, i*5, 5, 5);
                    fill(0);
                    rect(j*5+1.5, i*5+2, 2, 4);
                break;    
                case 'c':
                    noStroke();
                    fill(97, 97, 97);
                    rect(j*5, i*5+3, 1, 2);
                    rect(j*5+4, i*5+3, 1, 2);
                    rect(j*5+2, i*5+3, 1, 2);
                break;    
                 case 'b':
                    noStroke();
                    fill(0, 0, 0);
                    rect(j*5, i*5, 5, 5);
                break; 
                 case 'r':
                    noStroke();
                    fill(255, 0, 0);
                    rect(j*5, i*5, 5, 5);
                break;
                case 'y':
                    noStroke();
                    fill(255, 242, 0);
                    rect(j*5, i*5, 5, 5);
            break;       
            case 'o':
                    noStroke();
                    fill(255, 153, 0);
                    rect(j*5, i*5, 5, 5);
            break;        
            }    
    }
  } 
  noStroke();
  popMatrix();
};    
var drawCastle = function(x, y) {
    pushMatrix();
    translate(x, y);
  for(var i =0; i <castleMap.length; i++) {
      for(var j =0; j <castleMap[i].length; j++) {
            switch(castleMap[i][j]) {
                case 's':
                    noStroke();
                    fill(97, 97, 97);
                    rect(j*5, i*5, 5, 5);
                    stroke(30, 30, 30);
                    strokeWeight(1);
                    noFill();
                    arc(j*5+3, i*5+2, 4, 4, 90, 180);
                break;
                 case 'b':
                    noStroke();
                    fill(0, 0, 0);
                    rect(j*5, i*5, 5, 5);
                break; 
                 case 'r':
                    noStroke();
                    fill(125, 0, 19);
                    rect(j*5, i*5, 5, 5);
                break; 
            }    
    }
  } 
  popMatrix();
};  
var leaf = function(x, y, s) {
    pushMatrix();
    translate(x, y);
    scale(s);
    noStroke();
    fill(9, 105, 0);
    ellipse(0, 0, 50, 50);
    fill(0, 97, 0);
    ellipse(-40, 20, 20, 10);
    fill(0, 107, 2);
    ellipse(60, 20, 40, 30);
    fill(0, 105, 12);
    ellipse(10, -40, 30, 50);
    fill(16, 97, 0);
    ellipse(-20, 30, 40, 20);
    noFill();
    stroke(10, 122, 0);
    strokeWeight(4);
    arc(0, 0, 45, 45, 270, 360);
    arc(-40, 20, 15, 5, 270, 360);
    arc(60, 20, 35, 25, 270, 360);
    arc(10, -40, 25, 45, 270, 360);
    arc(-20, 30, 35, 15, 270, 360);
    popMatrix();
};    
var tree = function(x, y, s) {
    pushMatrix();
    translate(x, y);
    scale(s);
    
    //body
    noStroke();
    fill(115, 96, 0);
    rect(-20, -100, 40, 200);  
    
    stroke(115, 96, 0);
    strokeWeight(10);
    noFill();
    arc(-40, 55, 50, 90, 0, 90);
    line(-15, 90, -30, 110);
    bezier(15, 50, 25, 90, 35, 95, 50, 110); 
    line(15, 90, 30, 115);
    line(10, 90, 15, 116);
    line(5, 90, 7, 120);
    arc(-20, 100, 30, 30, 0, 50);
    
    //bark
    noFill();
    stroke(112, 75, 0);
    strokeWeight(3);
    bezier(-20, -50, 10, -30, 7, 0, 0, 20); 
    bezier(-20, 0, -18, 10, -10, 20, -20, 30);
    bezier(20, 10, 5, 20, -5, 20, -20, 50);
    bezier(20, 30, 10, 35, -10, 40, -10, 80);
    bezier(20, -50, 15, -30, 10, -20, 20, -10);
    
    //leaves
    leaf(0, -100, 1);
    leaf(-40, -90, 0.8);
    popMatrix();
    
    
};  
var background1 = function() {
       background(13, 3, 148);
      drawStars();
       
       drawRange();
      
       
        //moon
        for(var w = 1; w < 150; w +=1) {
            fill(196, 196, 196, 6);
            ellipse(450, 100, w, w); 
            fill(196, 196, 196);
            ellipse(450, 100, 85, 85);
           
            
            
        }  
};    
var background2 = function() {
    background(13, 3, 184);
    drawStars();
   
   
   //mountains
   fill(31, 31, 31);
   noStroke();
   bezier(300, 400, 400, 300, 500, 250, 600, 300);
   triangle(300, 400, 600, 299, 600, 400);
   
   //far castle{
    fill(31, 31, 31);
    rect(450, 270, 50, 50);
    rect(505, 270, 50, 50);
    rect(450, 270, 105, 5);
    for(var i =450; i < 555; i+= 5.1) {
        rect(i, 266, 3, 5);   
    }    
    rect(460, 240, 8, 30);
    rect(470, 240, 8, 30);
    rect(480, 240, 8, 30);
    rect(460, 240, 28, 5);
    rect(460, 250, 28, 5);
    rect(460, 260, 28, 5);
    rect(460, 270, 28, 5);
    rect(460, 235, 3, 5);
    rect(465, 235, 3, 5);
    rect(470, 235, 3, 5);
    rect(475, 235, 3, 5);
    rect(480, 235, 3, 5);
    rect(485, 235, 3, 5);

   //}
   
       //ground
       fill(0, 0, 0);
       noStroke();
      bezier(0, 400, 200, 300, 400, 400, 600, 400);
       rect(0, 399, width, 301);
       
       // close castle{
       noStroke();
       fill(0, 0, 0);
       rect(100, 300, 45, 100);
       rect(150, 300, 45, 30);
       rect(200, 300, 45, 30);
       rect(250, 300, 45, 100);
       rect(100, 300, 190, 10);
       rect(100, 317, 190, 5);
       rect(100, 320, 190, 15);
       rect(140, 330, 50, 40);
       rect(205, 330, 60, 40);
       rect(200, 330, 2, 40);
       rect(180, 340, 34, 2);
       rect(180, 335, 34, 2);
       rect(180, 340, 34, 2);
       rect(180, 345, 34, 2);
       rect(180, 350, 34, 2);
       rect(195, 330, 2, 40);
       rect(190, 330, 2, 40);
       for(var i = 100; i < 300; i+= 20.5) {
        rect(i, 290, 10, 20);
       }
       //}
       
        //moon
        for(var w = 1; w < 150; w +=1) {
            fill(196, 196, 196, 6);
            ellipse(450, 100, w, w); 
            fill(196, 196, 196);
            ellipse(450, 100, 85, 85);
           
            
            
        }  
};    
var background3 = function() {
    background(66, 66, 66);
    sprites = [];
    for(var i =0; i <width; i+= 40) {
        for(var j =0; j <height; j+= 40) {
    this.sprites.push(Sprite.new(i, j, 40, 40, 'stone'));   
        }
    }
    runObject(sprites);
    
    
    lantern(150, 150, 50);
    lantern(450, 150, 50);
    
    //rafters
    noFill();
    stroke(64, 58, 0);
    strokeWeight(80);
    arc(150, 100, 300, 200, 180, 360);
    point(300, 0);
    point(0, 0);
    point(600, 0);
    arc(450, 100, 300, 200, 180, 360);
    
    //pillars {
    noStroke();
    fill(102, 102, 102);
    rect(260, 100, 80, 40);
    fill(77, 77, 77);
    rect(260, 140, 80, 40);
    fill(107, 107, 107);
    rect(260, 180, 80, 40);
    fill(84, 84, 84);
    rect(260, 220, 80, 40);
    fill(84, 84, 84);
    rect(260, 260, 80, 40);
    fill(102, 102, 102);
    rect(260, 300, 80, 40);
    fill(89, 89, 89);
    rect(260, 340, 80, 40);
    fill(84, 84, 84);
    rect(260, 380, 80, 40);
    fill(92, 92, 92);
    rect(260, 420, 80, 40);
    fill(102, 102, 102);
    rect(260, 460, 80, 40);
    
    fill(112, 112, 112);
    rect(0, 100, 40, 40);
    fill(87, 87, 87);
    rect(0, 140, 40, 40);
    fill(110, 110, 110);
    rect(0, 180, 40, 40);
    fill(77, 77, 77);
    rect(0, 220, 40, 40);
    fill(112, 112, 112);
    rect(0, 260, 40, 40);
    fill(92, 92, 92);
    rect(0, 300, 40, 40);
    fill(110, 110, 110);
    rect(0, 340, 40, 40);
    fill(107, 107, 107);
    rect(0, 380, 40, 40);
    fill(92, 92, 92);
    rect(0, 420, 40, 40);
    fill(82, 82, 82);
    rect(0, 460, 40, 40);
    
    fill(112, 112, 112);
    rect(560, 100, 40, 40);
    fill(102, 102, 102);
    rect(560, 140, 40, 40);
    fill(110, 110, 110);
    rect(560, 180, 40, 40);
    fill(77, 77, 77);
    rect(560, 220, 40, 40);
    fill(112, 112, 112);
    rect(560, 260, 40, 40);
    fill(102, 102, 102);
    rect(560, 300, 40, 40);
    fill(110, 110, 110);
    rect(560, 340, 40, 40);
    fill(107, 107, 107);
    rect(560, 380, 40, 40);
    fill(102, 102, 102);
    rect(560, 420, 40, 40);
    fill(99, 99, 99);
    rect(560, 460, 40, 40);
    //}
    
    
      
    
    
};    
var background4 = function() {
    
    
    background(0, 232, 232);
   
   fill(0, 89, 22);
   noStroke();
   bezier(0, 200, 200, 180, 400, 200, 600, 250);
   quad(0, 199, 0, 400, 600, 400, 600, 249);
   
    fill(0, 89, 13);
    noStroke();
    bezier(0, 200, 50, 230, 80, 280, 130, 350);
    triangle(0, 199, 131, 350, 0, 400);
    bezier(300, 310, 400, 250, 500, 230, 600, 220);
    quad(300, 309, 300, 350, 600, 380, 600, 219);
    //sun
    noStroke();
    for(var w = 1; w < 100; w ++) {
        fill(255, 255, 0, 6);
        ellipse(450, 100, w, w); 
        fill(255, 255, 0);
        ellipse(450, 100, 45, 45);
    }  
    
    //ground
    noStroke();
    fill(0, 112, 17);
    bezier(0, 350, 200, 250, 400, 370, 600, 360);
    quad(0, 349, 0, 600, 600, 600, 600, 359);
    
    //road
     noFill();
    strokeWeight(3);
    stroke(99, 69, 0);
    bezier(198, 320, 200, 400, 220, 500,250, 610);
    for(var i =250; i < 290; i+= 2) {
        bezier(197, 320, 200, 400, 220, 500,i, 610);
    }
    bezier(197, 320, 180,280, 150, 220, 100, 195);
        
    
    //castle
   drawCastle(100, 220);
   
   
};    
var background5 = function() {
    background(0, 232, 232);
   
   fill(0, 89, 22);
   noStroke();
   bezier(0, 200, 200, 180, 400, 200, 600, 250);
   quad(0, 199, 0, 400, 600, 400, 600, 249);
   
    fill(0, 89, 13);
    noStroke();
    bezier(0, 200, 50, 230, 80, 280, 130, 350);
    triangle(0, 199, 131, 350, 0, 400);
    bezier(300, 310, 400, 250, 500, 230, 600, 220);
    quad(300, 309, 300, 350, 600, 380, 600, 219);
    //sun
    noStroke();
    for(var w = 1; w < 100; w ++) {
        fill(255, 255, 0, 6);
        ellipse(450, 100, w, w); 
        fill(255, 255, 0);
        ellipse(450, 100, 45, 45);
    }  
    
    //ground
    noStroke();
    fill(0, 112, 17);
    bezier(0, 350, 200, 250, 400, 370, 600, 360);
    quad(0, 349, 0, 600, 600, 600, 600, 359);
    
};   
var background6 = function() {
    background(0, 109, 145);
    //moon
        for(var w = 1; w < 150; w +=1) {
            fill(196, 196, 196, 6);
            ellipse(450, 100, w, w); 
            fill(196, 196, 196);
            ellipse(450, 100, 85, 85);
           
            
            
        } 
    drawRange();
    
};
var background7 = function() {
    background6();
    //ground
    noStroke();
    fill(0, 112, 17);
    bezier(0, 350, 200, 250, 400, 370, 600, 360);
    quad(0, 349, 0, 600, 600, 600, 600, 350);
    drawForest();
};  
var background8 = function() {
    background4();
    //tree 1{
    noStroke();
    fill(115, 96, 0);
    rect(100, 200, 50, 300);
    ellipse(125, 500, 50, 20);
    
    noFill();
    stroke(115, 96, 0);
    strokeWeight(20);
    bezier(145, 250, 160, 240, 180, 210, 200, 200);
    bezier(145, 270, 160, 250, 180, 215, 200, 200);
    
    bezier(105, 300, 70, 280, 40, 230, 40, 200);
    bezier(105, 320, 70, 280, 40, 230, 40, 200);
   
   bezier(105, 400, 70, 480, 40, 430, 40, 500);  
    bezier(145, 450, 160, 440, 180, 410, 190, 500);
    
    bezier(140, 470, 145, 475, 155, 495, 160, 500);
    
    strokeWeight(10);
    bezier(105, 230, 90, 215, 80, 210, 70, 200);
    bezier(105, 240, 90, 215, 80, 210, 70, 200);
    bezier(105, 450, 95, 470, 80, 490, 60, 500);
    
    noFill();
    stroke(112, 75, 0);
    strokeWeight(3);
    bezier(100, 250, 125, 300, 110, 350, 115, 400);
    bezier(205, 200, 160, 230, 150, 280, 130, 300);
    bezier(148, 300, 140, 320, 135, 340, 130, 350);
    bezier(125, 200, 115, 220, 130, 240, 120, 260); 
    bezier(149, 350, 140, 400, 120, 450, 140, 460);
    bezier(102, 400, 120, 410, 125, 450, 120, 475);
    
    pushMatrix();
    translate(400, -50);
    noStroke();
    fill(115, 96, 0);
    rect(100, 200, 50, 300);
    ellipse(125, 500, 50, 20);
    
    noFill();
    stroke(115, 96, 0);
    strokeWeight(20);
    bezier(145, 250, 160, 240, 180, 210, 200, 200);
    bezier(145, 270, 160, 250, 180, 215, 200, 200);
    
    bezier(105, 300, 70, 280, 40, 230, 40, 200);
    bezier(105, 320, 70, 280, 40, 230, 40, 200);
   
   bezier(105, 400, 70, 480, 40, 430, 40, 500);  
    bezier(145, 450, 160, 440, 180, 410, 190, 500);
    
    bezier(140, 470, 145, 475, 155, 495, 160, 500);
    
    strokeWeight(10);
    bezier(105, 230, 90, 215, 80, 210, 70, 200);
    bezier(105, 240, 90, 215, 80, 210, 70, 200);
    bezier(105, 450, 95, 470, 80, 490, 60, 500);
    
    noFill();
    stroke(112, 75, 0);
    strokeWeight(3);
    bezier(100, 250, 125, 300, 110, 350, 115, 400);
    bezier(205, 200, 160, 230, 150, 280, 130, 300);
    bezier(148, 300, 140, 320, 135, 340, 130, 350);
    bezier(125, 200, 115, 220, 130, 240, 120, 260); 
    bezier(149, 350, 140, 400, 120, 450, 140, 460);
    bezier(102, 400, 120, 410, 125, 450, 120, 475);
    popMatrix();
    //}
    
    //tree 2{
    pushMatrix();
    translate(width/2, 0);
    noStroke();
    fill(115, 96, 0);
    rect(100, 200, 60, 300);
    ellipse(125, 500, 50, 20);
    
    noFill();
    stroke(115, 96, 0);
    strokeWeight(20);
    bezier(155, 280, 160, 260, 180, 220, 200, 200);
    bezier(155, 300, 160, 270, 180, 225, 200, 200);
    
    bezier(105, 300, 40, 280, 30, 230, 20, 200);
    bezier(105, 320, 40, 280, 30, 230, 20, 200);
   
   bezier(105, 400, 90, 480, 80, 430, 60, 500);  
    bezier(145, 450, 160, 440, 180, 480, 190, 500);
    
    bezier(140, 470, 145, 475, 155, 495, 160, 500);
    
    strokeWeight(10);
    bezier(105, 230, 90, 215, 80, 210, 10, 200);
    bezier(105, 240, 90, 215, 80, 210, 70, 200);
    bezier(105, 450, 95, 470, 80, 490, 60, 500);
    
    noFill();
    stroke(112, 75, 0);
    strokeWeight(3);
    bezier(100, 250, 105, 300, 110, 350, 115, 400);
    bezier(205, 200, 160, 230, 150, 280, 130, 300);
    bezier(148, 300, 100, 320, 135, 340, 130, 350);
    bezier(125, 200, 115, 220, 130, 240, 120, 260); 
    bezier(149, 350, 140, 400, 120, 450, 140, 460);
    bezier(102, 470, 120, 410, 125, 450, 120, 405);
    popMatrix();
    //}
    
    tree(350, 350, 1);
    tree(0, 300, 1.5);
    tree(300, 300, 1);
    tree(200, 400, 1.5);
    tree(50, 300, 0.8);
    //leaves
    for(var i = 0; i < width; i += 100) {
        leaf(i, 0, 1);  
        leaf(i+45, 20, 0.5);
    }   
    for(var i = 0; i < width+100; i += 150) {
          leaf(i, 20, 1.2); 
    }  
    for(var i = 0; i < width+100; i += 130) {
        leaf(i+30, 50, 1.5);   
        leaf(i+60, 30, 0.7);
    }   
    for(var i = 50; i < width+100; i += 120) {
        leaf(i, 50, 0.9);   
        leaf(i-20, 40, 1);
    }  
    for(var i = width+50; i > -50; i -= 190) {
        leaf(i, 100, 2);   
        leaf(i-50, 80, 1.5);
        leaf(i/1.5+20, 130, 1);
    }    
    for(var i = 0; i < width+100; i += 100) {
        leaf(i, 200, 1.1);   
        leaf(i/1.2+20, 180, 1.5);
    }    
    for(var i = 0; i < width; i += 70) {
        leaf(i, 80, 0.9);   
    }    
     
    
    leaf(200, 200, 1);
    leaf(120, 180, 1.2);
    leaf(100, 190, 1);
    leaf(50, 210, 1);
    leaf(180, 150, 1.5);
    leaf(500, 140, 1.8);
    leaf(100, 250, 1);
    leaf(300, 250, 1.5);
    
    
};
var background9 = function() {
    drawRange();
    pushMatrix();
    background5();
    popMatrix();
};
var background10 = function() {
    background(0, 232, 232);
    //sun
    noStroke();
    for(var w = 1; w < 100; w ++) {
        fill(255, 255, 0, 6);
        ellipse(450, 100, w, w); 
        fill(255, 255, 0);
        ellipse(450, 100, 45, 45);
    } 
    drawRange();
    
    //ground
    noStroke();
    fill(0, 112, 17);
    bezier(0, 350, 200, 250, 400, 370, 600, 360);
    quad(0, 349, 0, 600, 600, 600, 600, 350);
};    
var background11 = function() {
    background(13, 3, 148);
      drawStars();
      
      //moon
        for(var w = 1; w < 150; w +=1) {
            fill(196, 196, 196, 6);
            ellipse(450, 100, w, w); 
            fill(196, 196, 196);
            ellipse(450, 100, 85, 85);
           
            
            
        } 
        
        drawRange();
        
        //clouds
        noStroke();
        fill(145, 145, 145, 10);
        for(var i = 100; i > 50; i -= 2) {
            rectMode(CENTER);
            ellipse(230, 150, i, i/2);
            rect(200, 100, i, i,20);   
            rect(210, 130, i*2, i, 60);
            rect(80, 105, i*3, i/1.5, 100);
            ellipse(90, 110, i*2, i/2);
            
            ellipse(350, 200, i*2, i/2);
            rect(360, 220, i, i/1.5, 50);
            ellipse(380, 230, i*2, i/2);
        }    
        rectMode(CORNER);
        
        noStroke();
}; 
var background12 = function() {
    background11();
    
    //ground
    noStroke();
    fill(3, 87, 0);
    ellipse(300, 500, 2200, 400);
    
    //volcano{
    fill(0);
    bezier(0, 400, 250, 250, 300, 350, 600, 380);
    quad(0, 399, 0, 600, 600, 600, 600, 379);
    bezier(100, 350, 150, 300, 200, 100, 250, 350);
    quad(170, 230, 150, 280, 210, 280, 210, 250); 
    quad(180, 210, 175, 240, 200, 230, 190, 230);
    quad(195, 210, 190, 230, 215, 240, 205, 195);
    rect(180, 220, 20, 20);
    quad(240, 250, 220, 250, 220, 290, 230, 290);
    //}
    
    //fire
    for(var i = 0; i < width; i += 10) {
        fill(random(100, 255), 0, 0);
        triangle(i, 450, i+5, 430, i+10, 450);
        fill(255, 255, 0);
        triangle(i+3, 450, i+5,  435, i+7, 450);
    }    
    
     //lava spurts{
    noStroke();
    fill(255, 0, 0);
    ellipse(210, 280, 8, 3);
    rect(185, 220, 9, 1);
    ellipse(205, 326, 90, 2);
    rect(110, 332,50, 2, 10); 
        
    noFill();
    stroke(255, 0, 0);
    strokeWeight(1);
    arc(210, 290, 10, 20, 270, 360);
    arc(190, 225, 10, 10, 270, 360);
    line(237, 255, 237, 265);
    line(235, 295, 235, 315);
    strokeWeight(2);
    arc(210, 295, 7, 30, 270, 360);
   line(187, 221, 187, 224);
    arc(190, 226, 10, 10, 270, 360);
    bezier(195, 226, 190, 234, 190, 240, 200, 240);
    line(200, 240, 200, 245);
    bezier(200, 245, 210, 245, 220, 250, 230, 250);
    arc(232, 260, 10, 20, 270, 360); 
    line(236, 255, 236, 285);
    line(237, 270, 237, 290);
    line(236.5, 285, 236.5, 310);
    line(235, 310, 235, 325);
    arc(165, 332, 30, 10, 180, 270); 
   arc(175, 332, 30, 10, 180, 270); 
   arc(110, 340, 10, 16, 180, 270);
   line(105, 340, 105, 345);
   bezier(105, 345, 105, 350, 100, 360, 70, 410);
   bezier(105, 345, 115, 350, 110, 360, 90, 450);
   bezier(110, 360, 115, 370, 90, 390, 90, 450);
    noStroke();
    fill(0);
    triangle(208, 279, 210, 290, 200, 280);
    triangle(230, 255, 235, 255, 232, 245);
    quad(235, 250, 240, 250, 240, 243, 240, 240);
    //}
    
   fill(3, 87, 0);
    rect(0, 450, 600, 150);
    drawCastleMap(0, 440, fortress1);
    drawCastleMap(300, 425, fortress2);
    noStroke();
    
    //fortress{
    //big tower{
    fill(97, 97, 97);
    quad(150, 250, 140, 300, 180, 300, 170, 250);
    rect(190, 270, 5, 30);
    triangle(140, 300, 180, 300, 160, 305);
    quad(150, 300, 155, 320, 165, 320, 170, 300);
    
    //}
    
    
    fill(97, 97, 97);
     
    
    
    //frontal wall and tower{
    rect(165, 340, 100, 10);
    rect(205, 330, 20, 20);
    quad(265, 340, 265, 350,  280, 325, 280, 315);
    quad(260, 340, 260, 350,  275, 325, 275, 315);
    rect(275, 305, 5, 18);
    //}
    
    //volcano peak turrets{
    //top right
    noStroke();
    fill(97, 97, 97);
    rect(202, 180, 5, 20);
    
    //top left
    quad(173, 190, 170, 230, 178, 225, 175, 190);
    triangle(170, 229, 174, 236, 178, 224);
    //}
    
    //wall and tower fortifications{
    for(var i = 150; i < 170; i += 2.1) {
        rect(i, 248, 1, 2);   
    }  
    rect(275, 303, 1, 2);
    rect(277, 303, 1, 2);
    rect(279, 303, 1, 2);
    
    rect(155, 330, 10, 20);
    rect(155, 328, 1, 2);
    rect(157, 328, 1, 2);
    rect(159, 328, 1, 2);
    rect(161, 328, 1, 2);
    rect(162.5, 328, 1, 2);
    rect(164, 328, 1, 2);
    
    
    for(var i = 165; i < 265; i +=2){
        rect(i, 339, 1, 2);
    }
    for(var i = 205; i < 225; i += 1.9) {
         rect(i, 328, 1, 3);   
    }    
    noFill();
    stroke(97, 97, 97);
    strokeWeight(3);
    arc(183, 290, 35, 20, 230, 310);
    noStroke();
    //}
    
    //lights{
    fill(255, 0, 0);
    
    ellipse(174, 215, 1, 2);
    ellipse(174, 220, 1, 2);
    ellipse(174, 225, 1, 2);
    
    ellipse(205, 183, 1, 2);
    ellipse(205, 188, 1, 2);
    ellipse(205, 193, 1, 2);
    
    ellipse(192.5, 275, 1, 1);
    ellipse(192.5, 280, 1, 1);
    ellipse(192.5, 285, 1, 1);
    ellipse(192.5, 290, 1, 1);
    
    ellipse(278, 307, 1, 1);
    ellipse(278, 312, 1, 1);
    ellipse(278, 317, 1, 1);
    
    for(var i = 206; i < 225; i += 3) {
         rect(i, 334, 1, 1);   
    }
    
    for(var i = 153; i <= 170; i += 5) {
        ellipse(i, 255, 1, 1);
        
        ellipse(i, 260, 1, 1);
        ellipse(i, 265, 1, 1);
        ellipse(i, 270, 1, 1);
        ellipse(i, 275, 1, 1);
        ellipse(i, 280, 1, 1);
        ellipse(i, 285, 1, 1);
        
        ellipse(i-5, 290, 1, 1);
        ellipse(i-5, 295, 1, 1);
        ellipse(i+5, 290, 1, 1);
        ellipse(i+5, 295, 1, 1);
    }
    //}
    
    //entrance
    fill(255, 0, 0);
    noStroke();
    arc(215, 350, 5, 20, 180, 360);
    //}
    
    //overlapping black stone
   fill(0);
   triangle(110, 345, 125, 345, 108, 325);
    
    
    drawCastleMap(150, 300, city1);
    drawCastleMap(20, 350, city2);
    
    
};
var background13 = function() {
    background11();
    
    
    //ground
    noStroke();
    fill(0, 112, 17);
    bezier(0, 350, 200, 250, 400, 370, 600, 360);
    quad(0, 349, 0, 600, 600, 600, 600, 359);
    
    //volcano{
    fill(0, 0, 0);
    quad(0, 100, 0, 350, 500, 350, 250, 200);
    //}
    
    //fire
    noStroke();
    fill(247, 255, 0);
   rect(0, 350, width, 55);

   for(var i = 0; i < width; i += 30) {
       fill(255, 0, 0);
       triangle(i, 350, i+30, 350, i+15, 310);  
       fill(255, 187, 0);
       triangle(i+5, 350, i+25, 350, i+15, 315);  
        fill(247, 255, 0);
        triangle(i+10, 350, i+20, 350, i+15, 320);   
        
   } 
   fill(255, 255, 255);   
   triangle(280, 405, 300, 370, 320, 405);
    
    //wall
    drawCastleMap(0, 350, wall2);
    drawCastleMap(320, 350, wall3);
    drawCastleMap(280, 320, gateHouse1);
    
    
};    
var background14 = function() {
 var color1 = color(255, 0, 0);
    var color2 = color(242, 255, 0);
    for (var y = 0; y < height; y ++) {
        var beginX = 0;
        var endX = width;
    
    var col = lerpColor(color1, color2, (y) / height); 
    stroke (col);
    
    line(beginX, y, endX, y);
    }
   noStroke();
   
   fill(0, 0, 0);
    rect(0, 0, 100, height);
    rect(0, 0, width, 100);
    rect(0, 500, width, 100);
    rect(550, 0, 100, height);
    beginShape();
    vertex(0, 600);
    vertex(300, 600);
    vertex(270, 490);
    vertex(260, 485);
    vertex(230, 470);
    vertex(231, 460);
    vertex(220, 440);
    vertex(215, 430);
    vertex(218, 415);
    vertex(150, 300);
    vertex(160, 290);
    vertex(180, 230);
    vertex(250, 210);
    vertex(290, 180);
    vertex(350, 100);
    vertex(0, 0);
    endShape();
    beginShape();
    vertex(300, 600);
     vertex(320, 500);
     vertex(500, 200);
    vertex(600, 0);
    vertex(600, 600);
    endShape();
    
    //steps
    for(var i = 300; i < 500; i += 3) {
            fill(43, 43, 43);
            rect(i, (-i*1.7)+height+410, 50, 6);   
            fill(0, 0, 0);
            rect(i+10, (-i*1.7)+height+410, 50, 6);   
            
    }    
    triangle(600, 200, 400, 0, 600, 0);
    
   //lava
   stroke(255, 0, 0);
   noFill();
   strokeWeight(4);
   ellipse(142, 300, 5, 2);
    beginShape();
    vertex(140, 300);
    vertex(145, 300);
    vertex(170, 350);
    vertex(160, 360);
    vertex(150, 365);
    vertex(145, 390);
    vertex(147, 410);
    vertex(150, 440);
    endShape();
    strokeWeight(5);
    line(150, 440, 145, 450);
    strokeWeight(6);
    line(145, 450, 140, 460);
    strokeWeight(8);
    line(140, 460, 138, 470);
    strokeWeight(11);
    line(138, 470, 135, 480);
    strokeWeight(15);
    line(135, 480, 130, 490);
    fill(255, 0, 0);
    triangle(130, 490, 50, height, 100, height);
    triangle(120, 510, 20, height, 130, height);
    triangle(110, 540, -50, height, 150, height);
        
};    
var background15 = function() {
    background(0);
   for(var i = 100; i < height+300; i *= 1.1) {
          noStroke();
          rectMode(CENTER);
          fill(102, 102, 102);
          rect(300, i, i/2, i/2);
          
          rectMode(CORNER);
   } 
   fill(255, 0, 0);
   arc(300, 75, 30, 80, 180, 360);
};
var background16 = function() {
       background(179, 113, 0);
    var color1 = color(255, 0, 0);
    var color2 = color(242, 255, 0);
    for (var y = 0; y < height; y ++) {
        var beginX = 0;
        var endX = width;
    
    var col = lerpColor(color1, color2, (y) / height); 
    stroke (col);
    
    line(beginX, y, endX, y);
    }
    
    //Oran{
    pushMatrix();
    translate(0, 5);
    noFill();
    stroke(0, 0, 0);
    strokeWeight(5);
    //head
    ellipse(300, 300, 4, 8);
    
    //neck
    line(300, 300, 300, 300);
    
    //torso
    fill(0);
    quad(295, 308, 298, 320, 302, 320, 305, 308);
    line(295, 308, 305, 308);
    
    //arms
    line(295, 308, 293, 318);
    line(293, 318, 290, 322);
    line(305, 308, 305, 323);
    
    //legs
    line(298, 320, 296, 334);
    line(300, 320, 296, 334);
    line(296, 334, 296, 343);
    line(300, 320, 303, 335);
    line(302, 320, 303, 335);
    line(303, 335, 302, 345);
    
    //knife
    noStroke();
    fill(0, 0, 0);
    triangle(288, 324, 290, 320, 291, 333);
    popMatrix();
    //}
    
   noStroke();
   fill(0, 0, 0);
  quad(279, 350, 0, 600, 600, 600, 321, 350);
  fill(56, 56, 56);
  quad(280, 250, 0, 0, 0, 600, 280, 350);
  quad(320, 250, 320, 350, 600, 600, 600, 0);
  fill(84, 84, 84);
  quad(279, 250, 321, 250, 600, 0, 0, 0);
  
  
  //spears
  for(var i = 50; i < 320;  i *=1.1) {
    fill(112, 84, 0);
    rectMode(CENTER);
    rect(-i+320, 310, i/20, i*1.9);
    ellipse(-i+320, 310+(i*1.9)/2, i/20, i/40);
    fill(79, 59, 0);
    rect(-i+320-i/50, 310, i/50, i*1.9);
    rectMode(CORNER);
    fill(97, 97, 97);
    triangle(-i+320, 310-(i*1.9)/2, -i+320+i/20, 310-(i*1.9)/2+i/40, -i+320, 310-(i*1.9)/2-i/7);
    fill(41, 41, 41);
    triangle(-i+320, 310-(i*1.9)/2, -i+320-i/20, 310-(i*1.9)/2+i/40, -i+320, 310-(i*1.9)/2-i/7);
  }
  
   
    
    //axes{
    //left 3
    fill(128, 102, 0);
    pushMatrix();
    translate(405, 300);
    rotate(-20);
    rect(0, -50, 10, 100);
    fill(97, 76, 0);
    rect(2, -50, 3, 100);
    fill(87, 87, 87);
    rect(-5, -55, 15, 10);
    triangle(-5, -30, -30, -45, -5, -70);
    popMatrix();
    fill(117, 92, 0);
    quad(395, 220, 400, 300, 408, 300, 402, 218);
    pushMatrix();
    translate(415, 260);
    rotate(-10);
    translate(-425, -250);
    fill(128, 85, 0);
    rect(420, 250, 10, 50);
    fill(148, 148, 148);
    arc(411, 240, 25, 50, 90, 180);
    arc(439, 240, 25, 50, 0, 90);
    fill(110, 110, 110);
    arc(411, 240, 20, 40, 90, 180);
    arc(439, 240, 20, 40, 0, 90);
      fill(110, 110, 110);
    rect(410, 240, 30, 10);
    arc(411, 240, 20, 40, 90, 180);
    arc(439, 240, 20, 40, 0, 90);
    popMatrix();
    fill(148, 148, 148);
    triangle(401, 205, 380, 217, 397, 200);
    fill(110, 110, 110);
    quad(402, 218, 401, 205, 380, 217, 383, 230);
    arc(382, 223, 20, 20, -100, 80);
    
    //right 3
    pushMatrix();
    translate(490, 300);
    rotate(10);
    fill(130, 104, 0);
    rect(0, -40, 7, 80);
    fill(117, 117, 117);
    rect(0, -50, 7, 11);
    triangle(-20, -45, 20, -45, 20, -35);
    fill(143, 143, 143);
    rect(20, -45, 4, 10);
    popMatrix();
    pushMatrix();
    translate(480, 300);
    rotate(7);
    fill(102, 73, 0);
    rect(0, -60, 8, 120);
    fill(156, 156, 156);
    triangle(8, -65, -25, -65, -25, -35);
    triangle(0, -65, 33, -65, 33, -35);
    fill(112, 112, 112);
    rect(-5, -65, 18, 7);
    triangle(8, -65, -20, -65, -20, -40);
    triangle(0, -65, 28, -65, 28, -40);
    popMatrix();
    pushMatrix();
    noStroke();
    translate(460, 300);
    rotate(3);
    fill(130, 80, 0);
    rect(0, -80, 8, 160);
    fill(173, 173, 173);
    arc(0, -79, 24, 120, 270, 360);
    arc(15, -79, 25, 90, 0, 90);
    fill(125, 125, 125);
    arc(0, -79, 16, 100, 270, 360);
    rect(0, -79, 20, 5);
    arc(15, -79, 20, 80, 0, 90);
    popMatrix();
    
    //middle 2
    pushMatrix();
    translate(430, 300);
    rotate(-4);
    fill(112, 91, 0);
    rect(0, -100, 7, 100);
    fill(138, 138, 138);
    rect(0, -110, 7, 15);
    triangle(0, -110, 7, -110, 3.5, -145);
    rect(0, -90, 7, 10);
    fill(176, 176, 176);
    triangle(0, -90, -40, -85, 0, -85);
    arc(7, -80, 70, 20, 270, 360);
    fill(153, 153, 153);
    triangle(0, -80, -40, -85, 0, -85);
    arc(7, -80, 60, 15, 270, 360);
    noStroke();
    popMatrix();
    pushMatrix();
    translate(450, 300);
    rotate(-5);
    fill(135, 101, 0);
    rect(-5, -40, 10, 80);
    fill(138, 138, 138);
   arc(-10, -42, 30, 50, 90, 270);
   arc(10, -42, 30, 50, -90, 90);
    fill(120, 120, 120);
    rect(-15, -50, 30, 18);
   arc(-10, -42, 20, 40, 90, 270);
   arc(10, -42, 20, 40, -90, 90);
   popMatrix();
    
    
   
    
  
    
    
    
     //barrel
    fill(77, 77, 77);
    rect(400, 300, 100, 5);
    
    fill(94, 67, 0);
    rect(400, 300, 100, 220);
    ellipse(450, 520, 100, 20);
    
    fill(77, 77, 77);
    rect(400, 300, 100, 5);

//} 
};    
var background17 = function() {
     var color1 = color(255, 255, 0);
    var color2 = color(255, 0, 0);
    for (var y = 0; y < height; y ++) {
        var beginX = 0;
        var endX = width;
    
    var col = lerpColor(color1, color2, (y) / height); 
    stroke (col);
    
    line(beginX, y, endX, y);
    }
   noStroke();
   
   //pathway
   noStroke();
   fill(0);
   quad(100, 600, 500, 600, 305, 400, 295, 400); 
   
   //sideway towers and pathways
   noStroke();
   fill(0);
   rect(0, 400, width, 10);
   
   for(var i = 0; i < width+20; i += 20) {
       stroke(0);
   strokeWeight(5);
        noFill();
        arc(i, 420, 20, 20, 180, 360);
         noStroke();
        fill(0);
        rect(i-12.5, 420, 5, 300);
   }
   
   //central tower
   noStroke();
   fill(0);
   rect(290, 200, 5, 200);
   rect(305, 200, 5, 200);
   rect(250, 169, 100, 2);
   quad(250, 169, 250, 180, 280, 180, 260, 170);
   quad(350, 169, 340, 169, 320, 180, 350, 180);
   quad(280, 169, 320, 169, 305, 150, 295, 150);
   stroke(0);
   strokeWeight(2);
   for(var i = 180; i < 400; i += 8) {
        line(307, i, 293, i+5);
        line(293, i+4, 307, i+9);
   }   
   line(280, 180, 260, 170);
   line(320, 180, 340, 170);
   strokeWeight(5);
   noFill();
   arc(272, 200, 40, 40, 180, 360);
   arc(328, 200, 40, 40, 180, 360);
    line(252, 200, 252, 400);
    line(348, 200, 348, 400);
    line(252, 179, 347, 179);
    noStroke();
    fill(0);
    triangle(295, 200, 280, 178, 295, 178);
    triangle(305, 200, 320, 178, 305, 178);
    triangle(250, 200, 265, 178, 250, 178);
    
    triangle(350, 200, 335, 178, 350, 178);
    rect(298, 145, 4, 10);
  
    pearl(300, 145, 0.1); 
};    
var background18 = function() {
     var color1 = color(255, 255, 0);
    var color2 = color(255, 0, 0);
    for (var y = 0; y < height; y ++) {
        var beginX = 0;
        var endX = width;
    
    var col = lerpColor(color1, color2, (y) / height); 
    stroke (col);
    
    line(beginX, y, endX, y);
    }
   noStroke();
   fill(0);
   rect(0, 400, 600, 200);
   rect(100, 0, 100, 400);
   rect(400, 0, 100, 400);
   for(var i = 0; i < 200; i += 20) {
       for(var y = 0; y > -400; y -= 180) {
       pushMatrix();
       translate(0, y);
        rect(i+200, i/2+300, 30, 20); 
        rect(-i+400, i/2+200, 30, 20);
        popMatrix();
       }
   }   
};
var background19 = function() {
     background(0);
  
 //paper
  fill(235, 220, 144);
   noStroke();
   rect(120, 120, 360, 360);
   quad(50, 50, 55, 130, 100, 140, 90, 60);
   quad(110, 130, 55, 138, 55, 210, 100, 210);
   quad(95, 62, 80, 200, 200, 200, 200, 68);
   quad(207, 69, 190, 200, 300, 200, 295, 73);
   quad(300, 73, 280, 200, 355, 200, 350, 71);
   quad(352, 71, 350, 200, 500, 200, 500, 64);
   quad(490, 66, 490, 200, 542, 100, 550, 50);
   triangle(490, 200, 540, 115, 535, 200);
  quad(57, 215, 59, 300, 200, 300,200, 140); 
  quad(200, 300, 59, 300, 56, 450, 300, 460);
  quad(250, 450, 56, 453, 50, 550, 100, 540);
  quad(100, 450, 110, 539, 200, 530, 205, 450);
  quad(200, 450, 207, 530, 310, 527, 320, 450);
  quad(305, 450, 313, 528, 400, 533, 420, 450);
  quad(400, 450, 405, 534, 500, 545, 500, 450);
  quad(480, 543, 550, 550, 535, 400, 450, 385);
  quad(450, 400, 534, 400, 535, 205, 450, 200);
  
  //words{
  noFill();
  stroke(158, 146, 89);
  strokeWeight(2);
  
  //Aralor
  //A
  bezier(100, 240, 100, 180, 125, 190, 120, 230);
  line(95, 230, 115, 220);
  //r
  bezier(130, 230, 130, 225, 130, 210, 140, 210);
  //a
  bezier(150, 230, 130, 210, 160, 200, 150, 230);
  line(150, 210, 155, 225);
  //l
  bezier(160, 200, 165, 210, 160, 230, 175, 227);
  //o
  bezier(180, 220, 160, 200, 190, 190, 180, 220);
  //r
  bezier(195, 210, 190, 205, 190, 190, 200, 190);
  
  //Gornar
  //G
  bezier(300, 350, 280, 340, 270, 390, 300, 380);
  arc(290, 380, 20, 20, 270, 360);
  //o
  bezier(310, 370, 315, 390, 340, 345, 305, 365);
  //r
  bezier(340, 375, 335, 365, 340, 355, 345, 355);
  //n
  bezier(350, 375, 350, 350, 365, 350, 360, 370);
  //a
  bezier(370, 370, 370, 330, 400, 365, 370, 370);
  line(382, 355, 387, 365);
  //r
  bezier(395, 365, 390, 355, 385, 345, 395, 345);
  
  //}
  
  
  //Gornar{
  //mountain range{
  strokeWeight(2);
  stroke(158, 146, 89);
    bezier(380, 430, 410, 420, 405, 410, 410, 400);
    line(410, 400, 412, 405);
    line(416, 401, 412, 405);
    line(416, 401, 418, 395);
    bezier(418, 395, 420, 400, 425, 410, 440, 430);
    arc(400, 415, 20, 30, 0, 90);
    
    bezier(400, 450, 410, 440, 410, 430, 420, 420);
    bezier(420, 420, 420, 425, 430, 430, 440, 450);
    line(418, 430, 415, 440);
    line(415, 440, 410, 450);
    arc(428, 435, 10, 30, 90, 180);
    
    bezier(370, 480, 380, 470, 380, 460, 385, 450);
    line(385, 450, 390, 460);
    line(390, 460, 392, 457);
    bezier(392, 457, 396, 460, 400, 470, 403, 480);
    line(385, 460, 383, 470);
    line(392, 463, 392, 475);
    
    line(420, 400, 430, 390);
    line(430, 390, 435, 380);
    line(435, 380, 440, 390);
    arc(450, 390, 20, 30, 120, 180);
    bezier(435, 390, 434, 395, 428, 397, 425, 400);
    line(436, 397, 438, 402);
    //}
    
    //forest{
    fill(235, 220, 144);
    strokeWeight(2);
  stroke(158, 146, 89);
  ellipse(285, 327, 10, 10);
  ellipse(295, 330, 10, 10);
  ellipse(290, 335, 10, 10);
  ellipse(283, 337, 10, 10);
  ellipse(297, 337, 10, 10);
  ellipse(303, 340, 10, 10);
  ellipse(265, 367, 10, 10);
  ellipse(270, 375, 10, 10);
  ellipse(250, 370, 10, 10);
  ellipse(260, 373, 10, 10);
  ellipse(243, 376, 10, 10);
  ellipse(255, 377, 10, 10);
  ellipse(247, 379, 10, 10);
  ellipse(263, 381, 10, 10);
  ellipse(253, 385, 10, 10);
  ellipse(243, 385, 10, 10);
  ellipse(265, 387, 10, 10);
  ellipse(268, 393, 10, 10);
  ellipse(250, 393, 10, 10);
  ellipse(260, 395, 10, 10);
  ellipse(275, 383, 10, 10);
  ellipse(277, 388, 10, 10);
  ellipse(240, 390, 10, 10);
  ellipse(237, 398, 10, 10);
  ellipse(247, 396, 10, 10);
  ellipse(267, 400, 10, 10);
  ellipse(267, 400, 10, 10);
  ellipse(275, 395, 10, 10);
  ellipse(255, 402, 10, 10);
  ellipse(238, 402, 10, 10);
  ellipse(245, 405, 10, 10);
  ellipse(275, 405, 10, 10);
  ellipse(265, 408, 10, 10);
  ellipse(253, 410, 10, 10);
  ellipse(233, 408, 10, 10);
  ellipse(238, 413, 10, 10);
  ellipse(248, 415, 10, 10);
  ellipse(259, 417, 10, 10);
  ellipse(230, 417, 10, 10);
  ellipse(240, 420, 10, 10);
  ellipse(235, 423, 10, 10);
  ellipse(245, 425, 10, 10);
  ellipse(256, 423, 10, 10);
  ellipse(266, 415, 10, 10);
  ellipse(226, 425, 10, 10);
  ellipse(215, 428, 10, 10);
  ellipse(223, 433, 10, 10);
  ellipse(214, 435, 10, 10);
  ellipse(234, 430, 10, 10);
  ellipse(243, 433, 10, 10);
  ellipse(249, 430, 10, 10);
  ellipse(248, 437, 10, 10);
  ellipse(238, 436, 10, 10);
  ellipse(229, 438, 10, 10);
  ellipse(242, 442, 10, 10);
  ellipse(220, 443, 10, 10);
  ellipse(235, 443, 10, 10);
  noFill();
    //}
    
    //hills{
    noFill();
    stroke(158, 146, 89);
    strokeWeight(2);
    noFill();
    arc(310, 300, 20, 20, 200, 340);
    arc(315, 310, 20, 20, 200, 340);
    arc(305, 325, 20, 20, 200, 340);
    
    arc(320, 400, 20, 20, 200, 340);
    arc(340, 410, 20, 20, 200, 340);
    arc(330, 430, 20, 20, 200, 340);
    arc(325, 435, 20, 20, 200, 340);
    arc(345, 450, 20, 20, 200, 340);
    arc(315, 445, 20, 20, 200, 340);
    arc(327, 465, 20, 20, 200, 340);
    //}
    
    //fortress{
    
    line(333, 321, 333, 317);
    line(333, 317, 340, 317);
    line(336, 316, 336, 314);
    line(336, 314, 339, 312);
    line(339, 313, 339, 308);
    line(339, 308, 341, 308);
    line(341, 308, 342, 312);
    rect(341, 312, 4, 3);
    arc(348,315, 6, 6, 180, 360);
    line(351, 315, 351, 318);
    line(347, 319, 357, 319);
    arc(355, 319, 4, 10, 180, 360);
    line(358, 319, 360, 322);
    line(330, 325, 340, 325);
    arc(335.5, 325, 10, 6, 180, 360);
    line(330, 325, 330, 328);
    line(341, 325, 341, 328);
    arc(335.5, 329, 5, 5, 180, 360);
    line(341, 326, 345, 326);
    line(344, 325, 344, 323);
    line(344, 323, 350, 323);
    line(351, 323, 351, 328);
    arc(347, 329, 3, 3, 180, 360);
    line(351, 327, 354, 327);
    line(355, 329, 355, 325);
    line(355, 325, 357, 325);
    line(358, 325, 358, 329);
    arc(360, 330, 5, 6, 270, 360);
    line(361, 323,363, 323);
    line(362, 322, 362, 320);
    line(362, 320, 364, 322);
    line(364, 323, 364, 329);
    //}
    
    //volcano fortress{
    bezier(500, 500, 495, 490, 480, 490, 480, 465);
    line(480, 465, 478, 460);
    arc(470, 460, 16, 10, 0, 100);
    bezier(467, 465, 460, 458, 460, 456, 460, 450);
   bezier(460, 450, 458, 455, 450, 480, 420, 490);
   beginShape();
    fill(235, 220, 144);
   vertex(450, 465);
   vertex(455, 465);
   vertex(458, 480);
   vertex(452.5, 485);
   vertex(447, 480);
   vertex(450, 465);
   endShape();
   
   arc(470, 480, 3, 3, 180, 360);
   line(470, 480, 470, 477);
   
   line(460, 490, 450, 490);
   
   beginShape();
   
   vertex(460, 486);
   vertex(460, 485);
   vertex(465, 485);
   vertex(465, 486);
   endShape();
   
   beginShape();
   vertex(476, 488);
   vertex(476, 480);
   vertex(478, 480);
   vertex(478, 488);
   endShape();
   
   arc(456, 490, 5, 5, 180, 360);
   arc(469, 486, 5, 5, 180, 360);
   arc(476, 493, 5, 5, 180, 360);
   arc(447, 493, 5, 5, 180, 360);
   arc(463, 484, 5, 5, 180, 360);
   
   rect(440, 493, 40, 0);
   line(480, 493, 487, 486);
   rect(465, 490, 5, 4);
   rect(440, 486, 2, 7);     
    //hole
    arc(460, 498, 5, 3, 0, 180);
    //}
  //}
  
  //Aralor{
 //forest{
    fill(235, 220, 144);
    strokeWeight(2);
  stroke(158, 146, 89);
  ellipse(190, 236, 10, 10);
  ellipse(186, 240, 10, 10);
  ellipse(220, 246, 10, 10);
  ellipse(200, 240, 10, 10);
  ellipse(193, 245, 10, 10);
  ellipse(209, 243, 10, 10);
  ellipse(203, 247, 10, 10);
  ellipse(213, 250, 10, 10);
  ellipse(183, 248, 10, 10);
  ellipse(180, 255, 10, 10);
  ellipse(190, 253, 10, 10);
  ellipse(185, 260, 10, 10);
  ellipse(220, 255, 10, 10);
  ellipse(228, 258, 10, 10);
  ellipse(224, 265, 10, 10);
  ellipse(232, 270, 10, 10);
  ellipse(223, 270, 10, 10);
  ellipse(227, 275, 10, 10);
  ellipse(218, 275, 10, 10);
  ellipse(224, 281, 10, 10);
  
  ellipse(100, 260, 10, 10);
  ellipse(108, 262, 10, 10);
  ellipse(120, 265, 10, 10);
  ellipse(112, 266, 10, 10);
  ellipse(125, 268, 10, 10);
  ellipse(95, 268, 10, 10);
  ellipse(107, 268, 10, 10);
  ellipse(102, 270, 10, 10);
 
  noFill();
 arc(114, 302, 3, 25, 180, 360);
    arc(120, 300, 3, 25, 180, 360);
    arc(125, 304, 3, 25, 180, 360);
    arc(110, 310, 3, 25, 180, 360);
    arc(118, 310, 3, 25, 180, 360);
    arc(122, 314, 3, 25, 180, 360);
    arc(113, 316, 3, 25, 180, 360);
    arc(127, 318, 3, 25, 180, 360);
    
    arc(130, 365, 3, 25, 180, 360);
    arc(120, 365, 3, 25, 180, 360);
    arc(125, 368, 3, 25, 180, 360);
    arc(123, 374, 3, 25, 180, 360);
    arc(133, 370, 3, 25, 180, 360);
    arc(130, 373, 3, 25, 180, 360);
    arc(140, 368, 3, 25, 180, 360);
    arc(137, 372, 3, 25, 180, 360);
    arc(143, 370, 3, 25, 180, 360);
    arc(146, 375, 3, 25, 180, 360);
    arc(116, 375, 3, 25, 180, 360);
    arc(119, 378, 3, 25, 180, 360);
    arc(114, 383, 3, 25, 180, 360);
    arc(134, 378, 3, 25, 180, 360);
    arc(125, 383, 3, 25, 180, 360);
    arc(120, 390, 3, 25, 180, 360);
    arc(113, 393, 3, 25, 180, 360);
    arc(117, 395, 3, 25, 180, 360);
    //}
    
    //hills{
    noFill();
    stroke(158, 146, 89);
    strokeWeight(2);
    noFill();
    arc(140, 330, 20, 20, 200, 340);
    arc(120, 350, 20, 20, 200, 340);
    arc(150, 340, 20, 20, 200, 340);
    arc(280, 310, 20, 20, 200, 340);
    arc(290, 295, 20, 20, 200, 340);
    arc(300, 280, 20, 20, 200, 340);
    arc(270, 285, 20, 20, 200, 340);
    arc(255, 296, 20, 20, 200, 340);
    arc(278, 276, 20, 20, 200, 340);
    arc(178, 326, 20, 20, 200, 340);
    arc(220, 320, 20, 20, 200, 340);
    arc(210, 332, 20, 20, 200, 340);
    arc(190, 338, 20, 20, 200, 340);
    arc(240, 334, 20, 20, 200, 340);
    arc(230, 348, 20, 20, 200, 340);
    arc(235, 356, 20, 20, 200, 340);
    arc(255, 360, 20, 20, 200, 340);
    arc(254, 344, 20, 20, 200, 340);
    arc(184, 348, 20, 20, 200, 340);
    arc(176, 359, 20, 20, 200, 340);
    arc(186, 374, 20, 20, 200, 340);
    arc(213, 372, 20, 20, 200, 340);
    arc(233, 370, 20, 20, 200, 340);
    arc(223, 390, 20, 20, 200, 340);
    arc(210, 380, 20, 20, 200, 340);
    
    //}
    
    //castles{
    line(200, 350, 210, 350);
    line(200, 349, 200, 347);
    line(211, 349, 211, 347);
    line(209, 347, 210, 347);
    line(208, 349, 208, 344);
    line(203, 349, 203, 346);
    line(200, 347, 202, 347);
    line(203, 346, 208, 344);
    arc(205, 344, 4, 5,170, 340);
    arc(195, 360, 20, 18, 180, 270);
    arc(214, 360, 20, 18, -90, 0);
    beginShape();
    vertex(200, 350);
    vertex(200, 340);
    vertex(196, 350);
    endShape();
    beginShape();
    vertex(210, 350);
    vertex(210, 340);
    vertex(214, 350);
    endShape();
    arc(205, 345, 10, 15, 180, 360);
    line(208, 350, 210, 360);
    line(204, 350, 202, 360);
    point(195, 355);
    point(215, 355);
    point(193, 359);
    point(217, 359);
    point(197, 359);
    point(213, 359);
    
    //capital city{
    //citadel
        fill(235, 220, 144);
        beginShape();
        vertex(190, 270);
        vertex(190, 250);
        vertex(193, 250);
        vertex(193, 270);
        vertex(193, 260);
        vertex(197, 260);
        vertex(197, 270);
        vertex(197, 255);
        vertex(203, 255);
        vertex(203, 270);
        vertex(203, 260);
        vertex(207, 260);
        vertex(207, 270);
        vertex(207, 250);
        vertex(210, 250);
        vertex(210, 270);
        endShape();
        line(200, 268, 200, 260);
        
        //town
        beginShape();
        vertex(180, 290);
        vertex(180, 287);
        vertex(185, 287);
        vertex(183, 287);
        vertex(183, 284);
        vertex(188, 284);
        vertex(188, 290);
        endShape();
        point(185, 290);
        beginShape();
        vertex(186, 284);
        vertex(186, 280);
        vertex(192, 280);
        vertex(192, 285);
        vertex(195, 285);
        vertex(195, 290);
        endShape();
        point(189, 283);
        arc(192, 290, 3, 5, 180, 360);
        beginShape();
        vertex(200, 288);
        vertex(200, 285);
        vertex(205, 285);
        vertex(203, 284);
        vertex(203, 282);
        vertex(208, 282);
        vertex(212, 286);
        vertex(212, 288);
        endShape();
        line(207, 288, 208, 288);
        point(204, 288);
        beginShape();
        vertex(180, 280);
        vertex(180, 275);
        vertex(190, 275);
        vertex(190, 280);
        endShape();
        arc(185, 274, 7, 7, 180, 360);
         arc(185, 280, 2, 3, 180, 360);
         beginShape();
         vertex(195, 280);
         vertex(195, 278);
         vertex(200, 278);
         vertex(197, 278);
         vertex(197, 275);
         vertex(205, 275);
         vertex(205, 280);
         endShape();
         line(202, 280, 202, 285);
         arc(201, 275, 4, 4, 180, 360);
         line(198, 281, 198, 284);
         beginShape();
         vertex(207, 275);
         vertex(210, 275);
         vertex(210, 280);
         endShape();
         point(208, 278);
         //walls
         noFill();
         beginShape();
         vertex(220, 285);
         vertex(210, 295);
         vertex(200, 295);
         vertex(190, 295);
         vertex(180, 295);
         vertex(173, 290);
         vertex(173, 280);
         vertex(178, 270);
         
         endShape();
         fill(235, 220, 144);
         beginShape();
         vertex(198, 295);
         vertex(198, 291);
         vertex(205, 291);
         vertex(205, 295);
         endShape();
         beginShape();
         vertex(190, 295);
         vertex(190, 291);
         vertex(193, 291);
         vertex(193, 295);
         endShape();
         beginShape();
         vertex(213, 295);
         vertex(213, 291);
         vertex(210, 291);
         vertex(210, 295);
         endShape();
         beginShape();
         vertex(182, 295);
         vertex(182, 291);
         vertex(179, 291);
         vertex(179, 295);
         endShape();
         beginShape();
         vertex(175, 290);
         vertex(175, 286);
         vertex(172, 286);
         vertex(172, 290);
         endShape();
         beginShape();
         vertex(175, 280);
         vertex(175, 276);
         vertex(172, 276);
         vertex(172, 280);
         endShape();
         beginShape();
         vertex(180, 270);
         vertex(180, 266);
         vertex(177, 266);
         vertex(177, 270);
         endShape();
         point(201.5, 294);
         point(201, 294);
    //}
    
    //your castle{
    fill(235, 220, 144);
    rect(135, 375, 4, 10);
    point(137, 378);
    point(137, 381);
    beginShape();
    vertex(130, 390);
    vertex(130, 380);
    vertex(133, 380);
    vertex(133, 390);
    vertex(133, 385);
    vertex(138, 385);
    vertex(138, 390);
    vertex(138, 384);
    vertex(141, 384);
    vertex(141, 389);
    vertex(141, 385);
    vertex(143, 385);
    vertex(143, 389);
    vertex(143, 382);
    vertex(147, 382);
    vertex(147, 389);
    endShape();
    arc(145, 382, 4, 4, 180, 360);
    //}
    //}
    
    //mountains{
    beginShape();
    vertex(240, 320);
    vertex(245, 317);
    vertex(247, 315);
    vertex(250, 310);
    vertex(255, 305);
    vertex(257, 300);
    endShape();
    bezier(257, 300, 260, 310, 270, 315, 280, 320);
    line(254, 310, 253, 315);
    line(257, 309, 260, 315);
    line(260, 315, 265, 320);
    
    
    bezier(120, 450, 140, 440, 135, 430, 140, 420);
    bezier(140, 420, 150, 435, 150, 440, 170, 450);
    beginShape();
    vertex(140, 425);
    vertex(140, 430);
    vertex(139, 435);
    vertex(138, 440);
    endShape();
    arc(150, 430, 10, 30, 100, 150);
    
    beginShape();
    vertex(170, 460);
    vertex(180, 455);
    vertex(185, 451);
    vertex(189, 446);
    vertex(191, 440);
    vertex(193, 445);
    vertex(196, 443);
    vertex(198, 435);
    vertex(200, 440);
    vertex(204, 447);
    vertex(210, 453);
    vertex(215, 455);
    endShape();
    line(200, 444, 205, 455);
    line(190, 447, 187, 453);
    line(195, 450, 197, 457);
    //}
    
    //rivers{
    noFill();
    strokeWeight(3);
    beginShape();
    vertex(90, 285);
    vertex(100, 280);
    vertex(110, 280);
    vertex(115, 283);
    vertex(120, 285);
    vertex(130, 287);
    vertex(135, 290);
    vertex(140, 291);
    vertex(145, 291);
    vertex(150, 291);
    vertex(160, 292);
    vertex(165, 292);
    vertex(168, 294);
    vertex(180, 300);
    vertex(185, 299);
    vertex(190, 300);
    vertex(200, 303);
    vertex(210, 300);
    vertex(215, 301);
    vertex(220, 295);
    vertex(225, 294);
    vertex(235, 290);
    vertex(240, 285);
    vertex(250, 274);
    vertex(270, 265);
    vertex(290, 260);
    vertex(300, 250);
    vertex(310, 249);
    vertex(325, 249);
    endShape();
    line(290, 260, 300, 240);
    line(300, 240, 310, 237);
    line(300, 240, 301, 230);
    //}
  
  //}
  noFill();
  //sea{
  strokeWeight(2);
  bezier(100, 150, 300, 170, 350, 300, 500, 380);
  
  //island
  beginShape();
  vertex(165, 125);
  vertex(150, 130);
  vertex(145, 135);
  vertex(148, 136);
  vertex(155, 140);
  vertex(160, 141);
  vertex(170, 145);
  vertex(175, 144);
  vertex(180, 145);
  vertex(190, 145);
  vertex(195, 147);
  vertex(200, 143);
  vertex(204, 140);
  vertex(207, 137);
  vertex(204, 136);
  vertex(200, 134);
  endShape();
  line(185, 133, 180, 140);
  line(188, 132, 185, 141);
  line(190, 134, 195, 140);
  line(170, 132, 168, 137);
  line(167, 128, 163, 136);
  beginShape();
  vertex(160, 130);
  vertex(165, 125);
  vertex(170, 123);
  vertex(175, 128);
  vertex(177, 133);
  vertex(180, 134);
  vertex(185, 130);
  vertex(190, 128);
  vertex(194, 130);
  vertex(200, 135);
  endShape();
  
  //waves
  arc(450, 120, 20, 20, 45, 135);
  arc(430, 135, 20, 20, 45, 135);
  arc(400, 125, 20, 20, 45, 135);
  arc(360, 115, 20, 20, 45, 135);
  arc(445, 300, 20, 20, 45, 135);
  arc(415, 305, 20, 20, 45, 135);
  arc(405, 270, 20, 20, 45, 135);
  arc(405, 150, 20, 20, 45, 135);
  arc(275, 155, 20, 20, 45, 135);
  arc(295, 160, 20, 20, 45, 135);
  arc(310, 170, 20, 20, 45, 135);
  arc(340, 165, 20, 20, 45, 135);
  arc(305, 125, 20, 20, 45, 135);
  arc(250, 130, 20, 20, 45, 135);
  arc(380, 150, 20, 20, 45, 135);
  arc(360, 145, 20, 20, 45, 135);
  arc(370, 250, 20, 20, 45, 135);
  arc(377, 260, 20, 20, 45, 135);
  arc(400, 285, 20, 20, 45, 135);
  arc(430, 280, 20, 20, 45, 135);
  arc(430, 265, 20, 20, 45, 135);
  arc(460, 285, 20, 20, 45, 135);
  arc(460, 315, 20, 20, 45, 135);
  arc(475, 302, 20, 20, 45, 135);
  arc(465, 250, 20, 20, 45, 135);
  arc(450, 240, 20, 20, 45, 135);
  arc(430, 220, 20, 20, 45, 135);
  arc(455, 225, 20, 20, 45, 135);
  arc(380, 228, 20, 20, 45, 135);
  arc(350, 230, 20, 20, 45, 135);
  arc(345, 210, 20, 20, 45, 135);
  arc(375, 200, 20, 20, 45, 135);
  arc(385, 215, 20, 20, 45, 135);
  arc(320, 190, 20, 20, 45, 135);
  arc(348, 185, 20, 20, 45, 135);
  arc(378, 175, 20, 20, 45, 135);
  arc(410, 179, 20, 20, 45, 135);
  arc(430, 170, 20, 20, 45, 135);
  arc(407, 205, 20, 20, 45, 135);
  arc(435, 195, 20, 20, 45, 135);
  arc(445, 155, 20, 20, 45, 135);
  arc(455, 185, 20, 20, 45, 135);
  arc(465, 335, 20, 20, 45, 135);
  arc(110, 135, 20, 20, 45, 135);
  arc(120, 115, 20, 20, 45, 135);
  arc(135, 125, 20, 20, 45, 135);
  arc(145, 115, 20, 20, 45, 135);
  arc(179, 112, 20, 20, 45, 135);
  arc(205, 119, 20, 20, 45, 135);
  arc(235, 114, 20, 20, 45, 135);
  arc(225, 134, 20, 20, 45, 135);
  arc(205, 154, 20, 20, 45, 135);
  arc(175, 144, 20, 20, 45, 135);
  arc(145, 134, 20, 20, 45, 135);
  arc(245, 149, 20, 20, 45, 135);
  arc(255, 164, 20, 20, 45, 135);
  arc(285, 194, 20, 20, 45, 135);
  arc(305, 204, 20, 20, 45, 135);
  arc(235, 164, 20, 20, 45, 135);
  arc(272, 176, 20, 20, 45, 135);
  //ship
  arc(400, 250, 20, 20, 130, 180); 
  arc(410, 240, 50, 30, 40, 140);
  arc(420, 250, 20, 20, 0, 50);
  
  //sail and mast
  line(410, 230, 410, 253);
  arc(410, 242, 20, 24, -90, 90);
  arc(410, 242, 10, 24, -90, 90);
  
  //waves on ship
  arc(390, 255, 10, 10, 30, 150);
  arc(398, 255, 10, 10, 30, 150);
  arc(406, 255, 10, 10, 30, 150);
  arc(414, 255, 10, 10, 30, 150);
  arc(422, 255, 10, 10, 30, 150);
  arc(430, 255, 10, 10, 30, 150);
  
  
  
  //seamonster
  arc(270, 150, 20, 20, 240, 360);
  arc(267, 150, 20, 20, 260, 360);
  arc(278, 147, 10, 10, 30, 150);
  
  arc(300, 150, 20, 20, 180, 360);
  arc(300, 150, 12, 12, 180, 360);
  arc(292, 147, 10, 10, 30, 150);
  arc(308, 147, 10, 10, 30, 150);
  
   arc(330, 150, 20, 20, 180, 270);
   arc(330, 150, 12, 12, 180, 270);
   arc(322, 147, 10, 10, 30, 150);
   
   arc(330, 142, 10, 4, -90, 90); 
    point(334, 142);

//}

};    
var background20 = function() {
    background11();
    //ground
    noStroke();
    fill(3, 87, 0);
    ellipse(300, 500, 2200, 400);
    
    //lava
    fill(255, 0, 0);
    noStroke();
    arc(190, 400, 150, 380, 180, 360);
    bezier(0, 400, 150, 300, 100, 100, 400, 400);
    
    //volcano{
    fill(0);
    pushMatrix();
    bezier(0, 400, 250, 250, 300, 350, 600, 380);
    quad(0, 399, 0, 600, 600, 600, 600, 379);
    bezier(100, 350, 150, 300, 200, 100, 250, 350);
    translate(100, 30);
    rotate(20);
    translate(-30, -100);
    quad(170, 230, 150, 280, 210, 280, 210, 250); 
    quad(180, 210, 175, 240, 200, 230, 190, 230);
    quad(195, 210, 190, 230, 215, 240, 205, 195);
    rect(180, 220, 20, 20);
    quad(240, 250, 220, 250, 220, 290, 230, 290);
    popMatrix();
    //}
    
    
    //lava cracks
    noStroke();
    fill(255, 0, 0);
    triangle(250, 300, 240, 400, 240, 300);
    triangle(240, 400, 240, 395, 280, 415);
    triangle(245, 380, 245, 385, 200, 390);
    
    //fire
    for(var i = 0; i < width; i += 10) {
        fill(random(100, 255), 0, 0);
        triangle(i, 450, i+5, 430, i+10, 450);
        fill(255, 255, 0);
        triangle(i+3, 450, i+5,  435, i+7, 450);
    }    
    
     //lava spurts{
    noStroke();
    fill(255, 0, 0);
    ellipse(210, 280, 8, 3);
    rect(185, 220, 9, 1);
    ellipse(205, 326, 90, 2);
    rect(110, 332,50, 2, 10); 
        
    noFill();
    stroke(255, 0, 0);
    strokeWeight(1);
    arc(210, 290, 10, 20, 270, 360);
    arc(190, 225, 10, 10, 270, 360);
    line(237, 255, 237, 265);
    line(235, 295, 235, 315);
    strokeWeight(2);
    arc(210, 295, 7, 30, 270, 360);
   line(187, 221, 187, 224);
    arc(190, 226, 10, 10, 270, 360);
    bezier(195, 226, 190, 234, 190, 240, 200, 240);
    line(200, 240, 200, 245);
    bezier(200, 245, 210, 245, 220, 250, 230, 250);
    arc(232, 260, 10, 20, 270, 360); 
    line(236, 255, 236, 285);
    line(237, 270, 237, 290);
    line(236.5, 285, 236.5, 310);
    line(235, 310, 235, 325);
    arc(165, 332, 30, 10, 180, 270); 
   arc(175, 332, 30, 10, 180, 270); 
   arc(110, 340, 10, 16, 180, 270);
   line(105, 340, 105, 345);
   bezier(105, 345, 105, 350, 100, 360, 70, 410);
   bezier(105, 345, 115, 350, 110, 360, 90, 450);
   bezier(110, 360, 115, 370, 90, 390, 90, 450);
    noStroke();
    fill(0);
    triangle(208, 279, 210, 290, 200, 280);
    triangle(230, 255, 235, 255, 232, 245);
    quad(235, 250, 240, 250, 240, 243, 240, 240);
    //}
    
   fill(3, 87, 0);
    rect(0, 450, 600, 150);
    drawCastleMap(0, 440, fortress1);
    drawCastleMap(300, 425, fortress2);
    noStroke();
    
    //fortress{
    pushMatrix();
    translate(200, 300);
    rotate(-30);
    translate(-200, -350);
    //big tower{
    fill(97, 97, 97);
    quad(150, 250, 140, 300, 180, 300, 170, 250);
    rect(190, 270, 5, 30);
    triangle(140, 300, 180, 300, 160, 305);
    quad(150, 300, 155, 320, 165, 320, 170, 300);
    
    //}
    popMatrix();
    
    fill(97, 97, 97);
     
    
    
    //frontal wall and tower{
    rect(165, 340, 100, 10);
    rect(205, 330, 20, 20);
    quad(265, 340, 265, 350,  280, 325, 280, 315);
    quad(260, 340, 260, 350,  275, 325, 275, 315);
    rect(275, 305, 5, 18);
    //}
    
    //volcano peak turrets{
    //top right
    noStroke();
    fill(97, 97, 97);
    rect(202, 180, 5, 20);
    
    //top left
    quad(173, 190, 170, 230, 178, 225, 175, 190);
    triangle(170, 229, 174, 236, 178, 224);
    //}
    
    //wall and tower fortifications{
    for(var i = 150; i < 170; i += 2.1) {
        rect(i, 248, 1, 2);   
    }  
    rect(275, 303, 1, 2);
    rect(277, 303, 1, 2);
    rect(279, 303, 1, 2);
    
    pushMatrix();
    translate(200, 300);
    rotate(-30);
    translate(-200, -350);
    rect(155, 330, 10, 20);
    rect(155, 328, 1, 2);
    rect(157, 328, 1, 2);
    rect(159, 328, 1, 2);
    rect(161, 328, 1, 2);
    rect(162.5, 328, 1, 2);
    rect(164, 328, 1, 2);
    popMatrix();
    
    for(var i = 165; i < 265; i +=2){
        rect(i, 339, 1, 2);
    }
    pushMatrix();
    translate(200, 300);
    rotate(40);
    translate(-200, -350);
    for(var i = 205; i < 225; i += 1.9) {
         rect(i, 328, 1, 3);   
    }    
    popMatrix();
    noFill();
    stroke(97, 97, 97);
    strokeWeight(3);
    arc(183, 290, 35, 20, 230, 310);
    noStroke();
    //}
    
    //lights{
    fill(255, 0, 0);
    
    ellipse(174, 215, 1, 2);
    ellipse(174, 220, 1, 2);
    ellipse(174, 225, 1, 2);
    
    ellipse(205, 183, 1, 2);
    ellipse(205, 188, 1, 2);
    ellipse(205, 193, 1, 2);
    
    ellipse(192.5, 275, 1, 1);
    ellipse(192.5, 280, 1, 1);
    ellipse(192.5, 285, 1, 1);
    ellipse(192.5, 290, 1, 1);
    
    ellipse(278, 307, 1, 1);
    ellipse(278, 312, 1, 1);
    ellipse(278, 317, 1, 1);
    
    for(var i = 206; i < 225; i += 3) {
         rect(i, 334, 1, 1);   
    }
    pushMatrix();
    translate(200, 300);
    rotate(-30);
    translate(-200, -350);
    for(var i = 153; i <= 170; i += 5) {
        ellipse(i, 255, 1, 1);
        
        ellipse(i, 260, 1, 1);
        ellipse(i, 265, 1, 1);
        ellipse(i, 270, 1, 1);
        ellipse(i, 275, 1, 1);
        ellipse(i, 280, 1, 1);
        ellipse(i, 285, 1, 1);
        
        ellipse(i-5, 290, 1, 1);
        ellipse(i-5, 295, 1, 1);
        ellipse(i+5, 290, 1, 1);
        ellipse(i+5, 295, 1, 1);
    }
    popMatrix();
    //}
    
    //entrance
    fill(255, 0, 0);
    noStroke();
    arc(215, 350, 5, 20, 180, 360);
    //}
    
    //overlapping black stone
   fill(0);
   triangle(110, 345, 125, 345, 108, 325);
    
    
    drawCastleMap(150, 300, city1);
    
    pushMatrix();
    translate(20, 350);
    rotate(20);
    translate(-20, -380);
    drawCastleMap(20, 350, city2);
    popMatrix();
    //lava
    noStroke();
    fill(255, 0, 0);
    beginShape();
    vertex(60, 360);
    vertex(65, 380);
    vertex(90, 390);
    vertex(130, 380);
    vertex(125, 370);
    vertex(123, 380);
    vertex(118, 375);
    vertex(110, 360);
    vertex(100, 370);
    vertex(95, 372);
    vertex(85, 350);
    endShape();
};  
var finalBackground = function() {
    background(102, 102, 102);



//wall{
  for(var i = 0; i < width; i += 40) {
      for(var y = 0; y < 300; y += 44) {
            fill(random(150, 200));
            noStroke();
            rect(i, y, 38, 20, 5);
      }
  }  
  for(var i = -20; i < width; i += 40) {
      for(var y = -22; y < 300; y += 44) {
            fill(random(150, 200));
            noStroke();
            rect(i, y, 38, 20, 5);
      }
  }  
//}

//pillars{
var Pillar = function(x) {
    pushMatrix();
    translate(x-100, 0);
    fill(207, 177, 41);
    rect(100, 0, 50, 380);
    ellipse(125, 380, 50, 15);
    strokeWeight(5);
    stroke(224, 199, 98);
    line(145, 0, 145, 379);
    stroke(209, 183, 77);
    line(140, 0, 140, 381);
    stroke(196, 169, 61);
    line(133, 0, 133, 382);
    stroke(184, 159, 57);
    line(124, 0, 124, 383);
    stroke(168, 143, 42);
    line(116, 0, 116, 382);
    stroke(150, 126, 30);
    line(110, 0, 110, 381);
    stroke(150, 126, 30);
    line(103, 0, 103, 379);
    noStroke();
    popMatrix();
};
Pillar(50);
Pillar(150);
Pillar(400);
Pillar(500);
//}

//steps, and carpet{
fill(77, 77, 77);
rect(0, 400, 600, 10);
fill(212, 0, 0);
quad(280, 310, 220, 400, 380, 400, 320, 310);
quad(220, 410, 100, 600, 500, 600, 380, 410);
fill(150, 0, 0);
rect(220, 400, 160, 10);
//}

//throne{
fill(158, 133, 22);
noStroke();
rect(272, 280, 55, 70);
rect(265, 315, 70, 30);
fill(207, 177, 41);
noStroke();
quad(280, 320, 270, 335, 330, 335, 320, 320);
quad(272, 310, 260, 320, 270, 320, 280, 310);
quad(320, 310, 330, 320, 340, 320, 328, 310);

fill(158, 133, 22);
noStroke();
rect(260, 320, 10, 40);
rect(330, 320, 10, 40);
rect(260, 335, 70, 25);
//}

//king{
//body
fill(0, 89, 255);
noStroke();
rect(285, 297, 30, 5);

//arms and hands
stroke(0, 89, 255);
noFill();
strokeWeight(8);
beginShape();
vertex(270, 317);
vertex(278, 312);
vertex(285, 300);
vertex(315, 300);
vertex(322, 312);
vertex(330, 317);
endShape();
noStroke();
fill(217, 185, 4);
ellipse(330, 317, 8, 8);
ellipse(270, 317, 8, 8);
rect(326, 317, 8, 5, 3);
rect(266, 317, 8, 5, 3);

//legs and feet
stroke(0, 89, 255);
noFill();
strokeWeight(10);
beginShape();
vertex(294, 330);
vertex(296, 325);
vertex(304, 325);
vertex(306, 330);
endShape();
noStroke();
fill(0, 89, 255);
quad(289, 330,  299, 330, 294, 340, 280, 340);
quad(311, 330,  301, 330, 306, 340, 320, 340);
ellipse(313, 340, 13, 8);
ellipse(287, 340, 13, 8);
quad(307, 340, 310, 355, 317, 355, 319, 340);
quad(293, 340, 290, 355, 283, 355, 281, 340);
fill(0, 0, 0);
quad(307, 345, 308, 365, 315, 365, 319, 345);
quad(293, 345, 292, 365, 285, 365, 281, 345);
ellipse(288, 365, 8, 12);
ellipse(312, 365, 8, 12);

//head
fill(217, 185, 4);
rect(296, 293, 8, 3);
ellipse(300, 288,10, 16);
fill(240, 211, 65);
ellipse(300, 288,1, 3);
fill(0);
ellipse(298, 286, 1, 1);
ellipse(302, 286, 1, 1);
ellipse(300, 290, 3, 0.5);

//hair
fill(0, 0, 0);
ellipse(294, 285, 2, 3);
ellipse(294, 287, 3, 3);
ellipse(298, 283, 3, 3);
ellipse(296, 284, 3, 3);
ellipse(300, 283, 2, 2);
ellipse(305, 285, 3, 3);
ellipse(303, 284, 3, 2);
ellipse(305, 287, 2, 3);
//crown
fill(255, 230, 0);
rect(294, 280, 12, 4);
rect(297, 275, 6, 8, 2);
fill(0, 255, 30);
ellipse(300, 280, 2, 4);

//torso armor
fill(158, 158, 158);
quad(285, 300, 290, 325, 310, 325, 315, 300);
fill(138, 138, 138);
quad(285, 300, 290, 325, 295, 325, 290, 300);
fill(179, 179, 179);
quad(300, 300, 305, 325, 310, 325, 315, 300);
fill(204, 204, 204);
quad(305, 300, 310, 325, 310, 325, 315, 300);

//shoulders
fill(199, 199, 199);
pushMatrix();
translate(285, 300);
rotate(-20);
arc(0, 0, 20, 10, 180, 360);
translate(30, 11);
rotate(40);
arc(0, 0, 20, 10, 180, 360);
popMatrix();


//}

//hands and pearl{

    stroke(120,0, 0);
    strokeWeight(10);
    line(250, 550, 240, 520);
    line(350, 550, 360, 520);
    line(240, 520, 240, 510);
    line(360, 520, 360, 510);
    pearl(300, 480, 3);
    stroke(120,0, 0);
    strokeWeight(50);
    line(345, 545, 450, 650);
    line(255, 545, 150, 650);
    noStroke();
    fill(120, 0, 0);
    triangle(310, 555, 330, 560, 330, 530);
    ellipse(330, 555, 40, 15);
    triangle(290, 555, 270, 560, 270, 530);
    ellipse(270, 555, 40, 15);
    stroke(140, 140, 0);
    strokeWeight(2);
    noFill();
    for(var i = 350; i < 400; i ++) {
        arc(i, i+200, 50, 50, 180, 320);   
    }    
     for(var i = 250; i > 200; i --) {
        arc(i, -i+800, 50, 50, -140, 0);   
    }    
    
    
    
//}

  
};    
//}

var textBubble = function(startX, endX, y, size) {
    for(var i = 255; i >0; i --) {
       stroke(255, 255, 255, 2);
        strokeWeight(i/2*size);
       line(startX, y, endX, y);
    }
};   

//{
var meBlockSize = 7.5;
var homeButtonPage = 0;
var homeButton = function(x, y, s) {
      
    if(dist(mouseX, mouseY, x, y) <= s/2) {
        
        homeButtonPage = 1;
        if(click) {
            
            storyPage = 1;
            gamePage = 1;
            tutorialPage = 1;
            unlockedLevels = 1;
            page = 'tutorial';   
        }    
    }    else {
        homeButtonPage = 0;   
    }    
    
    
    var homeButtonArray = [
        [
        '      21111111      ',
        '    222222111111    ',
        '   32222222211111   ',
        '  3332222222221111  ',
        ' 333332222222222111 ',
        ' 433333322222222211 ',
        '44333333332222222221',
        '4eff33f333efff2f22f1',
        '5d43f3f333d32f2e22f2',
        '5d44e3e333c33e3d22e2',
        '5cddd4d333bcde33dd22',
        '5c5444c333b33d33c322',
        '5b5444b333a33d33b332',
        '6a5544abc3a33c33a333',
        ' 655544444333333333 ',
        ' 665555444443333333 ',
        '  6665554444444333  ',
        '   66655554444444   ',
        '    666655554444    ',
        '      66655554      ',
        
        
        ],
        [
            
            
        '      56666666      ',
        '    555555666666    ',
        '   45555555566666   ',
        '  4445555555556666  ',
        ' 344445555555555666 ',
        ' 344444455555555566 ',
        '43444444445555555556',
        '4eff44f444efff5f55f6',
        '3d44f4f444d44f5e55f5',
        '3d44e4e444c44e4d55e5',
        '2cddd4d444bcde44dd55',
        '2c2344c444b44d44c455',
        '2b2334b444a44d44b445',
        '1a2233abc4a44c44a444',
        ' 133333333444444444 ',
        ' 113333333333444444 ',
        '  1113333333333344  ',
        '   111333333333333  ',
        '    111133333333    ',
        '      11122223      ',
        
        
        ],
            
        
        
    
    
    ]; 
    
    for(var i =0; i < homeButtonArray[homeButtonPage].length; i ++) {
        
        for(var j = 0;  j < homeButtonArray[homeButtonPage][i].length ; j ++) {
            noStroke();
            pushMatrix();
            translate(x-s/2, y-s/2);
            
            switch(homeButtonArray[homeButtonPage][i][j]) {
                
                case '1':
                    fill(181, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;
                case '2':
                    fill(148, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;
                case '3':
                    fill(117, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;
                case '4':
                    fill(92, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;
                case '5':
                    fill(71, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;
                case '6':
                    fill(51, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;
                case 'a':
                    fill(125, 125, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;     
                case 'b':
                    fill(115, 115, 0);
                   rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;    
                case 'c':
                    fill(140, 140, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;  
                case 'd':
                    fill(158, 158, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;  
                case 'e':
                    fill(179, 179, 0);
                    rect(j*meBlockSize, i*meBlockSize, meBlockSize, meBlockSize);
                break;  
                    case 'f':
                    fill(201, 201, 0);
                   rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;   
                
                
                    
                    
            }    
            
            popMatrix();
            
        }    
    }
      
     
};    
var menuBlockSize = 7.5;
var menuBackground = [
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooboobbbo', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooorrooboo', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooorrooooo', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooorrroooo',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooorroooo',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooorrroo',  'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooorroo',  'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooorrooo',   'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooorrroooo', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooorrrrooo',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooorrroo',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooorro', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooorr',   'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooooor',  'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooooor',   'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooooor',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooooorr',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooooorr', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooorrrr', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooorrorr', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooorooor', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooorooor',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooroorr',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooorooro', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooroorr', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooorooor',   'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooorooor',   'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooorrooo',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooorrroooo',
'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooorrroooooo', 'oobbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooorroooooooo', 'oooobbbobbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooorrroooooo', 'oooorroobbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooorrrooooo',  'ooooorroobbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooooorrooooo',
'oooooorooobbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooooorrrrooooo',
'oooorrrrooobbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbooooooooooooooorrrroooooo', 'ooorrorrooooobbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbboooooooooooooooooorroooooooo', 'ooorooorrooooooooobbbbbbbbbbbbbbbbbbbbbrbbbbbbbbbbooooooooooooooooooooorrroooooo', 'ooorroorrrooooooooooooooobbbbbbbbbbbbbbrrbbbbbbooooooooooooooooooooooooorroooooo',
'oooorooorroooooooooooooooooooooobbbbooorrooooooooooooooooooooooooooooooorrrooooo',
'ooooooooooooooooooooooooooooooooooooooorrrooooooooooooooooooooooooooooorrorroooo', 'oooooooooorooooooooooooooooooroooooororrRrroooooooooooooooooooooorooooorooorrooo',
'oooorooooroooooooooooroooooorroooooorrrrRrrooooooooooroooorooooorroooorrooorrooo',
'ooorroooorrooooooooorroooooorrroooorrrrRRrrooooroooorroooorrrooorRrooorrrooroooo', 'oorrRroorrrrroooooorrrroooorrRrooorrRrRyRRrroorrrooorrroorrrrrorrRRroorRrrrrooooo', 'rrrRRrrrrRRrrrrrrrrrRrrrrrrrRRrrrrRyRyyyRyRrrrrRrrrrrRrrrrRrRrrrRRRrrrrRRrrrrrrr', 'rRRRRRrrRRyRRrrrRRrRRRrrrrRRRyRrr22y22y22y22rRrRRrrrrRRrrRRryRrRRRRRrrRRRRrRrRRr', 'RyRRRRRrRRyyRRrRRRRRyRRRrRRRRyRRr22333333322RRRyRRRrRRRRyRRRyyRRRyyRRRRyRRRRrRyR',
'yyyRyyRRyRyyyRRRyyRRyyRRRyyRyyyRR23444444432yRyyRyRRyyRyyyRyyyRyRRyyRRyyyRyyRyyy',
'y63y35y25y12y61y22y34y22y16y23y42344ooooo44343y23y55y12y54y12y63y25y34y55y62y14y', '65143261524361534615423534615432644oyoyoyo44156423615436154236514653416543615436', '6544232514363142635416253461542344ooooooooo4165422451423614361436124361432614212', '5312421512436514365124361436512434yoOoOoyoO4653143651436125436124361543615243651', '5164236543615436153426153461341634ooooooooo4165431654361425346146325436143625113',
'5316432651246524562163521416523414OoOoOoOoy4615243612463541623465142364162346162',
'5614236514326154365245143615436214ooooooooo4316435216324163541634261246346143262', '6531243615346152341636512463514264OoOoOoOoO4651236546524361543614536513265142362', '1653416532461543621541653416354214ooooooooo4163542635314261253461543612436461253', 'GGGggGgGGGgggggGggGGggggGgggGGGgBBBBBBBBBBBBBGGGGGGggggggGgggGggggGgggGGggggggGG', 'gggGgggGgggGGgggGgggGGggggggGgBBBBBBBBBBBBBBBBBgGGGGGGGgggGggGGGgGggggGGGGggGGgg',
'GGGGgGGGggggggGggGGgggGgGGBBBBBBBBBBBBBBBBBBBBBBBBggGGGggggggGgGGgGggggGGGGgGggg',   'GggGgGgggGggGGggggGggggBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGgggggGggggGGGgggGGGGGgggGg',
'GgggGGgggGggggBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBggGgGGGgGgggGGgggggG',   'GGgGgBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBgggggGGGg
    
    
];
var homeArray = [
    
  
  
'                                                                                ',
'                                                                                ',
'  555555    555555    5      5   55555     555    55555555                      ',
' 44444455   4444455  445    445  44  55   44445   3  34  4                      ',
' 34    4   34    45  3434  3434  34  45  34   34     23                         ',
' 34        34    34  34 3434 34  34333   34   34     62                         ',
' 23        23    23  23  23  23  26222   2333223     62                         ',
' 62    3   62    62  62  62  62  62  34  6666662     16                         ',
' 16555245  16555165  16  16  16  16  23 16     16    16                         ',
'  162344    162344   162 16 162  11264  162   162   6113                        ',
'                                                                                ',
'                                                                                ',
'                                                           5555                 ',
' gg                                                       334455                ',
' Ggg                                                     22344455               ',
' GGgg                                                    22233455               ',
'  GGgg.//RRRR  RRR         R                            333333445               ',
'   GGggr..//RR /R         //R     ..//RR  RRR  /RR       eses3445               ',
'    GGgg    /R /R        // /R    r.r./R  /R    /R      322333345               ',
'    rGGgg      ./        /   R    r.   R  /R    //       11223344               ',
'    rrGGgg     ./       ..   /R   r.      //    ./       11122233               ',
'    r. GGgg    r.       ./   /R   rr./RR  ./RRR/./       111123444              ',
'    r.  GGgg   r/  /RR  r/./r/R       /R  rr..//..         SSssss  4555         ',
'    r./  GGgRR rr   /R  r.   //   /   .R  ./    .r55445 5555555444624455        ',
'     r...////R rr.////  r.   r//  ..././  r.    r544445555555544331233455       ',
'      rrrrrr/gg rr../  rr.   r./  rrr../  r./  .44433325554444433331233455      ',
'            GGgg                                443222255444444333261222455     ',
'             GGgg                                R1111r554444433226/.116./R     ',
'              GGgg                               R/..rr5544333332261/.rrr./R    ',
'               GGgg                             RR/..rr554333332222261/.rr./R   ',
'                GGgg                            R/..rrr5543332222222261/.rr./R  ',
'                 GGgg                          RR/..rr  5322222222222261/.rr./R ',
'                  GGgg                         R/..rr   4322222222226234 /.rr./R',
'                   GGgg   bb                  RR/..r    432226666666234    /.r./',
'                    GGgg   bb                 R/..r     422266666616234     /.r.',
'                     GGgggbb  45555RRRRRR1245RR/..r     422666666116234      /.6',
'                      GG34441234444///////1245R/.r      326666661116234        1',
'                       G3gb23123333.......12345.r       266666661116234         ',
'                     b bbb122312222rrrrrrrr12345r        66666611116234         ',
'                     bbb  112231111         2344         66666111166234         ',
'                      b    1122                          6666111166234          ',
'                            11bb                         6611111116234          ',
'                             bbb                         6111111116234          ',
'                                                         1111110000000          ',
'                                                          00bb0000BBBBB         ',
'                                                          0bbbbBBBB/RR         ',
'                                                          BBbbBB////RR        ',
'                                                          RR////rr.//RR       ',
'                                                          RR/////r..//R       ',
'                                                         RR///.//r...//R      ',
'                                                         RR///.//r..///R     ',
'                                                        RR///..r//r..//R     ',
'                                                        RR///..r//r..///R    ',
'                                                       RR///..rrr/rr..//R     ',
'                                                       RR///..rrr/rrr..//R   ',
'                                                      RR//..rrrr /.rrr.//R   ',
'                                                      R///..rrr   .rrr..//R  ',
'                                                     RR///..rr     .rrrr../R  ',
'                                                     RR//..rr       .rrr../R  ',
'                                                    RR//..rr         .rrr../R ',
'                                                    RR//..rr         .rrr..//R',
'                                                   RR//..rr           .rrr..//R',
'                                                   RR/..rr             .rrr../R',
'                                                  44455rr              ..rrr../R',
'                                                  333455r               .rrr..//',
'                                                  2222345               ..rrrr.5',
'                                                  6222345                ..rr345',
'                                                  1622345                 166234',
'                                                  1622345                 166234',
'                                                  16223455                 16623',
'                                                   1622345                  1623',
'                                                   1622345                   162',
'                                                   16223455                   16',
'                                                    1622345                    1',
'                                                    1622345                     ',
'                                                    1622345                     ',
'                                                    16223455                    ',
'                                                     1622345                    ',
'                                                      162345                    ',
'                                                      162345                    ',
    
    
    
  
    
];
var drawHomeMap = function() {
    
     background(13, 3, 148);
    drawStars();
    for(var i = 0; i <menuBackground.length; i++) {
    for(var j = 0; j <menuBackground[i].length; j++) {
        noStroke();
        
        switch(menuBackground[i][j]) {
            case 'g':
                fill(18, 122, 0);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break; 
            case 'G':
                fill(15, 89, 0);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break; 
            case'B':
                    fill(89, 82, 0);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;  
            
            case 'b':
                //fill(0, 109, 145);
                //rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;    
            case '1':
                fill(115, 115, 115);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break; 
            case '2':
                fill(107, 107, 107);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;    
            case '3':
                fill(92, 92, 92);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;    
            case '4':
                fill(79, 79, 79);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;    
            case '5':
                fill(69, 69, 69);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;    
            case '6':
                fill(46, 46, 46);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;
            case '7':
                fill(97, 95, 83);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break; 
            case '8':
                fill(71, 69, 61);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;    
            case '9':
                fill(56, 55, 49);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;    
            case '0':
                fill(46, 45, 40);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;    
            case 'y':
                fill(255, 234, 0);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break; 
            case 'r':
                fill(255, 0, 0);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;   
            case 'R':
                fill(252, 168, 0);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break;
            case 'o':
                fill(0, 0, 0);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break; 
            case 'O':
                fill(255, 255, 255);
                rect(j*menuBlockSize, i*menuBlockSize, menuBlockSize+1, menuBlockSize+1);
            break; 
            
        }
        
    }    
}    
    for(var i = 0; i < homeArray.length; i ++) {
        for(var j = 0; j < homeArray[i].length; j ++) {
            var meId = homeArray[i][j];
              noStroke();
            switch(meId) {
                case '6':
                    fill(125, 125, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;     
                case '1':
                    fill(115, 115, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;    
                case '2':
                    fill(140, 140, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;  
                case '3':
                    fill(158, 158, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;  
                case '4':
                    fill(179, 179, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break;  
                    case '5':
                    fill(201, 201, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                 case 'e':
                    fill(199, 189, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                    fill(255, 255, 255);
                    rect(j*meBlockSize, i*meBlockSize+meBlockSize/4, meBlockSize/1.5, meBlockSize/1.5);
                    
                   fill(0, 0, 0);
                    rect(j*meBlockSize, i*meBlockSize+meBlockSize/4, meBlockSize/3, meBlockSize/2);
                break; 
                    case 'b':
                        fill(0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                case 'w':
                        fill(255, 255, 255);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                
                    case 'R':
                    fill(161, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                case '/':
                    fill(120, 0, 0);
                   rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                 case '.':
                    fill(97, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
              
                    case 'r':
                    fill(77, 0, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                    case 's':
                    fill(199, 189, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                case 'S':
                    fill(181, 169, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
               case 'g':
                    fill(135, 135, 135);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                case 'G':
                    fill(99, 99, 99);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                  break;
                case 'B':
                    fill(84, 73, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
                case '0':
                    fill(140, 121, 0);
                    rect(j*meBlockSize, i * meBlockSize, meBlockSize+1, meBlockSize+1);
                break; 
            }    
           
       
        }    
    } 
};
var home = function() {
    
    image(loadedBackgroundPics.drawHomeMap, 0, 0, width, height);
   
    homeButton(100, 430, 150);
    
   
   //credit{
   textAlign(CENTER, CENTER);
   textFont(createFont('monospace'));
   
   textSize(40);
   fill(51, 51, 51);
   text('by ȷosɘpɦ ɓɘɾɾƴ', 192, 570);
   text('by ȷosɘpɦ ɓɘɾɾƴ', 188, 570);
   text('by ȷosɘpɦ ɓɘɾɾƴ', 190, 572);
   text('by ȷosɘpɦ ɓɘɾɾƴ', 190, 568);
   fill(0, 0, 0);
   text('by ȷosɘpɦ ɓɘɾɾƴ', 190, 570);
   //}
};    
//}home stuff

var loadIndex = 0;
load = function() {
   switch(loadIndex) {
        case 0:
            drawHomeMap();
            loadedBackgroundPics.drawHomeMap = get(0, 0, width, height);
        break;    
       case 1:
           background1();
           loadedBackgroundPics.background1 = get(0, 0, width, height);
           break;
          case 2:
           background2();
           loadedBackgroundPics.background2 = get(0, 0, width, height);
           break; 
           case 3:
           background3();
           loadedBackgroundPics.background3 = get(0, 0, width, height);
           break;
           case 4:
           background4();
           loadedBackgroundPics.background4 = get(0, 0, width, height);
           break;
           case 5:
           background5();
           loadedBackgroundPics.background5 = get(0, 0, width, height);
           break;
           case 6:
           background6();
           loadedBackgroundPics.background6 = get(0, 0, width, height);
           break;
           case 7:
           background7();
           loadedBackgroundPics.background7 = get(0, 0, width, height);
           break;
           case 8:
           background8();
           loadedBackgroundPics.background8 = get(0, 0, width, height);
           break;
           case 9:
           background9();
           loadedBackgroundPics.background9 = get(0, 0, width, height);
           break;
           case 10:
           background10();
           loadedBackgroundPics.background10 = get(0, 0, width, height);
           break;
           case 11:
           background11();
           loadedBackgroundPics.background11 = get(0, 0, width, height);
           break;
           case 12:
           background12();
           loadedBackgroundPics.background12 = get(0, 0, width, height);
           break;
           case 13:
           background13();
           loadedBackgroundPics.background13 = get(0, 0, width, height);
           break;
           case 14:
           background14();
           loadedBackgroundPics.background14 = get(0, 0, width, height);
           break;
           case 15:
           background15();
           loadedBackgroundPics.background15 = get(0, 0, width, height);
           break;
           case 16:
           background16();
           loadedBackgroundPics.background16 = get(0, 0, width, height);
           break;
           case 17:
           background17();
           loadedBackgroundPics.background17 = get(0, 0, width, height);
           break;
           case 18:
           background18();
           loadedBackgroundPics.background18 = get(0, 0, width, height);
           break;
           case 19:
           background19();
           loadedBackgroundPics.background19 = get(0, 0, width, height);
           break;
           case 20:
           background20();
           loadedBackgroundPics.background20 = get(0, 0, width, height);
           break;
           
         case 21:
             
             Block.loadStone();
            Block.images.stone = get(0, 0, blockSize, blockSize);
             
        break;   
        case 22:
            
             Block.loadDirt();
            Block.images.dirt = get(0, 0,blockSize, blockSize);
             
        break;   
        case 23:
             
            Block.loadGrass();
            Block.images.grass = get(0, 0, blockSize, blockSize);
             
        break;   
        case 24:
            Block.loadBark();
            Block.images.bark = get(0, 0, blockSize, blockSize);
        break;   
        case 25:
            Block.loadLeaf();
                Block.images.leaf = get(0, 0, blockSize, blockSize);
        break;    
        case 26:
            Block.loadBrick();
            Block.images.brick = get(0, 0, blockSize, blockSize);
            
        break;    
        case 27:
            Block.loadWood();
            Block.images.wood = get(0, 0, blockSize, blockSize);
        break;   
        case 28:
            Block.loadBars();
            Block.images.bars = get(0, 0, blockSize, blockSize);
        break;    
        case 29:  
            Block.loadMud();
            Block.images.mud = get(0, 0, blockSize, blockSize);
        break;
        case 30:  
            Block.loadMagma();
            Block.images.magma = get(0, 0, blockSize, blockSize);
        break;
        case 31:  
            Block.loadBlack();
            Block.images.black = get(0, 0, blockSize, blockSize);
        break;
         case 32:
             
             Sprite.loadStone();
            Sprite.images.stone = get(0, 0, blockSize, blockSize);
             
        break;   
        case 33:
            
             Sprite.loadDirt();
            Sprite.images.dirt = get(0, 0, blockSize, blockSize);
             
        break;   
        case 34:
             
            Sprite.loadGrass();
            Sprite.images.grass = get(0, 0, blockSize, blockSize);
             
        break;   
        case 35:
            Sprite.loadBark();
            Sprite.images.bark = get(0, 0, blockSize, blockSize);
        break;   
        case 36:
            Sprite.loadLeaf();
                Sprite.images.leaf = get(0, 0, blockSize, blockSize);
        break;    
        case 37:
            Sprite.loadBrick();
           Sprite.images.brick = get(0, 0, blockSize, blockSize);
            
        break;    
        case 38:
            Sprite.loadWood();
            Sprite.images.wood = get(0, 0, blockSize, blockSize);
            
        break;
        case 39:
            Sprite.loadBars();
            Sprite.images.bars = get(0, 0, blockSize, blockSize);
        break;   
          case 40: 
            Sprite.loadMud();
            Sprite.images.mud = get(0, 0, blockSize, blockSize); 
      
            
        break; 
        case 41:
          Sprite.loadMagma();
            Sprite.images.magma = get(0, 0, blockSize, blockSize);
      
            
        break; 
        case 42:
            finalBackground();
           loadedBackgroundPics.finalBackground = get(0, 0, width, height);
        break;    
        default:        
        if(page === 'load') {
               page = 'home';
        }       
        break; 
    }
    var loadIndexLength = 42;
    background(0, 74, 84);
   
    
    
    noStroke();
    fill(0, 0, 0);
    rect(200, 250, 200, 100, 20);
    fill(71, 71, 71);
    rect(210, 260, 1.65 *floor(loadIndex/loadIndexLength * 100), 80, 20);
    loadIndex ++;
    
    fill(255, 255, 255);
    textSize(30);
    textAlign(CENTER, CENTER);
    text('loading: '+floor(loadIndex/loadIndexLength * 90)+'%', 300, 400);
};  
var drawMap = function() {
    image(loadedBackgroundPics.background19, 0, 0, width, height);
    playButton();
};  
var tutorial = function() {
    switch(tutorialPage) {
        case 1:
        image(loadedBackgroundPics.background1, 0, 0, width, height);
        Text(98, 100, 1.5, "take tutorial?", 1);
        Text(100, 100, 1.5, "take tutorial?", 2);
        tutorialButton(100, 450, 150, 100);
        Text(125, 480, 2, "yes", 1);
        button(350, 450, 150, 100, "story");
        Text(395, 480, 2, "no", 1);
        if(click && mouseX > 100 && mouseX < 500 && mouseY > 450 && mouseY < 250) {
            level =0;
            setLevel();
            tutorialPage = 2;
        }    
        break;
        case 2:
           
            image(loadedBackgroundPics.background1, 0, 0, width, height);
          
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY = round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
            
            textFont(createFont('san serif'));
            textAlign(LEFT, TOP);
            textSize(20);
            fill(255, 255, 255);
           
             
             
             Sign(10, 390,"WASD to move");
             Sign(100, 390, "Go to the right");
             Sign(270, 360, "left click to use sword");
             Sign(330, 360, "right click to use bow");
             Sign(390, 360, "aim bow with mouse");
             Sign(450, 390, "that is an enemy. Kill him.");
             Sign(780, 360, "This is a checkpoint.");
             Sign(960, 360, "Your progress is now saved there.");
             Sign(1300, 390, "avoid, or kill anything dangerous.");
             Sign(levelW-120, 390, "continue right to advance.");
             
            runObjects();  
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }   
            
            if(player1[0].x >= levelW-blockSize*1.5) {
                
                storyPage = 1;
                page = 'story';
            }    
           popMatrix(); 
        break;    
    }
};  
var mapButton = function() {
    image(loadedBackgroundPics.background19, 20, 530,50, 50);
    if(mouseX >= 20 && mouseY >= 530 && mouseX <= 70 && mouseY <= 580){
        noFill();
        stroke(112, 112, 112);
        strokeWeight(4);
        rect(20, 530, 50, 50);
        if(click) {
            page = 'drawMap';
        }    
    }   
};   
var levelPicker = function() {
     image(loadedBackgroundPics.background12, 0, 0, width, height);
     
    Text(50, 50, 1, "arrow keys to scroll", 2); 
    pushMatrix();
    translate(-levelPickerScroll, 0);
    for(var i = 0; i < allLevels; i ++) {
          fill(207, 207, 207);
          rect(i*200+20, 200, 180, 180, 10);
          
          stroke(56, 56, 56);
          strokeWeight(10);
          noFill();
          arc(i*200+110, 270, 30, 80, 180, 360);
          noStroke();
          
          
          noStroke();
          fill(82, 82, 82);
          rect(i*200+80, 260, 60, 60, 20);
          
          fill(0);
          ellipse(i*200+110, 280, 10, 10);
          rect(i*200+108, 280, 4, 20, 5);
          
          
          
    }    
    for(var i = 0; i < unlockedLevels; i ++) {
        mcb(i*200+20, 200, 180, 180, i);
        fill(61, 61, 61);
        textAlign(CENTER, CENTER);
        textSize(40);
        text(i+1, i*200+110, 290);
    }    
    popMatrix();
    
    if(keys[RIGHT] && levelPickerScroll <= allLevels*187) {
        levelPickerScroll +=10;   
    }    
    if(keys[LEFT] && levelPickerScroll >= 0) {
        levelPickerScroll -= 10;   
    }    
};    
var game = function() {
  
    switch(gamePage) {    
        case -2:
            level = 22;
            image(loadedBackgroundPics.background5, 0, 0, width, height);
      
            player1[0].x = constrain(player1[0].x,player1[0].w,levelW-player1[0].w*2);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
        
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
                translateX =round(width/2 - player1[0].x);
           }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                translateY = round(height/2 - player1[0].y);
            } 
            translateY = round(height/2 - player1[0].y);
            pushMatrix();    
           
            if(cameraView) {
                translate(translateX, translateY);   
            }    
            runObjects();  
    
            player1[0].draw();   
         
            if(keys[82]) {
                resetLevel();
            
            }    
            popMatrix(); 
            pauseButton();
            backButton();
            levelPickerButton();
        break;    
        case -1:
            level = 21;
            image(loadedBackgroundPics.background5, 0, 0, width, height);
      
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
        
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
                translateX =round(width/2 - player1[0].x);
           }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                translateY = round(height/2 - player1[0].y);
            } 
            translateY = round(height/2 - player1[0].y);
            pushMatrix();    
           
            if(cameraView) {
                translate(translateX, translateY);   
            }    
            runObjects();  
    
            player1[0].draw();   
         
            if(keys[82]) {
                resetLevel();
            
            }    
            popMatrix(); 
            pauseButton();
            backButton();
            levelPickerButton();
     
        break;    
        case 1:
            image(loadedBackgroundPics.background1, 0, 0, width, height);
            textBubble(100, 500, 250, 2);
            Text(50, 240, 1.8, "what do you do?", 1);
            
            mcb(80, 400, 440, 50, 2);
            Text(105, 416, 0.9, 'respond to the summons', 1);
            mcb(80, 460, 440, 50, -2);
            Text(120, 476, 0.9, 'chill in your castle', 1);
            
            if(click && mouseX >= 80 && mouseY >= 460 && mouseX <= 520 && mouseY <= 510) {
                gamePage = -2;
                level = 22;
                 setLevel();
                
            } 
        break;    
        case 2: 
            
            image(loadedBackgroundPics.background4, 0, 0, width, height);
            drawCastleMap(0, 100, castle1);
            drawCastleMap(350, 200, tower1);
            drawCastleMap(395, 200, wall1);
            Text(10, 20, 0.75, "you have reached the border of Gornar.", 1);
            Text(10, 50, 0.75, "They have high security, but you must", 1);
            Text(10, 80, 0.75, "get through.", 1);
            Text(60, 120, 0.9, "What do you do?", 1);
            
            mcb(80, 400, 440, 50, 3);
            Text(105, 416, 0.9, 'sneak through a window', 1);
            mcb(80, 460, 440, 50, -1);
            Text(105, 476, 0.9, 'run through the gates', 1);
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                gamePage = 3;
                level = 1;
                 setLevel();
                
            } 
            if(click && mouseX >= 80 && mouseY >= 460 && mouseX <= 520 && mouseY <= 510) {
                gamePage = -1;
                level = 21;
                 setLevel();
                
            } 
        break;    
        case 3:
            image(loadedBackgroundPics.background5, 0, 0, width, height);
          
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY = round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
            runObjects();  
        
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           popMatrix(); 
          pauseButton();
          backButton();
          levelPickerButton();
        break;   
        
        case 4:
            image(loadedBackgroundPics.background5, 0, 0, width, height);
            Text(10, 20, 0.75, "Congratulations! You made it through", 1);
            Text(10, 50, 0.75, "the first defense.", 1);
            Text(10, 80, 0.75, "Now You see a patrol coming.", 1);
            Text(10, 110, 0.75, "There are too many to fight.", 1);
            Text(10, 140, 0.75, "What do you do?", 1);
            
            mcb(80, 400, 440, 50, 5);
            Text(195, 416, 0.9, 'Fight them', 1);
            mcb(80, 460, 440, 50, 6);
            Text(115, 476, 0.9, 'hide behind a boulder', 1);
            
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 2;
                setLevel();    
                
            }    
            
        break;    
        case 5:
             image(loadedBackgroundPics.background5, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY = round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
            
            runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
            
            popMatrix();
           pauseButton();
           levelPickerButton();
            backButton();
        break;    
        case 6:
            image(loadedBackgroundPics.background7, 0, 0, width, height);
            
            Text(10, 20, 0.75, "The patrol passed through without", 1);
            Text(10, 50, 0.75, "noticing me.", 1);
            Text(10, 80, 0.65, "I see a mountain range in the distance.", 1);
            Text(10, 110, 0.75, "First, there is a forest.", 1);
           
            mcb(80, 400, 440, 50, 7);
            Text(145, 416, 0.9, 'Enter the forest', 1);
           
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 3;
                setLevel();
        
            } 
            
        break;    
        case 7:
             image(loadedBackgroundPics.background8, 0, 0, width, height);
           level = 3;
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY = round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
           popMatrix(); 
           pauseButton();
          levelPickerButton();
      
           backButton();
        break;   
        case 8:
            image(loadedBackgroundPics.background8, 0, 0, width, height);
            Text(10, 20, 0.75, "It looks like the trees are thinning!", 1);
            Text(10, 50, 0.75, "Wait, what is that ahead?", 1);
            Text(10, 80, 0.75, "Oh great, another fortress.", 1);
            Text(10, 110, 0.75, "Hopefully the security isn`t as heavy", 1);
            Text(10, 140, 0.75, "since I`m farther from the border.", 1);
            
            mcb(80, 400, 440, 50, 9);
            Text(240, 416, 0.9, 'Move on', 1);
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 4;
                setLevel();    
            } 
            
        break;   
        case 9:
              image(loadedBackgroundPics.background8, 0, 0, width, height);
           level = 4;
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY = round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
           
          popMatrix(); 
           pauseButton();
          levelPickerButton();
           
      backButton();
        break;   
        case 10:
            image(loadedBackgroundPics.background5, 0, 0, width, height);
            Text(10, 20, 0.65, "Now I just have to cross these hills, and", 1);
            Text(10, 50, 0.7, "then the mountains beyond. It is rumored ", 1);
            Text(10, 80, 0.75, "that Gornar`s capital is built into ", 1);
            Text(10, 110, 0.75, "a volcano. Hopefully this isn't true.", 1);
            Text(10, 140, 0.7, "I`m not excited about navigating lava.", 1);
            
            mcb(80, 400, 440, 50, 11);
            Text(240, 416, 0.9, 'Move on', 1);
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 5;
                setLevel();
            
                
            } 
            
        break;    
         case 11:
             image(loadedBackgroundPics.background5, 0, 0, width, height);
           level = 5;
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY = round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
           
          popMatrix(); 
           pauseButton();
          levelPickerButton();
           
      backButton();
        break;   
          case 12:
            image(loadedBackgroundPics.background9, 0, 0, width, height);
            Text(10, 20, 0.75, "Who would have thought that there", 1);
            Text(10, 50, 0.75, "was a fortress disguised in that hill?", 1);
            Text(10, 80, 0.75, "OK time to look ahead. ", 1);
            Text(10, 110, 0.75, "There's a wide plain ahead.", 1);
            Text(10, 140, 0.65, "I hope there aren`t too many hidden outposts", 1);
            
            mcb(80, 400, 440, 50, 13);
            Text(230, 416, 0.9, 'continue', 1);
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 6;
                resetPlayer1();   
                        
                   
               runObjects();
                setLevel();            
            } 
        break;    
         case 13:
             image(loadedBackgroundPics.background9, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY = round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObject(sprites);
           
           runObject(blocks);
           runObject(enemies);
           runObject(bosses);
           runObject(archers);
           runObject(wizards);
       runObject(fireBalls);
           runObject(arrows);
           
           runObject(knives);
           runObject(bolts);
            runObject(healthBonuses);
            runObject(coins);
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
           
          popMatrix(); 
           pauseButton();
           levelPickerButton();
      backButton();
        break;   
         case 14:
            image(loadedBackgroundPics.background10, 0, 0, width, height);
            Text(10, 20, 0.75, "I`m getting closer to the mountains!", 1);
            Text(10, 50, 0.7, "Hopefully I can find an unfortified", 1);
            Text(10, 80, 0.7, "pass through. and beyond hopefully", 1);
            Text(10, 110, 0.7, "Gornar's headquarters are close!", 1);
            Text(10, 140, 0.7, "I hope I can find the pearl.", 1);
            
            mcb(80, 400, 440, 50, 15);
            Text(230, 416, 0.9, 'continue', 1);
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 7;
                setLevel();
                
            } 
        break;   
        case 15:
             image(loadedBackgroundPics.background10, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
           
          popMatrix(); 
           pauseButton();
           levelPickerButton();
      backButton();
        break; 
         case 16:
            image(loadedBackgroundPics.background1, 0, 0, width, height);
            textBubble(0, width, 100, 3);
            Text(10, 20, 0.75, "Hmm, there are two passes ahead.", 1);
            Text(10, 50, 0.7, "One seems much more difficult,", 1);
            Text(10, 80, 0.65, "but maybe it will be less heavily guarded.", 1);
            Text(10, 110, 0.7, "The other seems easy, but it will", 1);
            Text(10, 140, 0.7, "probably have more guards.", 1);
            
            mcb(80, 400, 440, 50, 17);
            Text(135, 416, 0.9, 'Take the easy pass.', 1);
            mcb(80, 460, 440, 50, 18);
            Text(135, 476, 0.9, 'Take the hard pass', 1);
            
            
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 8;
                setLevel();    
                
            } 
        
        if(click && mouseX >= 80 && mouseY >= 460 && mouseX <= 520 && mouseY <= 510) {
                level = 9;
                setLevel();           
                
            } 
        break;   
        case 17:
            level = 8;
             image(loadedBackgroundPics.background1, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY = round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
           if(player1[0].x >= levelW -blockSize-blockSize/2) {
                gamePage = 19;   
           } 
          popMatrix(); 
           pauseButton();
           levelPickerButton();
      backButton();
        break; 
        case 18:
            level = 9;
             image(loadedBackgroundPics.background1, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
           
          popMatrix(); 
           pauseButton();
           levelPickerButton();
      backButton();
        break; 
          case 19:
            image(loadedBackgroundPics.background1, 0, 0, width, height);
            textBubble(0, width, 80, 2);
            Text(10, 40, 0.75, "I`m about halfway up the mountain.", 1);
            Text(10, 70, 0.75, "Once I reach the top hopefully I can", 1); 
             Text(10, 100, 0.75, "see what is beyond.", 1);
              mcb(80, 400, 440, 50, 20);
            Text(230, 416, 0.9, 'continue', 1);
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 10;
                setLevel();    
                
            } 
        
        break; 
        case 20:
            level = 10;
             image(loadedBackgroundPics.background1, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
           
          popMatrix(); 
           pauseButton();
           levelPickerButton();
           levelPickerButton();
      backButton();
        break; 
           case 21:
            image(loadedBackgroundPics.background12, 0, 0, width, height);
            //mountainSide
            noStroke();
            fill(94, 94, 94);
            bezier(0, 600, 200, 500, 400, 550, 600, 600);
            arc(200, 600, 100, 200, 180, 360);
            bezier(0, 600, 200, 600, 400, 400, 600, 600);
            
            fill(74, 74, 74);
            bezier(0, 600, 200, 550, 400, 600, 600, 600);
            arc(350, 600, 200, 100, 180, 360);
            arc(180, 600, 60, 180, 180, 360);
            
            Text(10, 20, 0.75, "So the legends are true.", 2);
            Text(10, 50, 0.7, "Gornar`s capital is built into a volcano.", 2); 
            Text(10, 80, 0.75, "I still have a long way to go,", 2);
            Text(10, 110, 0.75, "and many obstacles to pass.", 2);
            Text(10, 140, 0.75, "First of all, I`ll get down ", 2);
            Text(10, 170, 0.75, "this mountain side.", 2);
             
              mcb(80, 470, 440, 50, 22);
            Text(230, 486, 0.9, 'continue', 1);
            
            
            
            
            if(click && mouseX >= 80 && mouseY >= 470 && mouseX <= 570 && mouseY <= 520) {
                level = 11;
                setLevel();    
                
            } 
        
        break; 
        case 22:
            level = 11;
             image(loadedBackgroundPics.background12, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize) {
                gamePage = 23;
        
            } 
          popMatrix(); 
           pauseButton();
           levelPickerButton();
          backButton();
          if(player1[0].x >= levelW-blockSize) {
            gamePage = 23;
            
          } 
        break; 
         case 23:
            image(loadedBackgroundPics.background12, 0, 0, width, height);
              
            Text(10, 20, 0.75, "Now to pass this plain.", 2);
            Text(10, 50, 0.7, "I have no idea how I`ll", 2); 
            Text(10, 80, 0.75, "get to the pearl.", 2);
            Text(10, 110, 0.75, "I don`t even know how", 2);
            Text(10, 140, 0.75, "I`ll get past the wall.", 2);
            Text(10, 170, 0.75, "The only thing I can do is", 2);
            Text(10, 200, 0.75, "keep on.", 2);
            
             
              mcb(80, 470, 440, 50, 24);
            Text(230, 486, 0.9, 'continue', 1);
            
            if(click && mouseX >= 80 && mouseY >= 470 && mouseX <= 570 && mouseY <= 520) {
                level = 12;
                setLevel();    
                
            } 
      
        break; 
        case 24:
            level = 12;
             image(loadedBackgroundPics.background12, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize) {
                gamePage = 25;
                
              } 
          popMatrix(); 
           pauseButton();
           
          backButton();
          if(player1[0].x >= levelW-blockSize) {
            gamePage = 25;
            
          } 
          levelPickerButton();
        break; 
          case 25:
            image(loadedBackgroundPics.background13, 0, 0, width, height);
              
            Text(10, 20, 0.75, "I'm about halway accross the plain.", 2);
            Text(10, 50, 0.7, "I need to know where to head in", 2); 
            Text(10, 80, 0.75, "the city.", 2);
            Text(10, 110, 0.75, "Wait, there's a hole in the ", 2);
            Text(10, 140, 0.75, "ground over there!", 2);
            Text(10, 170, 0.75, "Should I make for that or the gate?", 2);
            Text(10, 200, 0.75, "Maybe the map can help.", 2);
           
             
            mcb(80, 400, 440, 50, 26);
            Text(135, 416, 0.9, 'head for the hole', 1);
            mcb(80, 460, 440, 50, 27);
            Text(135, 476, 0.9, 'head for the gate', 1);
            
            
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 13;
                setLevel();    
                
            } 
        
        if(click && mouseX >= 80 && mouseY >= 460 && mouseX <= 520 && mouseY <= 510) {
                level = 14;
            setLevel();            
                
            } 
      
        break; 
         case 26:
            level = 13;
             image(loadedBackgroundPics.background13, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
           
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize*2) {
                gamePage = 28;
        
            } 
          popMatrix();
          levelPickerButton();
          pauseButton();
               
          backButton();
        break;  
        case 27:
            level = 14;
             image(loadedBackgroundPics.background13, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize) {
                gamePage = 28;
        
            } 
          popMatrix(); 
           pauseButton();
           
             backButton();
              
              levelPickerButton();
        break; 
          case 28:
              for(var i = 0; i < width; i += 50) {
                  for(var j = 0; j < height; j += 50) {
                    image(Block.images.magma, i, j, 50, 50);
                    }
              }
            Text(10, 20, 0.75, "Beautiful. Now I`m in a hole", 2);
            Text(10, 50, 0.7, "In the ground that leads who knows", 2); 
            Text(10, 80, 0.75, "where, and I probably have enemies", 2);
            Text(10, 110, 0.75, "not far behind me. Well at least", 2);
            Text(10, 140, 0.75, "this tunnel was signified in the", 2);
            Text(10, 170, 0.75, "map, so it at least leads somewhere.", 2);
            
           mcb(80, 400, 440, 50, 29);
           Text(230, 416, 0.9, 'continue', 1);
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 15;
                setLevel();    
                
            } 
        break; 
        case 29:
             level = 15;
              for(var i = 0; i < width; i += 50) {
                  for(var j = 0; j < height; j += 50) {
                        image(Block.images.magma, i, j, 50, 50);
                    }
              }
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize) {
                gamePage = 30;
        
            } 
          popMatrix(); 
           pauseButton();
           
            backButton();
      
            levelPickerButton();
        break;  
        case 30:
            image(loadedBackgroundPics.background14, 0, 0, width, height);
            Text(10, 20, 0.75, "I`m being driven straight ", 2);
            Text(10, 50, 0.7, "into the volcano.", 2); 
            Text(10, 80, 0.75, "I need to find out where the", 2);
            Text(10, 110, 0.75, "treasury is. The pearl is probably", 2);
            Text(10, 140, 0.75, "inside a guarded vault.", 2);
            mcb(80, 400, 440, 50, 31);
           Text(230, 416, 0.9, 'continue', 1);
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 16;
             setLevel();    
                
            } 
        break;
          case 31:
             level = 16;
              image(loadedBackgroundPics.background14, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
           runObjects();
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize) {
                gamePage = 32;
        
            } 
          popMatrix(); 
           pauseButton();
           
      backButton();
      
      levelPickerButton();
        break; 
         case 32:
            image(loadedBackgroundPics.background15, 0, 0, width, height);
            Text(10, 20, 0.75, "I wonder where these steps lead ", 2);
            
            
            
           
             
            mcb(80, 400, 440, 50, 33);
           Text(230, 416, 0.9, 'continue', 1);
            
            
            
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                level = 17;
                setLevel();    
            } 
        break;
          case 33:
             level = 17;
              image(loadedBackgroundPics.background15, 0, 0, width, height);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
             
             
          runObjects();
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize) {
                gamePage = 34;
        
            } 
          popMatrix(); 
           pauseButton();
           
            backButton();
      
            levelPickerButton();
        break; 
         case 34:
            image(loadedBackgroundPics.background16, 0, 0, width, height);
            Text(10, 20, 0.75, "This appears to be an armory.", 2);
            Text(10, 50, 0.75, "Wait, who is that?", 2);
            Text(10, 80, 0.75, "He looks like a thief.", 2);
            
            Text(10, 110, 0.75, "I wouldn't be surprised if he is", 2);
           Text(10, 140, 0.75, "the one who stole the pearl", 2); 
           Text(10, 170, 0.75, "Why else would he be guarding ", 2);    
              Text(10, 200, 0.75, "close to where the pearl must be?", 2); 
             
             mcb(80, 400, 440, 50, 35);
           Text(230, 416, 0.9, 'continue', 1);
            
            if(click && mouseX >= 80 && mouseY >= 400 && mouseX <= 520 && mouseY <= 450) {
                gamePage = 35;
                level = 18;
        setLevel();    
                
            } 
        break;
         case 35:
             level = 18;
             background(77, 77, 77);
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
            
            
            for(var i = 0; i < levelW; i += blockSize) {
                noStroke();
                fill(115, 86, 0);
                rect(i+blockSize/2, blockSize*11 , blockSize/5, blockSize*5);
                fill(97, 97, 97);
                triangle(i+blockSize/2-blockSize/8, blockSize*11+blockSize/7, i+blockSize/2 +(blockSize/5)/2, blockSize*11+1, i+blockSize/2 +(blockSize/5)/2, blockSize*11-blockSize/2); 
                 fill(133, 133, 133);
                 triangle(i+blockSize/2+blockSize/8+(blockSize/5), blockSize*11+blockSize/7, i+blockSize/2 +(blockSize/5)/2, blockSize*11+1, i+blockSize/2 +(blockSize/5)/2, blockSize*11-blockSize/2); 
                
            }
            
          runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize) {
                gamePage = 36;
        
            } 
            if(player1[0].health <= 0) {
                for(var i in enemies) {
                    enemies[i].x = enemies[i].sx; 
                }    
            }    
          popMatrix(); 
           pauseButton();
           
      backButton();
     
      levelPickerButton();
        break; 
         case 36:
              image(loadedBackgroundPics.background17, 0, 0, width, height);
             
            Text(10, 30, 0.75, "So this is where the pearl was hidden.", 1);
             
             
             mcb(80, 450, 440, 50, 37);
           Text(230, 466, 0.9, 'continue', 1);
            
            
            
            
            if(click && mouseX >= 80 && mouseY >= 450 && mouseX <= 520 && mouseY <= 500) {
                gamePage = 37;
                level = 19;
        setLevel();    
                
            } 
        break;
         case 37:
             level = 19;
             var color1 = color(255, 255, 0);
            var color2 = color(255, 0, 0);
            for (var y = 0; y < height; y ++) {
                var beginX = 0;
                var endX = width;
            
            var col = lerpColor(color1, color2, (y) / height); 
            stroke (col);
            
            line(beginX, y, endX, y);
            }
           noStroke();
            player1[0].x = constrain(player1[0].x,0,levelW-player1[0].w);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 && player1[0].y <= levelH -width/2) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
            
            
          runObjects();
            
            player1[0].draw();   
             
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].x >= levelW-blockSize) {
                gamePage = 38;
        
            } 
          popMatrix(); 
           pauseButton();
           
          backButton();
          if(player1[0].x >= levelW-blockSize) {
            gamePage = 38;
            
          } 
          levelPickerButton();
        break; 
        case 38:
              image(loadedBackgroundPics.background18, 0, 0, width, height);
             
           mcb(80, 450, 440, 50, 39);
           Text(230, 466, 0.9, 'continue', 1);
            
           if(click && mouseX >= 80 && mouseY >= 450 && mouseX <= 520 && mouseY <= 500) {
                gamePage = 39;
                level = 20;
                setLevel();    
                
            } 
        break;
         case 39:
             level = 20;
             var color1 = color(255, 255, 0);
            var color2 = color(255, 0, 0);
            for (var y = 0; y < height; y ++) {
                var beginX = 0;
                var endX = width;
            
            var col = lerpColor(color1, color2, (y) / height); 
            stroke (col);
            
            line(beginX, y, endX, y);
            }
           noStroke();
            player1[0].x = constrain(player1[0].x,blockSize,levelW-blockSize);
            player1[0].y = constrain(player1[0].y,0,levelH-player1[0].h);
            
            if(cameraView && player1[0].x >= width/2 && player1[0].x <= levelW - width/2) {
               translateX =round(width/2 - player1[0].x);
               
            }
            if(cameraView && player1[0].y >=height/2 /* && player1[0].y <= levelH -width/2*/) {
                
                translateY =round(height/2 - player1[0].y);
            }
            pushMatrix();    
               
            if(cameraView) {
                translate(translateX, translateY);   
            }    
            
            
           runObjects();
            
            player1[0].draw();   
            if(!player1[0].hasPearl) {
                pearl(levelW/2+blockSize/2, blockSize*6, 0.5);
            }
            if(player1[0].x + player1[0].w >= levelW/2 && player1[0].x <= levelW/2+blockSize && player1[0].y +player1[0].h >=blockSize*6&& player1[0].y <= blockSize*6 + blockSize) {   
                player1[0].hasPearl = true;            
            }    
            if(keys[82]) {
                resetLevel();
            }    
           
            if(player1[0].hasPearl === true) {
                gamePage = 40;
            } 
          popMatrix(); 
           pauseButton();
           
      backButton();
    
      levelPickerButton();
        break; 
         case 40:
              background(0, 0, 0);
             pearl(300, 300, 4);
             
            Text(70, 30, 1.5, "I got the pearl!", 2);
             
             
             mcb(80, 450, 440, 50, 41);
           Text(230, 466, 0.9, 'continue', 1);
            
        break;
        case 41:
            image(loadedBackgroundPics.background20, 0, 0, width, height);
             Text(20, 30, 0.8, "After fleeing to the mountains", 2);
             Text(20, 60, 0.8, "with the pearl, you turn back and", 2);
             Text(20, 90, 0.8, "see the volcano errupting.", 2);
             Text(20, 90, 0.8, "see the volcano errupting.", 2);
              mcb(80, 450, 440, 50, 42);
                Text(230, 466, 0.9, 'continue', 1);
            
        break;    
        case 42:
            image(loadedBackgroundPics.background1, 0, 0, width, height);
            
            Text(20, 30, 1, "Assuming that the pearl was", 2);
             Text(20, 70, 1, "destroyed in the volcano and ", 2);
             Text(20, 110, 1, "thrown into confusion by the ", 2);
             Text(20, 150, 1, "sudden destruction of their ", 2);
              Text(20, 190, 1, "capital, Gornar does not", 2);
              Text(20, 230, 1, "oppose your return journey.", 2);
              mcb(80, 450, 440, 50, 43);
                Text(230, 466, 0.9, 'continue', 1);
        break;    
        case 43:
            page = 'win';
        break;    
        
    } 
    mapButton();
   
};
var win = function() {
   image(loadedBackgroundPics.finalBackground, 0, 0, width, height);
    Text(100, 100, 2.7, "victory!", 2);
    button(480, 480, 80, 80, 'final');
    fill(0);
   Text(510, 500, 2, ">", 1);
};    
var final = function() {
     image(loadedBackgroundPics.background1, 0, 0, width, height);
      fill(255, 255, 255, 200);
      noStroke();
      rect(0, 0, width, height);
      Text(20, 50, 1.3, 'You beat Combat Clash!', 1);
      Text(20, 120, 1.3, 'You died ' + deaths + " times", 1);
      Text(20, 190, 1, "make a spinoff to proove", 1);
      
      Text(20, 230, 1, "your score in the comments", 1);
      Text(20, 270, 1, "below, to see if you qualify", 1);
      Text(20, 310, 1, "for the leader board!", 1);
      
      button(180, 355, 245, 50, "home");
      Text(200, 370, 1, "play again?", 1);
      
      Text(20, 420, 0.9, "If you liked the game, you may", 1);
      printlnButton(180, 445, 245, 50, "https://www.khanacademy.org/computer-programming/sub-to-osp/5792481952694272");
      Text(20, 460, 1, "want to  subscribe!", 1);
      
};    
var story = function() {
    switch(storyPage) {
        case 1:
       image(loadedBackgroundPics.background1, 0, 0, width, height);
        
        
        textBubble(0, width, 260, 1);
       
         Text(20, 250, 1.4, 'Once upon a time...', 1);
        
        
    storyButton('forward', 450, 500, 100, 50);

     storyButton('skip', 250, 500, 100, 50); 
        break;
        case 2:
            image(loadedBackgroundPics.background1, 0, 0, width, height);
             textBubble(0, width, 70, 1.5);
            Text(20, 50, 2, 'in the land of', 1);
           textBubble(200, 400, 300, 1.5);
           Text(185, 285, 2, 'Aralor', 1);
        
    storyButton('forward', 450, 500, 100, 50);           
    storyButton('backward', 50, 500, 100, 50); 
     storyButton('skip', 250, 500, 100, 50); 
        break;
        case 3:
            background(0, 0, 0);
             textBubble(0, width, 70, 1.5);
            Text(20, 50, 1.6, 'There was a Pearl.', 1);
            pearl(300, 300, 4);
            
            
    storyButton('forward', 450, 500, 100, 50);
    storyButton('backward', 50, 500, 100, 50); 
     storyButton('skip', 250, 500, 100, 50); 
        break;
        case 4:
            background(0);
            fill(0, 0, 0, 100);
            rect(0, 0, width, height);
             textBubble(0, width, 70, 1.7);
             Text(20, 50, 0.68, 'weighing over thirty pounds, this was the', 1);
            Text(20, 80, 1.03, 'greatest pearl of the world.', 1);
            pearl(300, 300, 4);
            
    storyButton('forward', 450, 500, 100, 50);
    storyButton('backward', 50, 500, 100, 50); 
     storyButton('skip', 250, 500, 100, 50); 
        break;    
        case 5:
           image(loadedBackgroundPics.background2, 0, 0, width, height);
            textBubble(0, width, 100, 3);
            Text(20, 50, 1, "However, Aralor`s rival,", 1);
            Text(20, 100, 1, "the powerful kingdom of", 1);
            Text(20, 150, 1, "Gornar, was jealous.", 1);
              storyButton('forward', 450, 500, 100, 50);           
    storyButton('backward', 50, 500, 100, 50); 
     storyButton('skip', 250, 500, 100, 50); 
        break;    
        case 6:
            image(loadedBackgroundPics.background2, 0, 0, width, height);
            textBubble(0, width, 100, 4);
            Text(20, 30, 1, "If they succeeded in stealing", 1);
            Text(20, 80, 1.1, "the pearl, they would gain", 1);
            Text(20, 130, 1.05, "the upper hand in their war",1);
            Text(20, 180, 1, "against aralor.", 1);
            pearl(420, 400, 2);
            
    storyButton('forward', 450, 500, 100, 50);
    storyButton('backward', 50, 500, 100, 50); 
     storyButton('skip', 250, 500, 100, 50); 
        break;    
        case 7:
            image(loadedBackgroundPics.background2, 0, 0, width, height);
            textBubble(0, width, 70, 1.5);
            Text(20, 30, 0.95, "They employed a skilled thief", 1);
            Text(20, 80, 1.2, "to steal it.", 1);
            
            pearl(420, 400, 2);
            
            stroke(61, 61, 61);
            strokeWeight(80);
            line(500, 350, 620, 380);
            
            noFill();
            strokeWeight(30);
            
            bezier(500, 330, 460, 280, 420, 260, 380, 280);
            bezier(500, 350, 460, 300, 420, 280, 370, 300);
            bezier(500, 360, 460, 330, 420, 305, 370, 320);
            bezier(500, 370, 460, 340, 420, 325, 380, 350);
            
    storyButton('forward', 450, 500, 100, 50);
    storyButton('backward', 50, 500, 100, 50); 
     storyButton('skip', 250, 500, 100, 50); 
    
        break; 
        case 8:
            image(loadedBackgroundPics.background3, 0, 0, width, height);
            //{
            noStroke();
            fill(122, 122, 122);
            rect(150, 500, 100, 50, 10);          
            fill(110, 110, 110);
            rect(350, 500, 100, 50, 10);
            fill(135, 135, 135);
            rect(-50, 500, 100, 50, 10);
            fill(99, 99, 99);
            rect(550, 500, 100, 50, 10);
            fill(133, 133, 133);
            rect(0, 550, 100, 50, 10);
            fill(145, 145, 145);
            rect(100, 550, 100, 50, 10);
            fill(112, 112, 112);
            rect(200, 550, 100, 50, 10);
            fill(97, 97, 97);
            rect(300, 550, 100, 50, 10);
            fill(125, 125, 125);
            rect(400, 550, 100, 50, 10);
            fill(102, 102, 102);
            rect(500, 550, 100, 50, 10);
            //}bricks
            
            //pearl holder{
            
            //black base and pearl{
            noStroke();
            fill(0, 0, 0);
            rect(270, 400, 60, 100);
            arc(300, 500, 90, 100, 180, 360);
            
            pearl(300, 400, 0.6);
            
            noFill();
            stroke(0);
            strokeWeight(5);
            arc(300, 400, 50, 50, 10, 170);
            arc(300, 400, 45, 45, 10, 170);
            arc(300, 400, 40, 40, 10, 170);
            arc(300, 400, 35, 35, 10, 170);
            arc(300, 400, 55, 55, 10, 170);
            arc(300, 405, 55, 55, 10, 170);
            arc(300, 410, 55, 55, 10, 170);
            arc(300, 415, 55, 55, 10, 170);
            arc(300, 420, 55, 55, 10, 170);
            arc(300, 425, 55, 55, 10, 170);
            //}
            
            //engraving{
            noFill();
            stroke(61, 61, 61);
            strokeWeight(5);
            bezier(275, 410, 290, 430, 280, 470, 260, 500); 
            bezier(325, 410, 310, 430, 320, 470, 340, 500);
            
            bezier(285, 410, 300, 430, 290, 470, 270, 500); 
            bezier(315, 410, 300, 430, 310, 470, 330, 500);
            
            noStroke();
            fill(61, 61, 61);
            triangle(315, 500, 285, 500, 300, 430);
            //}
            
            //}
            
            //Oran{
            
            //neck
            stroke(0);
            strokeWeight(10);
            line(460, 390, 465, 410);
            
            //dagger
            pushMatrix();
            
            translate(500, 448);
            rotate(-20);
            noStroke();
            fill(0, 0, 0);
            triangle(8, -3, 8, 3, 40, 0);
            rect(7, -5, 2, 10);
            ellipse(6, -6, 3, 2);
            ellipse(6, 6, 3, 2);
            rect(-8, -2, 16, 4);
            popMatrix();
            
            //head
            noStroke();
            fill(143, 131, 0);
            ellipse(460, 385, 18, 15);
            
            fill(0, 0, 0);
            bezier(450, 390, 455, 410, 475, 390,469, 384);
            bezier(450, 385, 450, 370, 470, 370,470, 385);
            
            stroke(0, 0, 0);
            strokeWeight(10);
            //arms
            line(400, 390, 430, 400);
            line(430, 400, 460, 405);
            line(430, 400, 460, 410);
            line(460, 405, 470, 405);
            line(475, 405, 495, 425);
            line(475, 410, 495, 425);
            line(495, 425, 500, 445);
            
            
            
            
            //hands
            strokeWeight(4);
            noFill();
            arc(392, 392, 10, 5, 180, 360);
            arc(392, 388, 10, 5, 230, 360);
            arc(395, 395, 10, 5, 180, 330);
            
            line(503, 445, 504, 450);
            line(500, 445, 501, 452);
            line(497, 445, 497, 453);
            strokeWeight(10);
            
            
            
            //torso
            line(450, 410, 465, 440);
            line(455, 410, 470, 440);
            line(460, 410, 470, 440);
            line(465, 410, 475, 440);
            line(470, 410, 480, 440);
            line(475, 410, 480, 440);
            
            //legs
            line(465, 440, 445, 460);
            line(465, 445, 448, 460);
            line(448, 460, 445, 490);
            line(445, 460, 445, 490);
            line(470, 440, 500, 490);
            line(475, 440, 500, 490);
            line(478, 440, 500, 490);
            line(465, 447, 475, 447);
            
            //feet
            noStroke();
            fill(0);
            quad(437, 470, 439, 500, 450, 500, 454, 470);
            arc(439, 500, 17, 13, 180, 270);
            quad(480, 470, 495, 500, 505, 495, 500, 465);
            arc(495, 500, 20, 15, 180, 270);
            //}
            
            textBubble(0, width, 70, 2.5);
            Text(20, 30, 1.1, "Sneaking past the guards,", 1);
            Text(20, 80, 1, "the thief snatched the pearl", 1);
            Text(20, 130, 1, "and made off with it,", 1);
           
            
    storyButton('forward', 450, 500, 100, 50);
    storyButton('backward', 50, 500, 100, 50); 
     storyButton('skip', 250, 500, 100, 50); 
        break;
        case 9:
            image(loadedBackgroundPics.background19, 0, 0, width, height);
             Text(20, 20, 0.7, "but on his way out he dropped something.", 2);
             Text(20, 50, 0.7, "It was a map of Aralor and Gornar.", 2);
            storyButton('forward', 450, 500, 100, 50);
    storyButton('backward', 50, 500, 100, 50); 
     storyButton('skip', 250, 500, 100, 50); 
        break;    
        case 10:
           image(loadedBackgroundPics.background1, 0, 0, width, height);
           textBubble(0, width, 100, 3);
            noStroke();
            fill(255, 255, 255, 100);
            rect(0, 0, width, height);
            Text(20, 30, 0.8, "Gornar is now mustering men for", 1);
            Text(20, 80, 0.9, "a war on Aralor. Aralor`s only ", 1);
            Text(20, 130, 0.8, "chance to win, is to reclaim the", 1);
            Text(20, 180, 0.9, "pearl. You are sent an order.", 1);
            Text(20, 230, 0.9, "You are to travel into enemy", 1);
            Text(20, 280, 0.8, "territory to reclaim the pearl for", 1);
            Text(20, 330, 0.85, "Aralor.", 1);
            Text(20, 370, 0.8,"You have also been given the map.", 1);
            
            Text(20, 420, 1.15, "Your journey begins here.", 1);
            
    storyButton('forward', 250, 500, 100, 50);
        break;   
        case 11:
            page = 'game';
            drawLevel();
            level = 1;
        break;    
    }
};    
var pause = function() {
   noStroke();
   fill(0, 0, 0, pauseFill);
   rect(0, 0, width, height);
   noStroke();
   fill(148, 148, 148);
   rect(190, 240, 220, 40, 10);
   Text(200, 250, 1, 'game paused', 1);
    pauseFill -= 50;
    playButton();
};


drawLevel = function() {
   
    
    for(var i = 0; i < levels[level].length; i ++) {
          for(var j = 0; j < levels[level][i].length; j ++) {
            
            levelW = levels[level][i].length * blockSize;
            levelH = levels[level].length * blockSize;
            switch(levels[level][i][j]) {
                
                
                case '1':
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                    
                    
                break;
                
               
                
                 case 's':
                    
                    
                   this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'stone'));
                    
                break;  
                 case 'd':
                    
                     this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'dirt'));
                break;  
                 case 'g':
                     
                    this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'grass'));
                     
                break;  
                
                case 'b':
                    
                    this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'bark'));
                     
                    
                break;  
                
                case 'l':
                     
                     this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'leaf'));
                     
                break;  
                case 'B':
                    
                      this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'brick'));
                     
                break; 
                case '|':
                     
                     this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'bars'));
                     
                break; 
                case 'w':
                     
                      this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'wood'));
                     
                break; 
                 case 'k':
                     
                      this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'mud'));
                     
                break; 
                case 'r':
                     
                      this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'magma'));
                     
                break; 
                case 'a':
                     
                      this.blocks.push(Block.new(j*blockSize, i*blockSize, blockSize, blockSize, 'black'));
                     
                break; 
                case 'L':
                     
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'ladder'));
                break;    
                case '}':
                     this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'leaf'));
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'ladder'));
                break;    
                case 'f':
                    this.blocks.push(deathBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'fire'));
                    
                break;  
                 
                case 'Q':
                    this.blocks.push(deathBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'spike'));
                    
                break;  
                case 'Z':
                    this.blocks.push(deathBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'lava'));
                    
                break;  
                case 'F':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'brick'));
                    this.blocks.push(deathBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'fire'));
                    
                break;
                case ':':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'stone'));
                    this.blocks.push(deathBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'spike'));
                
                break;   
                case 'p':
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize+blockSize/2, blockSize*3, 'portalDoor'));
                    
                    
                break;
                case 'P':
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize*2, blockSize*3, 'portalPassage'));
                break;    
                 case '<':
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'leftWater'));
                    
                break;   
                 case '>':
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'rightWater'));
                    
                break;    
                 case 'v':
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'downWater'));
                    
                break;    
                 case '^':
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'fallingBlock'));
                    
                break;    
                case 'A':
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'checkPoint'));
                    
                    
                break;   
                case 'e':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                break;    
                case '2':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                break; 
                case 'z':
                     this.wizards.push(Wizard.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                break;   
                case 'Y':
                   this.enemies.push(Oran.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                break;    
                case 'i':
                    this.wizards.push(Wizard.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'stone'));
                    
                break;  
                case 't':
                    this.wizards.push(Wizard.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'magma'));
                    
                break;  
                case 'V':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'stone'));
                    
                break; 
                case 'u':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'dirt'));
                    
                break; 
                case 'C':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'grass'));
                    
                break; 
                case 'N':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bark'));
                    
                break; 
                 case 'n':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'leaf'));
                    
                break; 
                case 'M':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bricks'));
                    break;
                case 'm':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bars'));
                    break;
                case '~':
                    this.archers.push(Archer.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'wood'));
                    
                break;    
                case 'S':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'stone'));
                    
                break;  
                 case 'D':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'dirt'));
                break;  
                 case 'G':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'grass'));
                break;  
                
                case '[':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bark'));
                   
                    
                break;  
                
                case '0':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'leaf'));
                break;  
                case ']':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'brick'));
                break; 
                case '/':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bars'));
                break; 
                case 'W':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'wood'));
                break; 
               case 'K':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'mud'));
                break; 
                case 'R':
                    
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'magma'));
                break; 
    
                case '(':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'stone'));
                    
                break;  
                 case '*':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'dirt'));
                break;  
                 case '&':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'grass'));
                break;  
                
                case '^':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bark'));
                   
                    
                break;  
                
                case '%':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'leaf'));
                break;  
                case '$':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'brick'));
                break; 
                case '#':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bars'));
                break; 
                case '@':
                    this.enemies.push(Enemy.new(j * blockSize, i * blockSize, blockSize-blockSize/10,  blockSize*2-blockSize/10-blockSize/10));
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'wood'));
                break; 
                
                case '3':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'wood'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;    
                case '4':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bars'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;  
                case '5':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bricks'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;  
                case '6':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'leaf'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;  
                case '7':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bark'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;  
                case '8':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'grass'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;  
                case '9':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'dirt'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;  
                case 'c':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'stone'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;
                case 'I':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'magma'));
                    p1SpawnX = j * blockSize;
                    p1SpawnY = i * blockSize;
                    player1[0].x = p1SpawnX;
                    player1[0].y = p1SpawnY;
                break;
                case '`':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'stone'));
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'ladder'));
                break;        
                case '+':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'brick'));
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'ladder'));
                break; 
                case 'x':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'bark'));
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'ladder'));
                break;  
                case 'h':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'dirt'));
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'ladder'));
                break;    
                case 'U':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'grass'));
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'ladder'));
                break;  
                case 'y':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'magma'));
                    this.blocks.push(physicBlock.new(j*blockSize, i*blockSize, blockSize, blockSize, 'fallingBlock'));
                break;    
                case 'X':
                    healthBonuses.push(new healthBonus(j*blockSize, i*blockSize));
                break; 
                  
                case '{':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'leaf'));
                    healthBonuses.push(new healthBonus(j*blockSize, i*blockSize));
                break;    
                case 'q':
                    this.sprites.push(Sprite.new(j * blockSize, i * blockSize, blockSize, blockSize, 'stone'));
                    healthBonuses.push(new healthBonus(j*blockSize, i*blockSize));
                break;  
            }
        
        }    
        
    }    
    
};
drawLevel();

draw = function() {
   this[page]();
    click = false;

};

mouseClicked = function() {
    click = true;  
};    
keyPressed = function() {
    keys[keyCode]=true;  
};    
keyReleased = function() {
    keys[keyCode]=false;  
};
